{"version":3,"sources":["game/util/Util.js","game/Point.js","game/Input.js","game/assets/shaders/Shaders.js","game/assets/shaders/darken-x.frag.js","game/assets/shaders/darken-y.frag.js","game/assets/shaders/lighten-x.frag.js","game/assets/shaders/lighten-y.frag.js","game/assets/shaders/sky.frag.js","game/util/math/Triangulate.js","game/util/math/Convex.js","game/Resources.js","game/assets/levels/Levels.js","game/assets/sprites/fruit/Spritesheet.js","game/assets/sprites/Sprites.js","game/assets/sprites/fruit/Physics.js","game/World.js","game/assets/levels/Test.js","game/Editor.js","game/Game.js","App.js","serviceWorker.js","index.js"],"names":["scale","scaleToPhysics","x","scaleToWorld","getScreenCenter","Point","window","innerWidth","innerHeight","inside","point","vs","y","i","j","length","xi","yi","xj","yj","polygonArea","vertices","total","l","Math","abs","keyboard","value","key","isDown","isUp","press","undefined","release","downHandler","event","preventDefault","upHandler","downListener","bind","upListener","addEventListener","unsubscribe","removeEventListener","Object","classCallCheck","this","pixiPoint","PIXI","vecPoint","planck","util","Input","world","app","offset","multiplier","check","stage","interactive","_this","graphics","lineStyle","moveTo","lineTo","rotation","line","generateCanvasTexture","alpha","addChild","mousemove","mouseMove","mousedown","mouseDown","physics","on","fixture","delta","player","sprite","force","velocity","body","getLinearVelocity","setAwake","center","ang","atan2","mouse","cos","sin","applyLinearImpulse","toVec2","getWorldCenter","data","global","o","u","distance","sqrt","lightenMinusXShader","lightenMinusYShader","skyUniforms","color1","type","Float32Array","color2","amount","skyShader","sky","shader","uniforms","EPSILON","pow","EDGE_STACK","Uint32Array","Triangulator","coords","n","Error","maxTriangles","triangles","halfedges","Int32Array","_hashSize","ceil","hullPrev","hullNext","hullTri","hullHash","fill","ids","minX","Infinity","minY","maxX","maxY","i0","i1","i2","cx","cy","minDist","d","dist","i0x","i0y","i1x","i1y","minRadius","r","circumradius","i2x","i2y","orient","ax","ay","bx","by","dx","dy","ex","ey","bl","cl","circumcenter","_cx","_cy","dists","Float64Array","quicksort","left","right","temp","tempDist","median","swap","hullStart","hullSize","_hashKey","trianglesLen","_addTriangle","xp","yp","k","start","e","q","t","_legalize","hull","subarray","points","getX","arguments","defaultGetX","getY","defaultGetY","p","floor","pseudoAngle","a","ar","b","a0","b0","al","p0","pr","pl","p1","inCircle","hbl","_link","br","c","px","py","qx","qy","rx","ry","fx","fy","bp","cp","arr","tmp","Convex","lineInt","l1","l2","precision","a1","b1","c1","a2","b2","c2","det","scalar_eq","lineSegmentsIntersect","p2","q1","q2","da","db","s","triangleArea","isLeft","isLeftOn","isRight","isRightOn","decomp","polygon","edges","polygonGetCutEdges","min","tmp1","tmp2","tmpPoly","nDiags","Number","MAX_VALUE","polygonIsReflex","polygonCanSee","polygonCopy","push","polygonAt","polygonSlice","cutEdges","Array","polys","cutEdge","poly","result","splice","indexOf","fastDecomp","polygonQuickDecomp","reflexVertices","steinerPoints","maxlevel","level","upperInt","lowerInt","upperDist","lowerDist","closestDist","upperIndex","lowerIndex","closestIndex","lowerPoly","upperPoly","v","console","warn","getIntersectionPoint","sqdist","polygonAppend","polygonCanSee2","makeCCW","N","pop","polygonReverse","from","to","tmpLine1","tmpLine2","targetPoly","polygonClear","resources","tracer","name","path","fruit","loading","values","Resources","resource","loaded","sheets","spritesheets","sprites","frames","apple","frame","w","h","rotated","trimmed","spriteSourceSize","sourceSize","avocado","banana","blackberry","cherry","coconut","fig","grapes","kiwi","lemon","mango","orange","peach","pear","pineapple","plum","strawberry","watermelon","meta","version","image","format","size","smartupdate","rigidBodies","imagePath","origin","polygons","circles","shapes","dynamicObjects","texture","getResource","Sprites","callback","spritesheet","baseTexture","loadNext","parse","sheet","createSprite","fixtures","debug","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","element","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","map","multiply","width","height","add","createFixture","shape","friction","restitution","err","return","textures","lightenShaders","World","game","definitions","input","objects","generated","initialPlayerPosition","gravity","physicsStage","createBody","position","resizeBus","background","clear","beginFill","drawRect","renderer","definition","Date","array","log","area","index","bakeStageTexture","internal","colors","backgroundShader","shaders","filters","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","object","addStageObject","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","addSprite","createPlayer","init","step","playerPosition","getPosition","getAngularVelocity","set","updateOwnerPos","update","tick","drawCircle","generateTexture","anchor","bullet","linearDamping","allowSleep","density","container","PIXIParticles","end","minimumScaleMultiplier","color","speed","minimumSpeedMultiplier","acceleration","maxSpeed","startRotation","max","noRotation","rotationSpeed","lifetime","blendMode","frequency","emitterLifetime","maxParticles","pos","addAtBack","spawnType","emit","objectSpread","drawPolygon","toPixiPoint","endFill","bounds","getBounds","pointsets","random","toArray","concat","toConsumableArray","primary","primaryDistance","accent","accentDistance","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","disance","ratio","tex","ADD","render","LINEAR","_i2","destroy","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","create","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","levels","require","ground","wall","required","Levels_i","Levels_i3","prop","Levels","clone","cache","JSON","stringify","error","Editor","dragging","startx","starty","mouseup","mouseupoutside","component","def","_i","makeInteractive","thing","rightdown","pointermove","rightup","Game","PRECISION_FRAGMENT","HIGH","Settings","velocityThreshold","transparent","editor","ready","autoResize","resize","onresize","getLevel","content","loadingPosition","subtract","setTimeout","getGeneratedTextures","children","removeChild","getChildAt","createContent","initializeRender","levelToString","ticker","_this2","loader","getResources","res","round","progress","load","loadSprites","appendChild","view","_this3","buildWorld","_this4","FXAAFilter","handler","App","props","possibleConstructorReturn","getPrototypeOf","call","state","status","search","selecting","setState","target","react_default","createElement","style","top","Grommet","theme","grommet","Box","TextInput","ref","onChange","updateSearch","placeholder","injectPixiContext","Component","Boolean","location","hostname","match","document","oncontextmenu","ReactDOM","src_App","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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CN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAGb4V,QAAW,GACXC,OAAU,CAAC,CACPjQ,KAAQ,UACRnF,SAAY,CAAC,CACTnB,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,uBAGd,CACC6S,KAAQ,UACR4C,UAAa,+CACbC,OAAU,CACNpW,EAAK,EACLU,EAAK,GAET2V,SAAY,CACR,CAAC,CACGrW,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,qBAGb4V,QAAW,GACXC,OAAU,CAAC,CACPjQ,KAAQ,UACRnF,SAAY,CAAC,CACTnB,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,uBAGd,CACC6S,KAAQ,SACR4C,UAAa,8CACbC,OAAU,CACNpW,EAAK,EACLU,EAAK,GAET2V,SAAY,CACR,CAAC,CACGrW,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,gBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAGb4V,QAAW,GACXC,OAAU,CAAC,CACPjQ,KAAQ,UACRnF,SAAY,CAAC,CACTnB,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,oBACN,CACCV,EAAK,gBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,uBAGd,CACC6S,KAAQ,aACR4C,UAAa,kDACbC,OAAU,CACNpW,EAAK,EACLU,EAAK,GAET2V,SAAY,CACR,CAAC,CACGrW,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,IACLU,EAAK,oBAET,CAAC,CACGV,EAAK,IACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,IACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,IACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,gBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,qBAGb4V,QAAW,GACXC,OAAU,CAAC,CACPjQ,KAAQ,UACRnF,SAAY,CAAC,CACTnB,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,gBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,IACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,uBAGd,CACC6S,KAAQ,SACR4C,UAAa,8CACbC,OAAU,CACNpW,EAAK,EACLU,EAAK,GAET2V,SAAY,CACR,CAAC,CACGrW,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,gBACLU,EAAK,mBACN,CACCV,EAAK,IACLU,EAAK,oBAET,CAAC,CACGV,EAAK,IACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,IACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,IACN,CACCV,EAAK,IACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,gBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,qBAGb4V,QAAW,GACXC,OAAU,CAAC,CACPjQ,KAAQ,UACRnF,SAAY,CAAC,CACTnB,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,IACLU,EAAK,mBACN,CACCV,EAAK,gBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,IACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,IACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,gBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,uBAGd,CACC6S,KAAQ,UACR4C,UAAa,+CACbC,OAAU,CACNpW,EAAK,EACLU,EAAK,GAET2V,SAAY,CACR,CAAC,CACGrW,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,KACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,gBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,gBACLU,EAAK,oBACN,CACCV,EAAK,IACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,qBAGb4V,QAAW,GACXC,OAAU,CAAC,CACPjQ,KAAQ,UACRnF,SAAY,CAAC,CACTnB,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,gBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,IACLU,EAAK,mBACN,CACCV,EAAK,gBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,KACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,uBAGd,CACC6S,KAAQ,MACR4C,UAAa,2CACbC,OAAU,CACNpW,EAAK,EACLU,EAAK,GAET2V,SAAY,CACR,CAAC,CACGrW,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,iBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,qBAGb4V,QAAW,GACXC,OAAU,CAAC,CACPjQ,KAAQ,UACRnF,SAAY,CAAC,CACTnB,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,uBAGd,CACC6S,KAAQ,SACR4C,UAAa,8CACbC,OAAU,CACNpW,EAAK,EACLU,EAAK,GAET2V,SAAY,CACR,CAAC,CACGrW,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,gBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,IACLU,EAAK,oBAET,CAAC,CACGV,EAAK,IACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,gBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,gBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,iBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,iBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,GACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBAGb4V,QAAW,GACXC,OAAU,CAAC,CACPjQ,KAAQ,UACRnF,SAAY,CAAC,CACTnB,EAAK,GACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,IACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,gBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,iBACN,CACCV,EAAK,mBACLU,EAAK,uBAGd,CACC6S,KAAQ,OACR4C,UAAa,4CACbC,OAAU,CACNpW,EAAK,EACLU,EAAK,GAET2V,SAAY,CACR,CAAC,CACGrW,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,iBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,iBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,iBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,qBAGb4V,QAAW,GACXC,OAAU,CAAC,CACPjQ,KAAQ,UACRnF,SAAY,CAAC,CACTnB,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,uBAGd,CACC6S,KAAQ,QACR4C,UAAa,6CACbC,OAAU,CACNpW,EAAK,EACLU,EAAK,GAET2V,SAAY,CACR,CAAC,CACGrW,EAAK,IACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,IACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,qBAGb4V,QAAW,GACXC,OAAU,CAAC,CACPjQ,KAAQ,UACRnF,SAAY,CAAC,CACTnB,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,IACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,uBAGd,CACC6S,KAAQ,QACR4C,UAAa,6CACbC,OAAU,CACNpW,EAAK,EACLU,EAAK,GAET2V,SAAY,CACR,CAAC,CACGrW,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,oBACLU,EAAK,mBACN,CACCV,EAAK,oBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,MAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,KACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,qBAGb4V,QAAW,GACXC,OAAU,CAAC,CACPjQ,KAAQ,UACRnF,SAAY,CAAC,CACTnB,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,KACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,oBACLU,EAAK,mBACN,CACCV,EAAK,oBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,uBAGd,CACC6S,KAAQ,SACR4C,UAAa,8CACbC,OAAU,CACNpW,EAAK,EACLU,EAAK,GAET2V,SAAY,CACR,CAAC,CACGrW,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,IACN,CACCV,EAAK,oBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,gBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,qBAGb4V,QAAW,GACXC,OAAU,CAAC,CACPjQ,KAAQ,UACRnF,SAAY,CAAC,CACTnB,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,gBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,oBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,IACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,uBAGd,CACC6S,KAAQ,QACR4C,UAAa,6CACbC,OAAU,CACNpW,EAAK,EACLU,EAAK,GAET2V,SAAY,CACR,CAAC,CACGrW,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,GACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,IACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,qBAGb4V,QAAW,GACXC,OAAU,CAAC,CACPjQ,KAAQ,UACRnF,SAAY,CAAC,CACTnB,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,IACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,GACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,uBAGd,CACC6S,KAAQ,OACR4C,UAAa,4CACbC,OAAU,CACNpW,EAAK,EACLU,EAAK,GAET2V,SAAY,CACR,CAAC,CACGrW,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,qBACN,CACCV,EAAK,iBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,qBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,qBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,sBAET,CAAC,CACGV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,gBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,kBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,qBAGb4V,QAAW,GACXC,OAAU,CAAC,CACPjQ,KAAQ,UACRnF,SAAY,CAAC,CACTnB,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,gBACLU,EAAK,kBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,qBACN,CACCV,EAAK,iBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,qBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,sBAGd,CACC6S,KAAQ,YACR4C,UAAa,iDACbC,OAAU,CACNpW,EAAK,EACLU,EAAK,GAET2V,SAAY,CACR,CAAC,CACGrW,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,qBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,gBACLU,EAAK,mBACN,CACCV,EAAK,IACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,kBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,qBAGb4V,QAAW,GACXC,OAAU,CAAC,CACPjQ,KAAQ,UACRnF,SAAY,CAAC,CACTnB,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,IACLU,EAAK,oBACN,CACCV,EAAK,gBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,qBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,uBAGd,CACC6S,KAAQ,OACR4C,UAAa,4CACbC,OAAU,CACNpW,EAAK,EACLU,EAAK,GAET2V,SAAY,CACR,CAAC,CACGrW,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,iBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,iBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,IACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,GACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,kBAET,CAAC,CACGV,EAAK,GACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,GACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,GACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,qBAGb4V,QAAW,GACXC,OAAU,CAAC,CACPjQ,KAAQ,UACRnF,SAAY,CAAC,CACTnB,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,oBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,GACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,IACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,iBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,sBAGd,CACC6S,KAAQ,aACR4C,UAAa,kDACbC,OAAU,CACNpW,EAAK,EACLU,EAAK,GAET2V,SAAY,CACR,CAAC,CACGrW,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBAET,CAAC,CACGV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,qBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,iBACN,CACCV,EAAK,mBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,qBAGb4V,QAAW,GACXC,OAAU,CAAC,CACPjQ,KAAQ,UACRnF,SAAY,CAAC,CACTnB,EAAK,mBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,iBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,iBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,iBACN,CACCV,EAAK,kBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,kBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,uBAGd,CACC6S,KAAQ,aACR4C,UAAa,kDACbC,OAAU,CACNpW,EAAK,EACLU,EAAK,GAET2V,SAAY,CACR,CAAC,CACGrW,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,kBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,mBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBAET,CAAC,CACGV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,oBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,mBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,qBAGb4V,QAAW,GACXC,OAAU,CAAC,CACPjQ,KAAQ,UACRnF,SAAY,CAAC,CACTnB,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kBACLU,EAAK,mBACN,CACCV,EAAK,kB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","file":"static/js/main.b7bc9191.chunk.js","sourcesContent":["import Point from '../Point';\r\n\r\nconst scale = 20;\r\n\r\nexport function scaleToPhysics(x) {\r\n    return x / scale;\r\n}\r\n\r\nexport function scaleToWorld(x) {\r\n    return x * scale;\r\n}\r\n\r\nexport function normalize(point, len) {\r\n    if ((point.x === 0 && point.y === 0)) {\r\n        return new Point(0, 0);\r\n    }\r\n    const angle = Math.atan2(point.y, point.x);\r\n    const nx = Math.cos(angle) * len;\r\n    const ny = Math.sin(angle) * len;\r\n    return new Point(nx, ny);\r\n}\r\n\r\nexport function toDegrees(angle) {\r\n    return angle * (180 / Math.PI);\r\n}\r\n\r\nexport function toRadians(angle) {\r\n    return angle * (Math.PI / 180);\r\n}\r\n\r\nexport function getScreenCenter() {\r\n    return new Point((window.innerWidth / 2), (window.innerHeight / 2));\r\n}\r\n\r\nexport function distance(o, u) {\r\n    return Math.sqrt(((o.y - u.y) * (o.y - u.y)) + ((o.x - u.x) * (o.x - u.x)));\r\n}\r\n\r\nexport function inside(point, vs) {\r\n    // ray-casting algorithm based on\r\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\r\n    let x = point[0], y = point[1];\r\n    let inside = false;\r\n    for (let i = 0, j = vs.length - 1; i < vs.length; j = i++) {\r\n        let xi = vs[i][0], yi = vs[i][1];\r\n        let xj = vs[j][0], yj = vs[j][1];\r\n\r\n        let intersect = ((yi > y) !== (yj > y))\r\n            && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\r\n        if (intersect) inside = !inside;\r\n    }\r\n    return inside;\r\n}\r\n\r\nexport function polygonArea(vertices) {\r\n    // https://stackoverflow.com/questions/16285134/calculating-polygon-area\r\n    var total = 0;\r\n\r\n    for (var i = 0, l = vertices.length; i < l; i++) {\r\n        var addX = vertices[i].x;\r\n        var addY = vertices[i === vertices.length - 1 ? 0 : i + 1].y;\r\n        var subX = vertices[i === vertices.length - 1 ? 0 : i + 1].x;\r\n        var subY = vertices[i].y;\r\n\r\n        total += (addX * addY * 0.5);\r\n        total -= (subX * subY * 0.5);\r\n    }\r\n\r\n    return Math.abs(total);\r\n}\r\n\r\nexport function keyboard(value) {\r\n    // https://github.com/kittykatattack/learningPixi#keyboard\r\n\r\n    let key = {};\r\n    key.value = value;\r\n    key.isDown = false;\r\n    key.isUp = true;\r\n    key.press = undefined;\r\n    key.release = undefined;\r\n    key.downHandler = event => {\r\n        if (event.key === key.value) {\r\n            if (key.isUp && key.press) key.press();\r\n            key.isDown = true;\r\n            key.isUp = false;\r\n            event.preventDefault();\r\n        }\r\n    };\r\n\r\n    key.upHandler = event => {\r\n        if (event.key === key.value) {\r\n            if (key.isDown && key.release) key.release();\r\n            key.isDown = false;\r\n            key.isUp = true;\r\n            event.preventDefault();\r\n        }\r\n    };\r\n\r\n    const downListener = key.downHandler.bind(key);\r\n    const upListener = key.upHandler.bind(key);\r\n\r\n    window.addEventListener(\r\n        \"keydown\", downListener, false\r\n    );\r\n    window.addEventListener(\r\n        \"keyup\", upListener, false\r\n    );\r\n\r\n    key.unsubscribe = () => {\r\n        window.removeEventListener(\"keydown\", downListener);\r\n        window.removeEventListener(\"keyup\", upListener);\r\n    };\r\n\r\n    return key;\r\n}","import * as PIXI from 'pixi.js';\r\nimport * as planck from 'planck-js';\r\nimport * as util from './util/Util';\r\n\r\nclass Point {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.pixiPoint = new PIXI.Point(this.x, this.y);\r\n        this.vecPoint = planck.Vec2(this.x, this.y);\r\n    }\r\n\r\n    add(x, y) {\r\n        return new Point(this.x + x, this.y + y);\r\n    }\r\n\r\n    subtract(x, y) {\r\n        return new Point(this.x - x, this.y - y);\r\n    }\r\n\r\n    multiply(x, y) {\r\n        return new Point(this.x * x, this.y * y);\r\n    }\r\n\r\n    toPixiPoint() {\r\n        return this.pixiPoint;\r\n    }\r\n\r\n    toVec2() {\r\n        return this.vecPoint;\r\n    }\r\n\r\n    toArray() {\r\n        return [this.x, this.y];\r\n    }\r\n\r\n    scaleToPhysics() {\r\n        return new Point(util.scaleToPhysics(this.x), util.scaleToPhysics(this.y));\r\n    }\r\n}\r\n\r\nexport default Point;","import * as PIXI from 'pixi.js'\r\nimport Point from './Point';\r\nimport * as util from './util/Util';\r\n\r\nclass Input {\r\n    constructor(world) {\r\n        this.world = world;\r\n        this.app = world.app;\r\n        this.offset = new Point(0, 0);\r\n        this.multiplier = 1;\r\n        this.check = 30;\r\n        this.app.stage.interactive = true;\r\n    }\r\n\r\n    init() {\r\n        const graphics = new PIXI.Graphics();\r\n        graphics.lineStyle(10, 0xffffff);\r\n        graphics.moveTo(0, 0).lineTo(10, 0);\r\n        graphics.x = 500;\r\n        graphics.y = 500;\r\n        graphics.rotation = 0;\r\n        this.line = new PIXI.Sprite(graphics.generateCanvasTexture());\r\n        this.line.alpha = 0.2;\r\n        this.world.window.addChild(this.line);\r\n\r\n        this.app.stage.mousemove = (event) => this.mouseMove(event);\r\n        this.app.stage.mousedown = (event) => this.mouseDown(event);\r\n\r\n        this.world.physics.on(\"begin-contact\", (fixture) => {\r\n            this.multiplier = 0;\r\n        });\r\n    }\r\n\r\n    tick(delta) {\r\n        this.line.x = this.world.player.sprite.x + this.offset.x;\r\n        this.line.y = this.world.player.sprite.y + this.offset.y;\r\n        this.line.scale.x = this.multiplier < 0.05 ? 0 : this.force / 20 * this.multiplier;\r\n\r\n        const velocity = this.world.player.body.getLinearVelocity();\r\n        if (Math.abs(velocity.x) + Math.abs(velocity.y) < 0.005) {\r\n            this.check--;\r\n        }\r\n        if (this.check <= 0) {\r\n            this.multiplier = 1;\r\n            this.check = 30;\r\n            this.world.player.body.setAwake(false);\r\n        }\r\n\r\n        // cheat mode\r\n        //this.multiplier = 1;\r\n    }\r\n\r\n    mouseDown(event) {\r\n        const force = 0.7;\r\n        this.multiplier *= 0.5;\r\n        if (this.multiplier < 0.05) {\r\n            return;\r\n        }\r\n\r\n        this.mouseMove(event); // Hack??\r\n        const center = util.getScreenCenter();\r\n        const ang = Math.atan2(this.mouse.y - center.y, this.mouse.x - center.x);\r\n        const x = -Math.cos(ang) * force * util.scaleToPhysics(this.force) * this.multiplier;\r\n        const y = -Math.sin(ang) * force * util.scaleToPhysics(this.force) * this.multiplier;\r\n        this.world.player.body.applyLinearImpulse(new Point(x, y).scaleToPhysics().toVec2(), this.world.player.body.getWorldCenter(), true);\r\n    }\r\n\r\n    mouseMove(event) {\r\n        const center = util.getScreenCenter();\r\n        this.mouse = new Point(event.data.global.x, event.data.global.y);\r\n        const ang = Math.atan2(this.mouse.y - center.y, this.mouse.x - center.x);\r\n        const offsetAmount = 20;\r\n        this.offset = new Point(Math.cos(ang) * offsetAmount, Math.sin(ang) * offsetAmount);\r\n        this.line.rotation = ang;\r\n\r\n        const distance = util.distance(new Point(this.mouse.x, this.mouse.y), center);\r\n        this.force = distance;\r\n    }\r\n}\r\n\r\nexport default Input;","import * as PIXI from 'pixi.js';\r\nimport skyFrag from './sky.frag.js'\r\nimport darkenMinusX from './darken-x.frag.js'\r\nimport darkenMinusY from './darken-y.frag.js'\r\n\r\nimport lightenMinusX from './lighten-x.frag.js'\r\nimport lightenMinusY from './lighten-y.frag.js'\r\n\r\nconst darkenMinusXShader = new PIXI.Filter('', darkenMinusX);\r\nconst darkenMinusYShader = new PIXI.Filter('', darkenMinusY);\r\nexport function darken() {\r\n    return [darkenMinusXShader, darkenMinusYShader];\r\n}\r\n\r\nconst lightenMinusXShader = new PIXI.Filter('', lightenMinusX);\r\nconst lightenMinusYShader = new PIXI.Filter('', lightenMinusY);\r\nexport function lighten() {\r\n    return [lightenMinusXShader, lightenMinusYShader];\r\n}\r\n\r\nconst skyUniforms = {\r\n    color1: {\r\n        type: \"vec3\",\r\n        value: new Float32Array([0.2, 0.4, 1.0]),\r\n    },\r\n    color2: {\r\n        type: \"vec3\",\r\n        value: new Float32Array([0, 1.0, 0])\r\n    },\r\n    amount: {\r\n        type: \"f\",\r\n        value: 0.4\r\n    }\r\n}\r\nconst skyShader = new PIXI.Filter('', skyFrag, skyUniforms);\r\nexport function sky() {\r\n    return {\r\n        shader: skyShader,\r\n        uniforms: skyUniforms\r\n    }\r\n}\r\n\r\nfunction hexToRgb(hex) {\r\n    var r = (hex >> 16) & 255;\r\n    var g = (hex >> 8) & 255;\r\n    var b = hex & 255;\r\n\r\n    return (r / 255).toFixed(3) + \",\" + (b / 255).toFixed(3) + \",\" + (g / 255).toFixed(3);\r\n\r\n}","export default `\r\nprecision mediump float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying vec4 vColor;\r\n\r\nuniform sampler2D vTexture;\r\n\r\nvoid main(){\r\n\tif (texture2D(vTexture, vTextureCoord).a != 1.0) {\r\n        discard;\r\n    }\r\n\tvec2 uvs = vTextureCoord.xy;\r\n\r\n\tvec4 fg = texture2D(vTexture, vTextureCoord);\r\n\tfg.r = mix(1.0-uvs.x, fg.r, 0.7);\r\n\tfg.b = mix(1.0-uvs.x, fg.b, 0.7);\r\n\tfg.g = mix(1.0-uvs.x, fg.g, 0.7);\r\n\r\n\tgl_FragColor = fg;\r\n}`","export default `\r\nprecision mediump float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying vec4 vColor;\r\n\r\nuniform sampler2D vTexture;\r\n\r\nvoid main(){\r\n\tif (texture2D(vTexture, vTextureCoord).a != 1.0) {\r\n        discard;\r\n    }\r\n\tvec2 uvs = vTextureCoord.xy;\r\n\r\n\tvec4 fg = texture2D(vTexture, vTextureCoord);\r\n\tfg.r = mix(1.0-uvs.y, fg.r, 0.7);\r\n\tfg.b = mix(1.0-uvs.y, fg.b, 0.7);\r\n\tfg.g = mix(1.0-uvs.y, fg.g, 0.7);\r\n\r\n\tgl_FragColor = fg;\r\n}`","export default `\r\nprecision mediump float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying vec4 vColor;\r\n\r\nuniform sampler2D vTexture;\r\n\r\nvoid main(){\r\n\tif (texture2D(vTexture, vTextureCoord).a != 1.0) {\r\n        discard;\r\n    }\r\n\tvec2 uvs = vTextureCoord.xy;\r\n\r\n\tvec4 fg = texture2D(vTexture, vTextureCoord);\r\n\tfg.r = mix((fg.r + uvs.x) / 2.0, fg.r, 0.7);\r\n\tfg.b = mix((fg.b + uvs.x) / 2.0, fg.b, 0.7);\r\n\tfg.g = mix((fg.g + uvs.x) / 2.0, fg.g, 0.7);\r\n\r\n\tgl_FragColor = fg;\r\n}`","export default `\r\nprecision mediump float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying vec4 vColor;\r\n\r\nuniform sampler2D vTexture;\r\n\r\nvoid main(){\r\n\tif (texture2D(vTexture, vTextureCoord).a != 1.0) {\r\n        discard;\r\n    }\r\n\tvec2 uvs = vTextureCoord.xy;\r\n\r\n\tvec4 fg = texture2D(vTexture, vTextureCoord);\r\n\tfg.r = mix((fg.r + uvs.y) / 2.0, fg.r, 0.7);\r\n\tfg.b = mix((fg.b + uvs.y) / 2.0, fg.b, 0.7);\r\n\tfg.g = mix((fg.g + uvs.y) / 2.0, fg.g, 0.7);\r\n\r\n\tgl_FragColor = fg;\r\n}`","export default `\r\nprecision mediump float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying vec4 vColor;\r\n\r\nuniform vec3 color1;\r\nuniform vec3 color2;\r\nuniform float amount;\r\n\r\nvoid main(){\r\n\tvec2 uvs = vTextureCoord.xy;\r\n\tvec4 fg = vec4(0.0, 0.0, 0.0, 1.0);\r\n\tfg.r = mix(color1.r, color2.r, uvs.y *  amount);\r\n\tfg.b = mix(color1.b, color2.b, uvs.y *  amount);\r\n\tfg.g = mix(color1.g, color2.g, uvs.y *  amount);\r\n\r\n\tgl_FragColor = fg;\r\n}`","/* eslint-disable */\r\n// https://github.com/mapbox/delaunator\r\n\r\nconst EPSILON = Math.pow(2, -52);\r\nconst EDGE_STACK = new Uint32Array(512);\r\n\r\nexport default class Triangulator {\r\n\r\n    static from(points, getX = defaultGetX, getY = defaultGetY) {\r\n        const n = points.length;\r\n        const coords = new Float64Array(n * 2);\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            const p = points[i];\r\n            coords[2 * i] = getX(p);\r\n            coords[2 * i + 1] = getY(p);\r\n        }\r\n\r\n        return new Triangulator(coords);\r\n    }\r\n\r\n    constructor(coords) {\r\n        const n = coords.length >> 1;\r\n        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\r\n\r\n        this.coords = coords;\r\n\r\n        // arrays that will store the triangulation graph\r\n        const maxTriangles = 2 * n - 5;\r\n        const triangles = this.triangles = new Uint32Array(maxTriangles * 3);\r\n        const halfedges = this.halfedges = new Int32Array(maxTriangles * 3);\r\n\r\n        // temporary arrays for tracking the edges of the advancing convex hull\r\n        this._hashSize = Math.ceil(Math.sqrt(n));\r\n        const hullPrev = this.hullPrev = new Uint32Array(n); // edge to prev edge\r\n        const hullNext = this.hullNext = new Uint32Array(n); // edge to next edge\r\n        const hullTri = this.hullTri = new Uint32Array(n); // edge to adjacent triangle\r\n        const hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\r\n\r\n        // populate an array of point indices; calculate input data bbox\r\n        const ids = new Uint32Array(n);\r\n        let minX = Infinity;\r\n        let minY = Infinity;\r\n        let maxX = -Infinity;\r\n        let maxY = -Infinity;\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            const x = coords[2 * i];\r\n            const y = coords[2 * i + 1];\r\n            if (x < minX) minX = x;\r\n            if (y < minY) minY = y;\r\n            if (x > maxX) maxX = x;\r\n            if (y > maxY) maxY = y;\r\n            ids[i] = i;\r\n        }\r\n        const cx = (minX + maxX) / 2;\r\n        const cy = (minY + maxY) / 2;\r\n\r\n        let minDist = Infinity;\r\n        let i0, i1, i2;\r\n\r\n        // pick a seed point close to the center\r\n        for (let i = 0; i < n; i++) {\r\n            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\r\n            if (d < minDist) {\r\n                i0 = i;\r\n                minDist = d;\r\n            }\r\n        }\r\n        const i0x = coords[2 * i0];\r\n        const i0y = coords[2 * i0 + 1];\r\n\r\n        minDist = Infinity;\r\n\r\n        // find the point closest to the seed\r\n        for (let i = 0; i < n; i++) {\r\n            if (i === i0) continue;\r\n            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\r\n            if (d < minDist && d > 0) {\r\n                i1 = i;\r\n                minDist = d;\r\n            }\r\n        }\r\n        let i1x = coords[2 * i1];\r\n        let i1y = coords[2 * i1 + 1];\r\n\r\n        let minRadius = Infinity;\r\n\r\n        // find the third point which forms the smallest circumcircle with the first two\r\n        for (let i = 0; i < n; i++) {\r\n            if (i === i0 || i === i1) continue;\r\n            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\r\n            if (r < minRadius) {\r\n                i2 = i;\r\n                minRadius = r;\r\n            }\r\n        }\r\n        let i2x = coords[2 * i2];\r\n        let i2y = coords[2 * i2 + 1];\r\n\r\n        if (minRadius === Infinity) {\r\n            throw new Error('No Delaunay triangulation exists for this input.');\r\n        }\r\n\r\n        // swap the order of the seed points for counter-clockwise orientation\r\n        if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {\r\n            const i = i1;\r\n            const x = i1x;\r\n            const y = i1y;\r\n            i1 = i2;\r\n            i1x = i2x;\r\n            i1y = i2y;\r\n            i2 = i;\r\n            i2x = x;\r\n            i2y = y;\r\n        }\r\n\r\n        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\r\n        this._cx = center.x;\r\n        this._cy = center.y;\r\n\r\n        const dists = new Float64Array(n);\r\n        for (let i = 0; i < n; i++) {\r\n            dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\r\n        }\r\n\r\n        // sort the points by distance from the seed triangle circumcenter\r\n        quicksort(ids, dists, 0, n - 1);\r\n\r\n        // set up the seed triangle as the starting hull\r\n        this.hullStart = i0;\r\n        let hullSize = 3;\r\n\r\n        hullNext[i0] = hullPrev[i2] = i1;\r\n        hullNext[i1] = hullPrev[i0] = i2;\r\n        hullNext[i2] = hullPrev[i1] = i0;\r\n\r\n        hullTri[i0] = 0;\r\n        hullTri[i1] = 1;\r\n        hullTri[i2] = 2;\r\n\r\n        hullHash[this._hashKey(i0x, i0y)] = i0;\r\n        hullHash[this._hashKey(i1x, i1y)] = i1;\r\n        hullHash[this._hashKey(i2x, i2y)] = i2;\r\n\r\n        this.trianglesLen = 0;\r\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\r\n\r\n        for (let k = 0, xp, yp; k < ids.length; k++) {\r\n            const i = ids[k];\r\n            const x = coords[2 * i];\r\n            const y = coords[2 * i + 1];\r\n\r\n            // skip near-duplicate points\r\n            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\r\n            xp = x;\r\n            yp = y;\r\n\r\n            // skip seed triangle points\r\n            if (i === i0 || i === i1 || i === i2) continue;\r\n\r\n            // find a visible edge on the convex hull using edge hash\r\n            let start = 0;\r\n            for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\r\n                start = hullHash[(key + j) % this._hashSize];\r\n                if (start !== -1 && start !== hullNext[start]) break;\r\n            }\r\n\r\n            start = hullPrev[start];\r\n            let e = start, q;\r\n            while (q = hullNext[e], !orient(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {\r\n                e = q;\r\n                if (e === start) {\r\n                    e = -1;\r\n                    break;\r\n                }\r\n            }\r\n            if (e === -1) continue; // likely a near-duplicate point; skip it\r\n\r\n            // add the first triangle from the point\r\n            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\r\n\r\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\r\n            hullTri[i] = this._legalize(t + 2);\r\n            hullTri[e] = t; // keep track of boundary triangles on the hull\r\n            hullSize++;\r\n\r\n            // walk forward through the hull, adding more triangles and flipping recursively\r\n            let n = hullNext[e];\r\n            while (q = hullNext[n], orient(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1])) {\r\n                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\r\n                hullTri[i] = this._legalize(t + 2);\r\n                hullNext[n] = n; // mark as removed\r\n                hullSize--;\r\n                n = q;\r\n            }\r\n\r\n            // walk backward from the other side, adding more triangles and flipping\r\n            if (e === start) {\r\n                while (q = hullPrev[e], orient(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {\r\n                    t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\r\n                    this._legalize(t + 2);\r\n                    hullTri[q] = t;\r\n                    hullNext[e] = e; // mark as removed\r\n                    hullSize--;\r\n                    e = q;\r\n                }\r\n            }\r\n\r\n            // update the hull indices\r\n            this.hullStart = hullPrev[i] = e;\r\n            hullNext[e] = hullPrev[n] = i;\r\n            hullNext[i] = n;\r\n\r\n            // save the two new edges in the hash table\r\n            hullHash[this._hashKey(x, y)] = i;\r\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\r\n        }\r\n\r\n        this.hull = new Uint32Array(hullSize);\r\n        for (let i = 0, e = this.hullStart; i < hullSize; i++) {\r\n            this.hull[i] = e;\r\n            e = hullNext[e];\r\n        }\r\n        this.hullPrev = this.hullNext = this.hullTri = null; // get rid of temporary arrays\r\n\r\n        // trim typed triangle mesh arrays\r\n        this.triangles = triangles.subarray(0, this.trianglesLen);\r\n        this.halfedges = halfedges.subarray(0, this.trianglesLen);\r\n    }\r\n\r\n    _hashKey(x, y) {\r\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\r\n    }\r\n\r\n    _legalize(a) {\r\n        const {triangles, coords, halfedges} = this;\r\n\r\n        let i = 0;\r\n        let ar = 0;\r\n\r\n        // recursion eliminated with a fixed-size stack\r\n        while (true) {\r\n            const b = halfedges[a];\r\n\r\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\r\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\r\n             * then do the same check/flip recursively for the new pair of triangles\r\n             *\r\n             *           pl                    pl\r\n             *          /||\\                  /  \\\r\n             *       al/ || \\bl            al/    \\a\r\n             *        /  ||  \\              /      \\\r\n             *       /  a||b  \\    flip    /___ar___\\\r\n             *     p0\\   ||   /p1   =>   p0\\---bl---/p1\r\n             *        \\  ||  /              \\      /\r\n             *       ar\\ || /br             b\\    /br\r\n             *          \\||/                  \\  /\r\n             *           pr                    pr\r\n             */\r\n            const a0 = a - a % 3;\r\n            ar = a0 + (a + 2) % 3;\r\n\r\n            if (b === -1) { // convex hull edge\r\n                if (i === 0) break;\r\n                a = EDGE_STACK[--i];\r\n                continue;\r\n            }\r\n\r\n            const b0 = b - b % 3;\r\n            const al = a0 + (a + 1) % 3;\r\n            const bl = b0 + (b + 2) % 3;\r\n\r\n            const p0 = triangles[ar];\r\n            const pr = triangles[a];\r\n            const pl = triangles[al];\r\n            const p1 = triangles[bl];\r\n\r\n            const illegal = inCircle(\r\n                coords[2 * p0], coords[2 * p0 + 1],\r\n                coords[2 * pr], coords[2 * pr + 1],\r\n                coords[2 * pl], coords[2 * pl + 1],\r\n                coords[2 * p1], coords[2 * p1 + 1]);\r\n\r\n            if (illegal) {\r\n                triangles[a] = p1;\r\n                triangles[b] = p0;\r\n\r\n                const hbl = halfedges[bl];\r\n\r\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\r\n                if (hbl === -1) {\r\n                    let e = this.hullStart;\r\n                    do {\r\n                        if (this.hullTri[e] === bl) {\r\n                            this.hullTri[e] = a;\r\n                            break;\r\n                        }\r\n                        e = this.hullNext[e];\r\n                    } while (e !== this.hullStart);\r\n                }\r\n                this._link(a, hbl);\r\n                this._link(b, halfedges[ar]);\r\n                this._link(ar, bl);\r\n\r\n                const br = b0 + (b + 1) % 3;\r\n\r\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\r\n                if (i < EDGE_STACK.length) {\r\n                    EDGE_STACK[i++] = br;\r\n                }\r\n            } else {\r\n                if (i === 0) break;\r\n                a = EDGE_STACK[--i];\r\n            }\r\n        }\r\n\r\n        return ar;\r\n    }\r\n\r\n    _link(a, b) {\r\n        this.halfedges[a] = b;\r\n        if (b !== -1) this.halfedges[b] = a;\r\n    }\r\n\r\n    // add a new triangle given vertex indices and adjacent half-edge ids\r\n    _addTriangle(i0, i1, i2, a, b, c) {\r\n        const t = this.trianglesLen;\r\n\r\n        this.triangles[t] = i0;\r\n        this.triangles[t + 1] = i1;\r\n        this.triangles[t + 2] = i2;\r\n\r\n        this._link(t, a);\r\n        this._link(t + 1, b);\r\n        this._link(t + 2, c);\r\n\r\n        this.trianglesLen += 3;\r\n\r\n        return t;\r\n    }\r\n}\r\n\r\n// monotonically increases with real angle, but doesn't need expensive trigonometry\r\nfunction pseudoAngle(dx, dy) {\r\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\r\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\r\n}\r\n\r\nfunction dist(ax, ay, bx, by) {\r\n    const dx = ax - bx;\r\n    const dy = ay - by;\r\n    return dx * dx + dy * dy;\r\n}\r\n\r\nfunction orient(px, py, qx, qy, rx, ry) {\r\n    return (qy - py) * (rx - qx) - (qx - px) * (ry - qy) < 0;\r\n}\r\n\r\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\r\n    const dx = ax - px;\r\n    const dy = ay - py;\r\n    const ex = bx - px;\r\n    const ey = by - py;\r\n    const fx = cx - px;\r\n    const fy = cy - py;\r\n\r\n    const ap = dx * dx + dy * dy;\r\n    const bp = ex * ex + ey * ey;\r\n    const cp = fx * fx + fy * fy;\r\n\r\n    return dx * (ey * cp - bp * fy) -\r\n           dy * (ex * cp - bp * fx) +\r\n           ap * (ex * fy - ey * fx) < 0;\r\n}\r\n\r\nfunction circumradius(ax, ay, bx, by, cx, cy) {\r\n    const dx = bx - ax;\r\n    const dy = by - ay;\r\n    const ex = cx - ax;\r\n    const ey = cy - ay;\r\n\r\n    const bl = dx * dx + dy * dy;\r\n    const cl = ex * ex + ey * ey;\r\n    const d = 0.5 / (dx * ey - dy * ex);\r\n\r\n    const x = (ey * bl - dy * cl) * d;\r\n    const y = (dx * cl - ex * bl) * d;\r\n\r\n    return x * x + y * y;\r\n}\r\n\r\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\r\n    const dx = bx - ax;\r\n    const dy = by - ay;\r\n    const ex = cx - ax;\r\n    const ey = cy - ay;\r\n\r\n    const bl = dx * dx + dy * dy;\r\n    const cl = ex * ex + ey * ey;\r\n    const d = 0.5 / (dx * ey - dy * ex);\r\n\r\n    const x = ax + (ey * bl - dy * cl) * d;\r\n    const y = ay + (dx * cl - ex * bl) * d;\r\n\r\n    return {x, y};\r\n}\r\n\r\nfunction quicksort(ids, dists, left, right) {\r\n    if (right - left <= 20) {\r\n        for (let i = left + 1; i <= right; i++) {\r\n            const temp = ids[i];\r\n            const tempDist = dists[temp];\r\n            let j = i - 1;\r\n            while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\r\n            ids[j + 1] = temp;\r\n        }\r\n    } else {\r\n        const median = (left + right) >> 1;\r\n        let i = left + 1;\r\n        let j = right;\r\n        swap(ids, median, i);\r\n        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\r\n        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\r\n        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\r\n\r\n        const temp = ids[i];\r\n        const tempDist = dists[temp];\r\n        while (true) {\r\n            do i++; while (dists[ids[i]] < tempDist);\r\n            do j--; while (dists[ids[j]] > tempDist);\r\n            if (j < i) break;\r\n            swap(ids, i, j);\r\n        }\r\n        ids[left + 1] = ids[j];\r\n        ids[j] = temp;\r\n\r\n        if (right - i + 1 >= j - left) {\r\n            quicksort(ids, dists, i, right);\r\n            quicksort(ids, dists, left, j - 1);\r\n        } else {\r\n            quicksort(ids, dists, left, j - 1);\r\n            quicksort(ids, dists, i, right);\r\n        }\r\n    }\r\n}\r\n\r\nfunction swap(arr, i, j) {\r\n    const tmp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = tmp;\r\n}\r\n\r\nfunction defaultGetX(p) {\r\n    return p[0];\r\n}\r\nfunction defaultGetY(p) {\r\n    return p[1];\r\n}","/* eslint-disable */\r\n// https://github.com/schteppe/poly-decomp.js/\r\n\r\n// module.exports = {\r\n//     decomp: polygonDecomp,\r\n//     quickDecomp: polygonQuickDecomp,\r\n//     isSimple: polygonIsSimple,\r\n//     removeCollinearPoints: polygonRemoveCollinearPoints,\r\n//     removeDuplicatePoints: polygonRemoveDuplicatePoints,\r\n//     makeCCW: polygonMakeCCW\r\n// };\r\n\r\nexport default class Convex {\r\n    static decomp = polygonDecomp;\r\n    static fastDecomp = polygonQuickDecomp;\r\n    static makeCCW = polygonMakeCCW;\r\n}\r\n\r\n/**\r\n * Compute the intersection between two lines.\r\n * @static\r\n * @method lineInt\r\n * @param  {Array}  l1          Line vector 1\r\n * @param  {Array}  l2          Line vector 2\r\n * @param  {Number} precision   Precision to use when checking if the lines are parallel\r\n * @return {Array}              The intersection point.\r\n */\r\nfunction lineInt(l1,l2,precision){\r\n    precision = precision || 0;\r\n    var i = [0,0]; // point\r\n    var a1, b1, c1, a2, b2, c2, det; // scalars\r\n    a1 = l1[1][1] - l1[0][1];\r\n    b1 = l1[0][0] - l1[1][0];\r\n    c1 = a1 * l1[0][0] + b1 * l1[0][1];\r\n    a2 = l2[1][1] - l2[0][1];\r\n    b2 = l2[0][0] - l2[1][0];\r\n    c2 = a2 * l2[0][0] + b2 * l2[0][1];\r\n    det = a1 * b2 - a2*b1;\r\n    if (!scalar_eq(det, 0, precision)) { // lines are not parallel\r\n        i[0] = (b2 * c1 - b1 * c2) / det;\r\n        i[1] = (a1 * c2 - a2 * c1) / det;\r\n    }\r\n    return i;\r\n}\r\n\r\n/**\r\n * Checks if two line segments intersects.\r\n * @method segmentsIntersect\r\n * @param {Array} p1 The start vertex of the first line segment.\r\n * @param {Array} p2 The end vertex of the first line segment.\r\n * @param {Array} q1 The start vertex of the second line segment.\r\n * @param {Array} q2 The end vertex of the second line segment.\r\n * @return {Boolean} True if the two line segments intersect\r\n */\r\nfunction lineSegmentsIntersect(p1, p2, q1, q2){\r\n\tvar dx = p2[0] - p1[0];\r\n\tvar dy = p2[1] - p1[1];\r\n\tvar da = q2[0] - q1[0];\r\n\tvar db = q2[1] - q1[1];\r\n\r\n\t// segments are parallel\r\n\tif((da*dy - db*dx) === 0){\r\n\t\treturn false;\r\n\t}\r\n\r\n\tvar s = (dx * (q1[1] - p1[1]) + dy * (p1[0] - q1[0])) / (da * dy - db * dx);\r\n\tvar t = (da * (p1[1] - q1[1]) + db * (q1[0] - p1[0])) / (db * dx - da * dy);\r\n\r\n\treturn (s>=0 && s<=1 && t>=0 && t<=1);\r\n}\r\n\r\n/**\r\n * Get the area of a triangle spanned by the three given points. Note that the area will be negative if the points are not given in counter-clockwise order.\r\n * @static\r\n * @method area\r\n * @param  {Array} a\r\n * @param  {Array} b\r\n * @param  {Array} c\r\n * @return {Number}\r\n */\r\nfunction triangleArea(a,b,c){\r\n    return (((b[0] - a[0])*(c[1] - a[1]))-((c[0] - a[0])*(b[1] - a[1])));\r\n}\r\n\r\nfunction isLeft(a,b,c){\r\n    return triangleArea(a,b,c) > 0;\r\n}\r\n\r\nfunction isLeftOn(a,b,c) {\r\n    return triangleArea(a, b, c) >= 0;\r\n}\r\n\r\nfunction isRight(a,b,c) {\r\n    return triangleArea(a, b, c) < 0;\r\n}\r\n\r\nfunction isRightOn(a,b,c) {\r\n    return triangleArea(a, b, c) <= 0;\r\n}\r\n\r\nvar tmpPoint1 = [],\r\n    tmpPoint2 = [];\r\n\r\n/**\r\n * Check if three points are collinear\r\n * @method collinear\r\n * @param  {Array} a\r\n * @param  {Array} b\r\n * @param  {Array} c\r\n * @param  {Number} [thresholdAngle=0] Threshold angle to use when comparing the vectors. The function will return true if the angle between the resulting vectors is less than this value. Use zero for max precision.\r\n * @return {Boolean}\r\n */\r\nfunction collinear(a,b,c,thresholdAngle) {\r\n    if(!thresholdAngle){\r\n        return triangleArea(a, b, c) === 0;\r\n    } else {\r\n        var ab = tmpPoint1,\r\n            bc = tmpPoint2;\r\n\r\n        ab[0] = b[0]-a[0];\r\n        ab[1] = b[1]-a[1];\r\n        bc[0] = c[0]-b[0];\r\n        bc[1] = c[1]-b[1];\r\n\r\n        var dot = ab[0]*bc[0] + ab[1]*bc[1],\r\n            magA = Math.sqrt(ab[0]*ab[0] + ab[1]*ab[1]),\r\n            magB = Math.sqrt(bc[0]*bc[0] + bc[1]*bc[1]),\r\n            angle = Math.acos(dot/(magA*magB));\r\n        return angle < thresholdAngle;\r\n    }\r\n}\r\n\r\nfunction sqdist(a,b){\r\n    var dx = b[0] - a[0];\r\n    var dy = b[1] - a[1];\r\n    return dx * dx + dy * dy;\r\n}\r\n\r\n/**\r\n * Get a vertex at position i. It does not matter if i is out of bounds, this function will just cycle.\r\n * @method at\r\n * @param  {Number} i\r\n * @return {Array}\r\n */\r\nfunction polygonAt(polygon, i){\r\n    var s = polygon.length;\r\n    return polygon[i < 0 ? i % s + s : i % s];\r\n}\r\n\r\n/**\r\n * Clear the polygon data\r\n * @method clear\r\n * @return {Array}\r\n */\r\nfunction polygonClear(polygon){\r\n    polygon.length = 0;\r\n}\r\n\r\n/**\r\n * Append points \"from\" to \"to\"-1 from an other polygon \"poly\" onto this one.\r\n * @method append\r\n * @param {Polygon} poly The polygon to get points from.\r\n * @param {Number}  from The vertex index in \"poly\".\r\n * @param {Number}  to The end vertex index in \"poly\". Note that this vertex is NOT included when appending.\r\n * @return {Array}\r\n */\r\nfunction polygonAppend(polygon, poly, from, to){\r\n    for(var i=from; i<to; i++){\r\n        polygon.push(poly[i]);\r\n    }\r\n}\r\n\r\n/**\r\n * Make sure that the polygon vertices are ordered counter-clockwise.\r\n * @method makeCCW\r\n */\r\nfunction polygonMakeCCW(polygon){\r\n    var br = 0,\r\n        v = polygon;\r\n\r\n    // find bottom right point\r\n    for (var i = 1; i < polygon.length; ++i) {\r\n        if (v[i][1] < v[br][1] || (v[i][1] === v[br][1] && v[i][0] > v[br][0])) {\r\n            br = i;\r\n        }\r\n    }\r\n\r\n    // reverse poly if clockwise\r\n    if (!isLeft(polygonAt(polygon, br - 1), polygonAt(polygon, br), polygonAt(polygon, br + 1))) {\r\n        polygonReverse(polygon);\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Reverse the vertices in the polygon\r\n * @method reverse\r\n */\r\nfunction polygonReverse(polygon){\r\n    var tmp = [];\r\n    var N = polygon.length;\r\n    for(var i=0; i!==N; i++){\r\n        tmp.push(polygon.pop());\r\n    }\r\n    for(var i=0; i!==N; i++){\r\n\t\tpolygon[i] = tmp[i];\r\n    }\r\n}\r\n\r\n/**\r\n * Check if a point in the polygon is a reflex point\r\n * @method isReflex\r\n * @param  {Number}  i\r\n * @return {Boolean}\r\n */\r\nfunction polygonIsReflex(polygon, i){\r\n    return isRight(polygonAt(polygon, i - 1), polygonAt(polygon, i), polygonAt(polygon, i + 1));\r\n}\r\n\r\nvar tmpLine1=[],\r\n    tmpLine2=[];\r\n\r\n/**\r\n * Check if two vertices in the polygon can see each other\r\n * @method canSee\r\n * @param  {Number} a Vertex index 1\r\n * @param  {Number} b Vertex index 2\r\n * @return {Boolean}\r\n */\r\nfunction polygonCanSee(polygon, a,b) {\r\n    var p, dist, l1=tmpLine1, l2=tmpLine2;\r\n\r\n    if (isLeftOn(polygonAt(polygon, a + 1), polygonAt(polygon, a), polygonAt(polygon, b)) && isRightOn(polygonAt(polygon, a - 1), polygonAt(polygon, a), polygonAt(polygon, b))) {\r\n        return false;\r\n    }\r\n    dist = sqdist(polygonAt(polygon, a), polygonAt(polygon, b));\r\n    for (var i = 0; i !== polygon.length; ++i) { // for each edge\r\n        if ((i + 1) % polygon.length === a || i === a){ // ignore incident edges\r\n            continue;\r\n        }\r\n        if (isLeftOn(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i + 1)) && isRightOn(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i))) { // if diag intersects an edge\r\n            l1[0] = polygonAt(polygon, a);\r\n            l1[1] = polygonAt(polygon, b);\r\n            l2[0] = polygonAt(polygon, i);\r\n            l2[1] = polygonAt(polygon, i + 1);\r\n            p = lineInt(l1,l2);\r\n            if (sqdist(polygonAt(polygon, a), p) < dist) { // if edge is blocking visibility to b\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * Check if two vertices in the polygon can see each other\r\n * @method canSee2\r\n * @param  {Number} a Vertex index 1\r\n * @param  {Number} b Vertex index 2\r\n * @return {Boolean}\r\n */\r\nfunction polygonCanSee2(polygon, a,b) {\r\n    // for each edge\r\n    for (var i = 0; i !== polygon.length; ++i) {\r\n        // ignore incident edges\r\n        if (i === a || i === b || (i + 1) % polygon.length === a || (i + 1) % polygon.length === b){\r\n            continue;\r\n        }\r\n        if( lineSegmentsIntersect(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i), polygonAt(polygon, i+1)) ){\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * Copy the polygon from vertex i to vertex j.\r\n * @method copy\r\n * @param  {Number} i\r\n * @param  {Number} j\r\n * @param  {Polygon} [targetPoly]   Optional target polygon to save in.\r\n * @return {Polygon}                The resulting copy.\r\n */\r\nfunction polygonCopy(polygon, i,j,targetPoly){\r\n    var p = targetPoly || [];\r\n    polygonClear(p);\r\n    if (i < j) {\r\n        // Insert all vertices from i to j\r\n        for(var k=i; k<=j; k++){\r\n            p.push(polygon[k]);\r\n        }\r\n\r\n    } else {\r\n\r\n        // Insert vertices 0 to j\r\n        for(var k=0; k<=j; k++){\r\n            p.push(polygon[k]);\r\n        }\r\n\r\n        // Insert vertices i to end\r\n        for(var k=i; k<polygon.length; k++){\r\n            p.push(polygon[k]);\r\n        }\r\n    }\r\n\r\n    return p;\r\n}\r\n\r\n/**\r\n * Decomposes the polygon into convex pieces. Returns a list of edges [[p1,p2],[p2,p3],...] that cuts the polygon.\r\n * Note that this algorithm has complexity O(N^4) and will be very slow for polygons with many vertices.\r\n * @method getCutEdges\r\n * @return {Array}\r\n */\r\nfunction polygonGetCutEdges(polygon) {\r\n    var min=[], tmp1=[], tmp2=[], tmpPoly = [];\r\n    var nDiags = Number.MAX_VALUE;\r\n\r\n    for (var i = 0; i < polygon.length; ++i) {\r\n        if (polygonIsReflex(polygon, i)) {\r\n            for (var j = 0; j < polygon.length; ++j) {\r\n                if (polygonCanSee(polygon, i, j)) {\r\n                    tmp1 = polygonGetCutEdges(polygonCopy(polygon, i, j, tmpPoly));\r\n                    tmp2 = polygonGetCutEdges(polygonCopy(polygon, j, i, tmpPoly));\r\n\r\n                    for(var k=0; k<tmp2.length; k++){\r\n                        tmp1.push(tmp2[k]);\r\n                    }\r\n\r\n                    if (tmp1.length < nDiags) {\r\n                        min = tmp1;\r\n                        nDiags = tmp1.length;\r\n                        min.push([polygonAt(polygon, i), polygonAt(polygon, j)]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return min;\r\n}\r\n\r\n/**\r\n * Decomposes the polygon into one or more convex sub-Polygons.\r\n * @method decomp\r\n * @return {Array} An array or Polygon objects.\r\n */\r\nfunction polygonDecomp(polygon){\r\n    var edges = polygonGetCutEdges(polygon);\r\n    if(edges.length > 0){\r\n        return polygonSlice(polygon, edges);\r\n    } else {\r\n        return [polygon];\r\n    }\r\n}\r\n\r\n/**\r\n * Slices the polygon given one or more cut edges. If given one, this function will return two polygons (false on failure). If many, an array of polygons.\r\n * @method slice\r\n * @param {Array} cutEdges A list of edges, as returned by .getCutEdges()\r\n * @return {Array}\r\n */\r\nfunction polygonSlice(polygon, cutEdges){\r\n    if(cutEdges.length === 0){\r\n\t\treturn [polygon];\r\n    }\r\n    if(cutEdges instanceof Array && cutEdges.length && cutEdges[0] instanceof Array && cutEdges[0].length===2 && cutEdges[0][0] instanceof Array){\r\n\r\n        var polys = [polygon];\r\n\r\n        for(var i=0; i<cutEdges.length; i++){\r\n            var cutEdge = cutEdges[i];\r\n            // Cut all polys\r\n            for(var j=0; j<polys.length; j++){\r\n                var poly = polys[j];\r\n                var result = polygonSlice(poly, cutEdge);\r\n                if(result){\r\n                    // Found poly! Cut and quit\r\n                    polys.splice(j,1);\r\n                    polys.push(result[0],result[1]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return polys;\r\n    } else {\r\n\r\n        // Was given one edge\r\n        var cutEdge = cutEdges;\r\n        var i = polygon.indexOf(cutEdge[0]);\r\n        var j = polygon.indexOf(cutEdge[1]);\r\n\r\n        if(i !== -1 && j !== -1){\r\n            return [polygonCopy(polygon, i,j),\r\n                    polygonCopy(polygon, j,i)];\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Checks that the line segments of this polygon do not intersect each other.\r\n * @method isSimple\r\n * @param  {Array} path An array of vertices e.g. [[0,0],[0,1],...]\r\n * @return {Boolean}\r\n * @todo Should it check all segments with all others?\r\n */\r\nfunction polygonIsSimple(polygon){\r\n    var path = polygon, i;\r\n    // Check\r\n    for(i=0; i<path.length-1; i++){\r\n        for(var j=0; j<i-1; j++){\r\n            if(lineSegmentsIntersect(path[i], path[i+1], path[j], path[j+1] )){\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Check the segment between the last and the first point to all others\r\n    for(i=1; i<path.length-2; i++){\r\n        if(lineSegmentsIntersect(path[0], path[path.length-1], path[i], path[i+1] )){\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction getIntersectionPoint(p1, p2, q1, q2, delta){\r\n\tdelta = delta || 0;\r\n\tvar a1 = p2[1] - p1[1];\r\n\tvar b1 = p1[0] - p2[0];\r\n\tvar c1 = (a1 * p1[0]) + (b1 * p1[1]);\r\n\tvar a2 = q2[1] - q1[1];\r\n\tvar b2 = q1[0] - q2[0];\r\n\tvar c2 = (a2 * q1[0]) + (b2 * q1[1]);\r\n\tvar det = (a1 * b2) - (a2 * b1);\r\n\r\n\tif(!scalar_eq(det,0,delta)){\r\n\t\treturn [((b2 * c1) - (b1 * c2)) / det, ((a1 * c2) - (a2 * c1)) / det];\r\n\t} else {\r\n\t\treturn [0,0];\r\n    }\r\n}\r\n\r\n/**\r\n * Quickly decompose the Polygon into convex sub-polygons.\r\n * @method quickDecomp\r\n * @param  {Array} result\r\n * @param  {Array} [reflexVertices]\r\n * @param  {Array} [steinerPoints]\r\n * @param  {Number} [delta]\r\n * @param  {Number} [maxlevel]\r\n * @param  {Number} [level]\r\n * @return {Array}\r\n */\r\nfunction polygonQuickDecomp(polygon, result,reflexVertices,steinerPoints,delta,maxlevel,level){\r\n    maxlevel = maxlevel || 100;\r\n    level = level || 0;\r\n    delta = delta || 25;\r\n    result = typeof(result)!==\"undefined\" ? result : [];\r\n    reflexVertices = reflexVertices || [];\r\n    steinerPoints = steinerPoints || [];\r\n\r\n    var upperInt=[0,0], lowerInt=[0,0], p=[0,0]; // Points\r\n    var upperDist=0, lowerDist=0, d=0, closestDist=0; // scalars\r\n    var upperIndex=0, lowerIndex=0, closestIndex=0; // Integers\r\n    var lowerPoly=[], upperPoly=[]; // polygons\r\n    var poly = polygon,\r\n        v = polygon;\r\n\r\n    if(v.length < 3){\r\n\t\treturn result;\r\n    }\r\n\r\n    level++;\r\n    if(level > maxlevel){\r\n        console.warn(\"quickDecomp: max level (\"+maxlevel+\") reached.\");\r\n        return result;\r\n    }\r\n\r\n    for (var i = 0; i < polygon.length; ++i) {\r\n        if (polygonIsReflex(poly, i)) {\r\n            reflexVertices.push(poly[i]);\r\n            upperDist = lowerDist = Number.MAX_VALUE;\r\n\r\n\r\n            for (var j = 0; j < polygon.length; ++j) {\r\n                if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) && isRightOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j - 1))) { // if line intersects with an edge\r\n                    p = getIntersectionPoint(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j - 1)); // find the point of intersection\r\n                    if (isRight(polygonAt(poly, i + 1), polygonAt(poly, i), p)) { // make sure it's inside the poly\r\n                        d = sqdist(poly[i], p);\r\n                        if (d < lowerDist) { // keep only the closest intersection\r\n                            lowerDist = d;\r\n                            lowerInt = p;\r\n                            lowerIndex = j;\r\n                        }\r\n                    }\r\n                }\r\n                if (isLeft(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j + 1)) && isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))) {\r\n                    p = getIntersectionPoint(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j + 1));\r\n                    if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), p)) {\r\n                        d = sqdist(poly[i], p);\r\n                        if (d < upperDist) {\r\n                            upperDist = d;\r\n                            upperInt = p;\r\n                            upperIndex = j;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // if there are no vertices to connect to, choose a point in the middle\r\n            if (lowerIndex === (upperIndex + 1) % polygon.length) {\r\n                //console.log(\"Case 1: Vertex(\"+i+\"), lowerIndex(\"+lowerIndex+\"), upperIndex(\"+upperIndex+\"), poly.size(\"+polygon.length+\")\");\r\n                p[0] = (lowerInt[0] + upperInt[0]) / 2;\r\n                p[1] = (lowerInt[1] + upperInt[1]) / 2;\r\n                steinerPoints.push(p);\r\n\r\n                if (i < upperIndex) {\r\n                    //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.begin() + upperIndex + 1);\r\n                    polygonAppend(lowerPoly, poly, i, upperIndex+1);\r\n                    lowerPoly.push(p);\r\n                    upperPoly.push(p);\r\n                    if (lowerIndex !== 0){\r\n                        //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.end());\r\n                        polygonAppend(upperPoly, poly,lowerIndex,poly.length);\r\n                    }\r\n                    //upperPoly.insert(upperPoly.end(), poly.begin(), poly.begin() + i + 1);\r\n                    polygonAppend(upperPoly, poly,0,i+1);\r\n                } else {\r\n                    if (i !== 0){\r\n                        //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.end());\r\n                        polygonAppend(lowerPoly, poly,i,poly.length);\r\n                    }\r\n                    //lowerPoly.insert(lowerPoly.end(), poly.begin(), poly.begin() + upperIndex + 1);\r\n                    polygonAppend(lowerPoly, poly,0,upperIndex+1);\r\n                    lowerPoly.push(p);\r\n                    upperPoly.push(p);\r\n                    //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.begin() + i + 1);\r\n                    polygonAppend(upperPoly, poly,lowerIndex,i+1);\r\n                }\r\n            } else {\r\n                // connect to the closest point within the triangle\r\n                //console.log(\"Case 2: Vertex(\"+i+\"), closestIndex(\"+closestIndex+\"), poly.size(\"+polygon.length+\")\\n\");\r\n\r\n                if (lowerIndex > upperIndex) {\r\n                    upperIndex += polygon.length;\r\n                }\r\n                closestDist = Number.MAX_VALUE;\r\n\r\n                if(upperIndex < lowerIndex){\r\n                    return result;\r\n                }\r\n\r\n                for (var j = lowerIndex; j <= upperIndex; ++j) {\r\n                    if (\r\n                        isLeftOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) &&\r\n                        isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))\r\n                    ) {\r\n                        d = sqdist(polygonAt(poly, i), polygonAt(poly, j));\r\n                        if (d < closestDist && polygonCanSee2(poly, i, j)) {\r\n                            closestDist = d;\r\n                            closestIndex = j % polygon.length;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (i < closestIndex) {\r\n                    polygonAppend(lowerPoly, poly,i,closestIndex+1);\r\n                    if (closestIndex !== 0){\r\n                        polygonAppend(upperPoly, poly,closestIndex,v.length);\r\n                    }\r\n                    polygonAppend(upperPoly, poly,0,i+1);\r\n                } else {\r\n                    if (i !== 0){\r\n                        polygonAppend(lowerPoly, poly,i,v.length);\r\n                    }\r\n                    polygonAppend(lowerPoly, poly,0,closestIndex+1);\r\n                    polygonAppend(upperPoly, poly,closestIndex,i+1);\r\n                }\r\n            }\r\n\r\n            // solve smallest poly first\r\n            if (lowerPoly.length < upperPoly.length) {\r\n                polygonQuickDecomp(lowerPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\r\n                polygonQuickDecomp(upperPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\r\n            } else {\r\n                polygonQuickDecomp(upperPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\r\n                polygonQuickDecomp(lowerPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n    result.push(polygon);\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Remove collinear points in the polygon.\r\n * @method removeCollinearPoints\r\n * @param  {Number} [precision] The threshold angle to use when determining whether two edges are collinear. Use zero for finest precision.\r\n * @return {Number}           The number of points removed\r\n */\r\nfunction polygonRemoveCollinearPoints(polygon, precision){\r\n    var num = 0;\r\n    for(var i=polygon.length-1; polygon.length>3 && i>=0; --i){\r\n        if(collinear(polygonAt(polygon, i-1),polygonAt(polygon, i),polygonAt(polygon, i+1),precision)){\r\n            // Remove the middle point\r\n            polygon.splice(i%polygon.length,1);\r\n            num++;\r\n        }\r\n    }\r\n    return num;\r\n}\r\n\r\n/**\r\n * Remove duplicate points in the polygon.\r\n * @method removeDuplicatePoints\r\n * @param  {Number} [precision] The threshold to use when determining whether two points are the same. Use zero for best precision.\r\n */\r\nfunction polygonRemoveDuplicatePoints(polygon, precision){\r\n    for(var i=polygon.length-1; i>=1; --i){\r\n        var pi = polygon[i];\r\n        for(var j=i-1; j>=0; --j){\r\n            if(points_eq(pi, polygon[j], precision)){\r\n                polygon.splice(i,1);\r\n                continue;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Check if two scalars are equal\r\n * @static\r\n * @method eq\r\n * @param  {Number} a\r\n * @param  {Number} b\r\n * @param  {Number} [precision]\r\n * @return {Boolean}\r\n */\r\nfunction scalar_eq(a,b,precision){\r\n    precision = precision || 0;\r\n    return Math.abs(a-b) <= precision;\r\n}\r\n\r\n/**\r\n * Check if two points are equal\r\n * @static\r\n * @method points_eq\r\n * @param  {Array} a\r\n * @param  {Array} b\r\n * @param  {Number} [precision]\r\n * @return {Boolean}\r\n */\r\nfunction points_eq(a,b,precision){\r\n    return scalar_eq(a[0],b[0],precision) && scalar_eq(a[1],b[1],precision);\r\n}","import * as PIXI from 'pixi.js';\r\n\r\nconst resources = {\r\n    tracer: {\r\n        name: \"particle\",\r\n        path: \"assets/sprites/particle.png\"\r\n    },\r\n    fruit: {\r\n        name: \"fruit\",\r\n        path: \"assets/spritesheets/fruit.png\"\r\n    },\r\n    loading: {\r\n        name: \"loading\",\r\n        path: \"assets/sprites/loading.png\"\r\n    }\r\n}\r\n\r\nconst values = [];\r\nfor (var key in resources) {\r\n    values.push(resources[key]);\r\n}\r\nexport default class Resources {\r\n    static loaded = resources;\r\n\r\n    static getResources() {\r\n        return values;\r\n    }\r\n\r\n    static getResource(resource) {\r\n        return PIXI.loader.resources[resource.name];\r\n    }\r\n}","import testLevel from './Test';\r\n\r\nconst uuid = require('uuid/v4');\r\nconst levels = [testLevel];\r\n\r\nconst required = [\"definitions\", \"objects\", \"sprites\"];\r\nfor (const level of levels) {\r\n    for (const prop of required) {\r\n        if (level[prop] === undefined) {\r\n            level[prop] = {};\r\n        }\r\n    }\r\n}\r\n\r\nexport default class Levels {\r\n    static getLevel(name) {\r\n        for (const level of levels) {\r\n            if (level.name === name) {\r\n                return level;\r\n            }\r\n        }\r\n        return levels[0];\r\n    }\r\n\r\n    // static levelToString(level) {\r\n    //     const clone = { ...level };\r\n    //     for (const object of clone.objects) {\r\n    //         delete object.uuid;\r\n    //     }\r\n    //     for (const sprite of clone.sprites) {\r\n    //         delete sprite.uuid;\r\n    //     }\r\n    //     return JSON.stringify(clone);\r\n    // }\r\n\r\n    // static getUUID(component) {\r\n    //     if (component.uuid === undefined) {\r\n    //         component.uuid = uuid();\r\n    //     }\r\n    //     return component.uuid;\r\n    // }\r\n\r\n    static levelToString(level) {\r\n        const clone = { ...level };\r\n        for (const key in clone.definitions) {\r\n            delete clone.definitions[key].shapes;\r\n        }\r\n        const cache = [];\r\n        const result = JSON.stringify(level, function (key, value) {\r\n            if (typeof value === 'object' && value !== null) {\r\n                if (cache.indexOf(value) !== -1) {\r\n                    try {\r\n                        return JSON.parse(JSON.stringify(value));\r\n                    } catch (error) {\r\n                        return;\r\n                    }\r\n                }\r\n                cache.push(value);\r\n            }\r\n            return value;\r\n        });\r\n        return result;\r\n    }\r\n}","export default {\r\n    \"frames\": {\r\n        \"apple\": {\r\n            \"frame\": {\r\n                \"x\": 0,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"rotated\": false,\r\n            \"trimmed\": false,\r\n            \"spriteSourceSize\": {\r\n                \"x\": 0,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"sourceSize\": {\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            }\r\n        },\r\n        \"avocado\": {\r\n            \"frame\": {\r\n                \"x\": 300,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"rotated\": false,\r\n            \"trimmed\": false,\r\n            \"spriteSourceSize\": {\r\n                \"x\": 0,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"sourceSize\": {\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            }\r\n        },\r\n        \"banana\": {\r\n            \"frame\": {\r\n                \"x\": 600,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"rotated\": false,\r\n            \"trimmed\": false,\r\n            \"spriteSourceSize\": {\r\n                \"x\": 0,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"sourceSize\": {\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            }\r\n        },\r\n        \"blackberry\": {\r\n            \"frame\": {\r\n                \"x\": 900,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"rotated\": false,\r\n            \"trimmed\": false,\r\n            \"spriteSourceSize\": {\r\n                \"x\": 0,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"sourceSize\": {\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            }\r\n        },\r\n        \"cherry\": {\r\n            \"frame\": {\r\n                \"x\": 1200,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"rotated\": false,\r\n            \"trimmed\": false,\r\n            \"spriteSourceSize\": {\r\n                \"x\": 0,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"sourceSize\": {\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            }\r\n        },\r\n        \"coconut\": {\r\n            \"frame\": {\r\n                \"x\": 1500,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"rotated\": false,\r\n            \"trimmed\": false,\r\n            \"spriteSourceSize\": {\r\n                \"x\": 0,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"sourceSize\": {\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            }\r\n        },\r\n        \"fig\": {\r\n            \"frame\": {\r\n                \"x\": 0,\r\n                \"y\": 300,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"rotated\": false,\r\n            \"trimmed\": false,\r\n            \"spriteSourceSize\": {\r\n                \"x\": 0,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"sourceSize\": {\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            }\r\n        },\r\n        \"grapes\": {\r\n            \"frame\": {\r\n                \"x\": 300,\r\n                \"y\": 300,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"rotated\": false,\r\n            \"trimmed\": false,\r\n            \"spriteSourceSize\": {\r\n                \"x\": 0,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"sourceSize\": {\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            }\r\n        },\r\n        \"kiwi\": {\r\n            \"frame\": {\r\n                \"x\": 600,\r\n                \"y\": 300,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"rotated\": false,\r\n            \"trimmed\": false,\r\n            \"spriteSourceSize\": {\r\n                \"x\": 0,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"sourceSize\": {\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            }\r\n        },\r\n        \"lemon\": {\r\n            \"frame\": {\r\n                \"x\": 900,\r\n                \"y\": 300,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"rotated\": false,\r\n            \"trimmed\": false,\r\n            \"spriteSourceSize\": {\r\n                \"x\": 0,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"sourceSize\": {\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            }\r\n        },\r\n        \"mango\": {\r\n            \"frame\": {\r\n                \"x\": 1200,\r\n                \"y\": 300,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"rotated\": false,\r\n            \"trimmed\": false,\r\n            \"spriteSourceSize\": {\r\n                \"x\": 0,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"sourceSize\": {\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            }\r\n        },\r\n        \"orange\": {\r\n            \"frame\": {\r\n                \"x\": 1500,\r\n                \"y\": 300,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"rotated\": false,\r\n            \"trimmed\": false,\r\n            \"spriteSourceSize\": {\r\n                \"x\": 0,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"sourceSize\": {\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            }\r\n        },\r\n        \"peach\": {\r\n            \"frame\": {\r\n                \"x\": 0,\r\n                \"y\": 600,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"rotated\": false,\r\n            \"trimmed\": false,\r\n            \"spriteSourceSize\": {\r\n                \"x\": 0,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"sourceSize\": {\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            }\r\n        },\r\n        \"pear\": {\r\n            \"frame\": {\r\n                \"x\": 300,\r\n                \"y\": 600,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"rotated\": false,\r\n            \"trimmed\": false,\r\n            \"spriteSourceSize\": {\r\n                \"x\": 0,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"sourceSize\": {\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            }\r\n        },\r\n        \"pineapple\": {\r\n            \"frame\": {\r\n                \"x\": 600,\r\n                \"y\": 600,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"rotated\": false,\r\n            \"trimmed\": false,\r\n            \"spriteSourceSize\": {\r\n                \"x\": 0,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"sourceSize\": {\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            }\r\n        },\r\n        \"plum\": {\r\n            \"frame\": {\r\n                \"x\": 900,\r\n                \"y\": 600,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"rotated\": false,\r\n            \"trimmed\": false,\r\n            \"spriteSourceSize\": {\r\n                \"x\": 0,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"sourceSize\": {\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            }\r\n        },\r\n        \"strawberry\": {\r\n            \"frame\": {\r\n                \"x\": 1200,\r\n                \"y\": 600,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"rotated\": false,\r\n            \"trimmed\": false,\r\n            \"spriteSourceSize\": {\r\n                \"x\": 0,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"sourceSize\": {\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            }\r\n        },\r\n        \"watermelon\": {\r\n            \"frame\": {\r\n                \"x\": 1500,\r\n                \"y\": 600,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"rotated\": false,\r\n            \"trimmed\": false,\r\n            \"spriteSourceSize\": {\r\n                \"x\": 0,\r\n                \"y\": 0,\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            },\r\n            \"sourceSize\": {\r\n                \"w\": 300,\r\n                \"h\": 300\r\n            }\r\n        }\r\n    },\r\n    \"meta\": {\r\n        \"app\": \"https://www.codeandweb.com/texturepacker\",\r\n        \"version\": \"1.0\",\r\n        \"image\": \"fruit.png\",\r\n        \"format\": \"RGBA8888\",\r\n        \"size\": {\r\n            \"w\": 1800,\r\n            \"h\": 900\r\n        },\r\n        \"scale\": \"1\",\r\n        \"smartupdate\": \"$TexturePacker:SmartUpdate:c2ae69e28ac167673b2827a38aee3d8a:12a050e10b97a3fd5179cb595618f12a:a2a2182a87aec7c2742d42359809aa8c$\"\r\n    }\r\n}","import * as PIXI from 'pixi.js';\r\nimport * as planck from 'planck-js';\r\nimport Resources from '../../Resources';\r\nimport Point from '../../Point';\r\n\r\nimport fruitSprites from './fruit/Spritesheet'\r\nimport fruitPhysics from './fruit/Physics'\r\n\r\nconst debugPhysics = false;\r\n\r\nlet loaded = 0;\r\nlet sheets = [];\r\nconst spritesheets = {\r\n    fruit: {\r\n        sprites: fruitSprites,\r\n        physics: fruitPhysics,\r\n        texture: () => Resources.getResource(Resources.loaded.fruit)\r\n    }\r\n}\r\n\r\nexport default class Sprites {\r\n    static init(callback) {\r\n        for (const key in spritesheets) {\r\n            const spritesheet = spritesheets[key];\r\n            spritesheet.spritesheet = new PIXI.Spritesheet(spritesheet.texture().texture.baseTexture, spritesheet.sprites);\r\n            sheets.push(spritesheet.spritesheet);\r\n        }\r\n        this.loadNext(callback);\r\n    }\r\n\r\n    static loadNext(callback) {\r\n        sheets[loaded].parse(() => {\r\n            loaded++;\r\n            if (loaded === sheets.length) {\r\n                callback();\r\n                return;\r\n            }\r\n            this.loadNext(callback);\r\n        });\r\n    }\r\n\r\n    static getSpritesheets() {\r\n        return spritesheets;\r\n    }\r\n\r\n    static create(sheet, name, body, x, y, scale = 1) {\r\n        const result = this.createSprite(sheet, name, x, y, scale);\r\n        const physics = spritesheets[sheet].physics;\r\n        const fixtures = [];\r\n        const debug = [];\r\n        for (const element of physics.rigidBodies) {\r\n            if (element.name === name) {\r\n                for (const polygon of element.polygons) {\r\n                    const points = polygon.map(p => new Point(p.x, 1.0 - p.y).multiply(result.sprite.width, result.sprite.height).add(x, y));\r\n                    if (debugPhysics) {\r\n                        debug.push(points);\r\n                    }\r\n                    fixtures.push(body.createFixture({\r\n                        shape: planck.Polygon(points.map(point => point.scaleToPhysics().toVec2())),\r\n                        friction: 0.9,\r\n                        restitution: 0.8\r\n                    }));\r\n                }\r\n            }\r\n        }\r\n        result.fixtures = fixtures;\r\n        result.debug = debug;\r\n        return result;\r\n    }\r\n\r\n    static createSprite(sheet, name, x = 0, y = 0, scale = 1) {\r\n        const sprite = new PIXI.Sprite(spritesheets[sheet].spritesheet.textures[name]);\r\n        sprite.scale.x = scale;\r\n        sprite.scale.y = scale;\r\n        sprite.x = x;\r\n        sprite.y = y;\r\n        return {\r\n            sprite: sprite\r\n        }\r\n    }\r\n}","export default {\r\n    \"rigidBodies\": [{\r\n        \"name\": \"apple\",\r\n        \"imagePath\": \"../Low Poly Fruit/Low Poly Fruit/Apple.png\",\r\n        \"origin\": {\r\n            \"x\": 0,\r\n            \"y\": 0\r\n        },\r\n        \"polygons\": [\r\n            [{\r\n                \"x\": 0.3233333230018616,\r\n                \"y\": 0.6833333373069763\r\n            }, {\r\n                \"x\": 0.24666666984558105,\r\n                \"y\": 0.65666663646698\r\n            }, {\r\n                \"x\": 0.1966666728258133,\r\n                \"y\": 0.6133333444595337\r\n            }, {\r\n                \"x\": 0.15666666626930237,\r\n                \"y\": 0.5366666316986084\r\n            }, {\r\n                \"x\": 0.14666666090488434,\r\n                \"y\": 0.4633333086967468\r\n            }, {\r\n                \"x\": 0.15333333611488342,\r\n                \"y\": 0.39666664600372314\r\n            }, {\r\n                \"x\": 0.18333333730697632,\r\n                \"y\": 0.30666667222976685\r\n            }],\r\n            [{\r\n                \"x\": 0.18333333730697632,\r\n                \"y\": 0.30666667222976685\r\n            }, {\r\n                \"x\": 0.23333333432674408,\r\n                \"y\": 0.23666667938232422\r\n            }, {\r\n                \"x\": 0.3199999928474426,\r\n                \"y\": 0.1499999761581421\r\n            }, {\r\n                \"x\": 0.3933333456516266,\r\n                \"y\": 0.1066666841506958\r\n            }, {\r\n                \"x\": 0.476666659116745,\r\n                \"y\": 0.0899999737739563\r\n            }, {\r\n                \"x\": 0.5666666626930237,\r\n                \"y\": 0.1066666841506958\r\n            }, {\r\n                \"x\": 0.3233333230018616,\r\n                \"y\": 0.6833333373069763\r\n            }],\r\n            [{\r\n                \"x\": 0.5666666626930237,\r\n                \"y\": 0.1066666841506958\r\n            }, {\r\n                \"x\": 0.6600000262260437,\r\n                \"y\": 0.13999998569488525\r\n            }, {\r\n                \"x\": 0.699999988079071,\r\n                \"y\": 0.1666666865348816\r\n            }, {\r\n                \"x\": 0.7433333396911621,\r\n                \"y\": 0.23000001907348633\r\n            }, {\r\n                \"x\": 0.7766666412353516,\r\n                \"y\": 0.3199999928474426\r\n            }, {\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.40666669607162476\r\n            }, {\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.5299999713897705\r\n            }],\r\n            [{\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.5299999713897705\r\n            }, {\r\n                \"x\": 0.7766666412353516,\r\n                \"y\": 0.5833333730697632\r\n            }, {\r\n                \"x\": 0.7366666793823242,\r\n                \"y\": 0.65666663646698\r\n            }, {\r\n                \"x\": 0.6866666674613953,\r\n                \"y\": 0.7100000381469727\r\n            }, {\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.7366666793823242\r\n            }, {\r\n                \"x\": 0.5899999737739563,\r\n                \"y\": 0.7433333396911621\r\n            }, {\r\n                \"x\": 0.3233333230018616,\r\n                \"y\": 0.6833333373069763\r\n            }, {\r\n                \"x\": 0.5666666626930237,\r\n                \"y\": 0.1066666841506958\r\n            }],\r\n            [{\r\n                \"x\": 0.5899999737739563,\r\n                \"y\": 0.7433333396911621\r\n            }, {\r\n                \"x\": 0.3633333444595337,\r\n                \"y\": 0.7233333587646484\r\n            }, {\r\n                \"x\": 0.3333333432674408,\r\n                \"y\": 0.7066667079925537\r\n            }, {\r\n                \"x\": 0.3233333230018616,\r\n                \"y\": 0.6833333373069763\r\n            }],\r\n            [{\r\n                \"x\": 0.5899999737739563,\r\n                \"y\": 0.7433333396911621\r\n            }, {\r\n                \"x\": 0.38999998569488525,\r\n                \"y\": 0.7566666603088379\r\n            }, {\r\n                \"x\": 0.3633333444595337,\r\n                \"y\": 0.7233333587646484\r\n            }],\r\n            [{\r\n                \"x\": 0.5933333039283752,\r\n                \"y\": 0.753333330154419\r\n            }, {\r\n                \"x\": 0.6733333468437195,\r\n                \"y\": 0.7599999904632568\r\n            }, {\r\n                \"x\": 0.7333333492279053,\r\n                \"y\": 0.7900000214576721\r\n            }, {\r\n                \"x\": 0.7699999809265137,\r\n                \"y\": 0.8266666531562805\r\n            }, {\r\n                \"x\": 0.7766666412353516,\r\n                \"y\": 0.8533333539962769\r\n            }, {\r\n                \"x\": 0.7099999785423279,\r\n                \"y\": 0.9099999666213989\r\n            }, {\r\n                \"x\": 0.6700000166893005,\r\n                \"y\": 0.9266666769981384\r\n            }, {\r\n                \"x\": 0.5866666436195374,\r\n                \"y\": 0.9333333373069763\r\n            }],\r\n            [{\r\n                \"x\": 0.5866666436195374,\r\n                \"y\": 0.9333333373069763\r\n            }, {\r\n                \"x\": 0.5233333110809326,\r\n                \"y\": 0.9233333468437195\r\n            }, {\r\n                \"x\": 0.46000000834465027,\r\n                \"y\": 0.8899999856948853\r\n            }, {\r\n                \"x\": 0.4233333468437195,\r\n                \"y\": 0.8533333539962769\r\n            }, {\r\n                \"x\": 0.38999998569488525,\r\n                \"y\": 0.7900000214576721\r\n            }, {\r\n                \"x\": 0.38999998569488525,\r\n                \"y\": 0.7566666603088379\r\n            }, {\r\n                \"x\": 0.5899999737739563,\r\n                \"y\": 0.7433333396911621\r\n            }, {\r\n                \"x\": 0.5933333039283752,\r\n                \"y\": 0.753333330154419\r\n            }]\r\n        ],\r\n        \"circles\": [],\r\n        \"shapes\": [{\r\n            \"type\": \"POLYGON\",\r\n            \"vertices\": [{\r\n                \"x\": 0.5866666436195374,\r\n                \"y\": 0.9333333373069763\r\n            }, {\r\n                \"x\": 0.6700000166893005,\r\n                \"y\": 0.9266666769981384\r\n            }, {\r\n                \"x\": 0.7099999785423279,\r\n                \"y\": 0.9099999666213989\r\n            }, {\r\n                \"x\": 0.7766666412353516,\r\n                \"y\": 0.8533333539962769\r\n            }, {\r\n                \"x\": 0.7699999809265137,\r\n                \"y\": 0.8266666531562805\r\n            }, {\r\n                \"x\": 0.7333333492279053,\r\n                \"y\": 0.7900000214576721\r\n            }, {\r\n                \"x\": 0.6733333468437195,\r\n                \"y\": 0.7599999904632568\r\n            }, {\r\n                \"x\": 0.5933333039283752,\r\n                \"y\": 0.753333330154419\r\n            }, {\r\n                \"x\": 0.5899999737739563,\r\n                \"y\": 0.7433333396911621\r\n            }, {\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.7366666793823242\r\n            }, {\r\n                \"x\": 0.6866666674613953,\r\n                \"y\": 0.7100000381469727\r\n            }, {\r\n                \"x\": 0.7366666793823242,\r\n                \"y\": 0.65666663646698\r\n            }, {\r\n                \"x\": 0.7766666412353516,\r\n                \"y\": 0.5833333730697632\r\n            }, {\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.5299999713897705\r\n            }, {\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.40666669607162476\r\n            }, {\r\n                \"x\": 0.7766666412353516,\r\n                \"y\": 0.3199999928474426\r\n            }, {\r\n                \"x\": 0.7433333396911621,\r\n                \"y\": 0.23000001907348633\r\n            }, {\r\n                \"x\": 0.699999988079071,\r\n                \"y\": 0.1666666865348816\r\n            }, {\r\n                \"x\": 0.6600000262260437,\r\n                \"y\": 0.13999998569488525\r\n            }, {\r\n                \"x\": 0.5666666626930237,\r\n                \"y\": 0.1066666841506958\r\n            }, {\r\n                \"x\": 0.476666659116745,\r\n                \"y\": 0.0899999737739563\r\n            }, {\r\n                \"x\": 0.3933333456516266,\r\n                \"y\": 0.1066666841506958\r\n            }, {\r\n                \"x\": 0.3199999928474426,\r\n                \"y\": 0.1499999761581421\r\n            }, {\r\n                \"x\": 0.23333333432674408,\r\n                \"y\": 0.23666667938232422\r\n            }, {\r\n                \"x\": 0.18333333730697632,\r\n                \"y\": 0.30666667222976685\r\n            }, {\r\n                \"x\": 0.15333333611488342,\r\n                \"y\": 0.39666664600372314\r\n            }, {\r\n                \"x\": 0.14666666090488434,\r\n                \"y\": 0.4633333086967468\r\n            }, {\r\n                \"x\": 0.15666666626930237,\r\n                \"y\": 0.5366666316986084\r\n            }, {\r\n                \"x\": 0.1966666728258133,\r\n                \"y\": 0.6133333444595337\r\n            }, {\r\n                \"x\": 0.24666666984558105,\r\n                \"y\": 0.65666663646698\r\n            }, {\r\n                \"x\": 0.3233333230018616,\r\n                \"y\": 0.6833333373069763\r\n            }, {\r\n                \"x\": 0.3333333432674408,\r\n                \"y\": 0.7066667079925537\r\n            }, {\r\n                \"x\": 0.3633333444595337,\r\n                \"y\": 0.7233333587646484\r\n            }, {\r\n                \"x\": 0.38999998569488525,\r\n                \"y\": 0.7566666603088379\r\n            }, {\r\n                \"x\": 0.38999998569488525,\r\n                \"y\": 0.7900000214576721\r\n            }, {\r\n                \"x\": 0.4233333468437195,\r\n                \"y\": 0.8533333539962769\r\n            }, {\r\n                \"x\": 0.46000000834465027,\r\n                \"y\": 0.8899999856948853\r\n            }, {\r\n                \"x\": 0.5233333110809326,\r\n                \"y\": 0.9233333468437195\r\n            }]\r\n        }]\r\n    }, {\r\n        \"name\": \"avocado\",\r\n        \"imagePath\": \"../Low Poly Fruit/Low Poly Fruit/Avocado.png\",\r\n        \"origin\": {\r\n            \"x\": 0,\r\n            \"y\": 0\r\n        },\r\n        \"polygons\": [\r\n            [{\r\n                \"x\": 0.43666666746139526,\r\n                \"y\": 0.8400000333786011\r\n            }, {\r\n                \"x\": 0.4300000071525574,\r\n                \"y\": 0.8566666841506958\r\n            }, {\r\n                \"x\": 0.3933333456516266,\r\n                \"y\": 0.8666666746139526\r\n            }, {\r\n                \"x\": 0.3700000047683716,\r\n                \"y\": 0.8566666841506958\r\n            }, {\r\n                \"x\": 0.3766666650772095,\r\n                \"y\": 0.8066666722297668\r\n            }, {\r\n                \"x\": 0.40666666626930237,\r\n                \"y\": 0.7433333396911621\r\n            }],\r\n            [{\r\n                \"x\": 0.3766666650772095,\r\n                \"y\": 0.6499999761581421\r\n            }, {\r\n                \"x\": 0.3233333230018616,\r\n                \"y\": 0.6233333349227905\r\n            }, {\r\n                \"x\": 0.23999999463558197,\r\n                \"y\": 0.5566666722297668\r\n            }, {\r\n                \"x\": 0.17666666209697723,\r\n                \"y\": 0.48000001907348633\r\n            }, {\r\n                \"x\": 0.14000000059604645,\r\n                \"y\": 0.3999999761581421\r\n            }, {\r\n                \"x\": 0.12999999523162842,\r\n                \"y\": 0.3266666531562805\r\n            }, {\r\n                \"x\": 0.1366666704416275,\r\n                \"y\": 0.25333333015441895\r\n            }, {\r\n                \"x\": 0.1733333319425583,\r\n                \"y\": 0.1966666579246521\r\n            }],\r\n            [{\r\n                \"x\": 0.1733333319425583,\r\n                \"y\": 0.1966666579246521\r\n            }, {\r\n                \"x\": 0.23666666448116302,\r\n                \"y\": 0.13999998569488525\r\n            }, {\r\n                \"x\": 0.2800000011920929,\r\n                \"y\": 0.12000000476837158\r\n            }, {\r\n                \"x\": 0.36000001430511475,\r\n                \"y\": 0.11000001430511475\r\n            }, {\r\n                \"x\": 0.43666666746139526,\r\n                \"y\": 0.11666667461395264\r\n            }],\r\n            [{\r\n                \"x\": 0.43666666746139526,\r\n                \"y\": 0.11666667461395264\r\n            }, {\r\n                \"x\": 0.4866666793823242,\r\n                \"y\": 0.1366666555404663\r\n            }, {\r\n                \"x\": 0.550000011920929,\r\n                \"y\": 0.1899999976158142\r\n            }, {\r\n                \"x\": 0.5833333134651184,\r\n                \"y\": 0.23666667938232422\r\n            }, {\r\n                \"x\": 0.3766666650772095,\r\n                \"y\": 0.6499999761581421\r\n            }, {\r\n                \"x\": 0.1733333319425583,\r\n                \"y\": 0.1966666579246521\r\n            }],\r\n            [{\r\n                \"x\": 0.5833333134651184,\r\n                \"y\": 0.23666667938232422\r\n            }, {\r\n                \"x\": 0.6766666769981384,\r\n                \"y\": 0.20999997854232788\r\n            }, {\r\n                \"x\": 0.7433333396911621,\r\n                \"y\": 0.21333330869674683\r\n            }, {\r\n                \"x\": 0.8199999928474426,\r\n                \"y\": 0.23666667938232422\r\n            }, {\r\n                \"x\": 0.8666666746139526,\r\n                \"y\": 0.2666666507720947\r\n            }, {\r\n                \"x\": 0.9066666960716248,\r\n                \"y\": 0.31333333253860474\r\n            }, {\r\n                \"x\": 0.9300000071525574,\r\n                \"y\": 0.3700000047683716\r\n            }, {\r\n                \"x\": 0.9333333373069763,\r\n                \"y\": 0.4399999976158142\r\n            }],\r\n            [{\r\n                \"x\": 0.9333333373069763,\r\n                \"y\": 0.4399999976158142\r\n            }, {\r\n                \"x\": 0.9133333563804626,\r\n                \"y\": 0.5133333206176758\r\n            }, {\r\n                \"x\": 0.8733333349227905,\r\n                \"y\": 0.5733333230018616\r\n            }, {\r\n                \"x\": 0.8066666722297668,\r\n                \"y\": 0.6399999856948853\r\n            }, {\r\n                \"x\": 0.7200000286102295,\r\n                \"y\": 0.699999988079071\r\n            }],\r\n            [{\r\n                \"x\": 0.7200000286102295,\r\n                \"y\": 0.699999988079071\r\n            }, {\r\n                \"x\": 0.40666666626930237,\r\n                \"y\": 0.7433333396911621\r\n            }, {\r\n                \"x\": 0.3766666650772095,\r\n                \"y\": 0.6833333373069763\r\n            }, {\r\n                \"x\": 0.3766666650772095,\r\n                \"y\": 0.6499999761581421\r\n            }, {\r\n                \"x\": 0.5833333134651184,\r\n                \"y\": 0.23666667938232422\r\n            }, {\r\n                \"x\": 0.9333333373069763,\r\n                \"y\": 0.4399999976158142\r\n            }],\r\n            [{\r\n                \"x\": 0.7233333587646484,\r\n                \"y\": 0.7133333683013916\r\n            }, {\r\n                \"x\": 0.7733333110809326,\r\n                \"y\": 0.7133333683013916\r\n            }, {\r\n                \"x\": 0.7866666913032532,\r\n                \"y\": 0.7300000190734863\r\n            }, {\r\n                \"x\": 0.7766666412353516,\r\n                \"y\": 0.7699999809265137\r\n            }, {\r\n                \"x\": 0.7333333492279053,\r\n                \"y\": 0.8299999833106995\r\n            }],\r\n            [{\r\n                \"x\": 0.7333333492279053,\r\n                \"y\": 0.8299999833106995\r\n            }, {\r\n                \"x\": 0.6866666674613953,\r\n                \"y\": 0.8633333444595337\r\n            }, {\r\n                \"x\": 0.6066666841506958,\r\n                \"y\": 0.8899999856948853\r\n            }, {\r\n                \"x\": 0.5533333420753479,\r\n                \"y\": 0.8933333158493042\r\n            }, {\r\n                \"x\": 0.4866666793823242,\r\n                \"y\": 0.8766666650772095\r\n            }],\r\n            [{\r\n                \"x\": 0.4866666793823242,\r\n                \"y\": 0.8766666650772095\r\n            }, {\r\n                \"x\": 0.43666666746139526,\r\n                \"y\": 0.8400000333786011\r\n            }, {\r\n                \"x\": 0.40666666626930237,\r\n                \"y\": 0.7433333396911621\r\n            }, {\r\n                \"x\": 0.7200000286102295,\r\n                \"y\": 0.699999988079071\r\n            }, {\r\n                \"x\": 0.7233333587646484,\r\n                \"y\": 0.7133333683013916\r\n            }, {\r\n                \"x\": 0.7333333492279053,\r\n                \"y\": 0.8299999833106995\r\n            }]\r\n        ],\r\n        \"circles\": [],\r\n        \"shapes\": [{\r\n            \"type\": \"POLYGON\",\r\n            \"vertices\": [{\r\n                \"x\": 0.5533333420753479,\r\n                \"y\": 0.8933333158493042\r\n            }, {\r\n                \"x\": 0.6066666841506958,\r\n                \"y\": 0.8899999856948853\r\n            }, {\r\n                \"x\": 0.6866666674613953,\r\n                \"y\": 0.8633333444595337\r\n            }, {\r\n                \"x\": 0.7333333492279053,\r\n                \"y\": 0.8299999833106995\r\n            }, {\r\n                \"x\": 0.7766666412353516,\r\n                \"y\": 0.7699999809265137\r\n            }, {\r\n                \"x\": 0.7866666913032532,\r\n                \"y\": 0.7300000190734863\r\n            }, {\r\n                \"x\": 0.7733333110809326,\r\n                \"y\": 0.7133333683013916\r\n            }, {\r\n                \"x\": 0.7233333587646484,\r\n                \"y\": 0.7133333683013916\r\n            }, {\r\n                \"x\": 0.7200000286102295,\r\n                \"y\": 0.699999988079071\r\n            }, {\r\n                \"x\": 0.8066666722297668,\r\n                \"y\": 0.6399999856948853\r\n            }, {\r\n                \"x\": 0.8733333349227905,\r\n                \"y\": 0.5733333230018616\r\n            }, {\r\n                \"x\": 0.9133333563804626,\r\n                \"y\": 0.5133333206176758\r\n            }, {\r\n                \"x\": 0.9333333373069763,\r\n                \"y\": 0.4399999976158142\r\n            }, {\r\n                \"x\": 0.9300000071525574,\r\n                \"y\": 0.3700000047683716\r\n            }, {\r\n                \"x\": 0.9066666960716248,\r\n                \"y\": 0.31333333253860474\r\n            }, {\r\n                \"x\": 0.8666666746139526,\r\n                \"y\": 0.2666666507720947\r\n            }, {\r\n                \"x\": 0.8199999928474426,\r\n                \"y\": 0.23666667938232422\r\n            }, {\r\n                \"x\": 0.7433333396911621,\r\n                \"y\": 0.21333330869674683\r\n            }, {\r\n                \"x\": 0.6766666769981384,\r\n                \"y\": 0.20999997854232788\r\n            }, {\r\n                \"x\": 0.5833333134651184,\r\n                \"y\": 0.23666667938232422\r\n            }, {\r\n                \"x\": 0.550000011920929,\r\n                \"y\": 0.1899999976158142\r\n            }, {\r\n                \"x\": 0.4866666793823242,\r\n                \"y\": 0.1366666555404663\r\n            }, {\r\n                \"x\": 0.43666666746139526,\r\n                \"y\": 0.11666667461395264\r\n            }, {\r\n                \"x\": 0.36000001430511475,\r\n                \"y\": 0.11000001430511475\r\n            }, {\r\n                \"x\": 0.2800000011920929,\r\n                \"y\": 0.12000000476837158\r\n            }, {\r\n                \"x\": 0.23666666448116302,\r\n                \"y\": 0.13999998569488525\r\n            }, {\r\n                \"x\": 0.1733333319425583,\r\n                \"y\": 0.1966666579246521\r\n            }, {\r\n                \"x\": 0.1366666704416275,\r\n                \"y\": 0.25333333015441895\r\n            }, {\r\n                \"x\": 0.12999999523162842,\r\n                \"y\": 0.3266666531562805\r\n            }, {\r\n                \"x\": 0.14000000059604645,\r\n                \"y\": 0.3999999761581421\r\n            }, {\r\n                \"x\": 0.17666666209697723,\r\n                \"y\": 0.48000001907348633\r\n            }, {\r\n                \"x\": 0.23999999463558197,\r\n                \"y\": 0.5566666722297668\r\n            }, {\r\n                \"x\": 0.3233333230018616,\r\n                \"y\": 0.6233333349227905\r\n            }, {\r\n                \"x\": 0.3766666650772095,\r\n                \"y\": 0.6499999761581421\r\n            }, {\r\n                \"x\": 0.3766666650772095,\r\n                \"y\": 0.6833333373069763\r\n            }, {\r\n                \"x\": 0.40666666626930237,\r\n                \"y\": 0.7433333396911621\r\n            }, {\r\n                \"x\": 0.3766666650772095,\r\n                \"y\": 0.8066666722297668\r\n            }, {\r\n                \"x\": 0.3700000047683716,\r\n                \"y\": 0.8566666841506958\r\n            }, {\r\n                \"x\": 0.3933333456516266,\r\n                \"y\": 0.8666666746139526\r\n            }, {\r\n                \"x\": 0.4300000071525574,\r\n                \"y\": 0.8566666841506958\r\n            }, {\r\n                \"x\": 0.43666666746139526,\r\n                \"y\": 0.8400000333786011\r\n            }, {\r\n                \"x\": 0.4866666793823242,\r\n                \"y\": 0.8766666650772095\r\n            }]\r\n        }]\r\n    }, {\r\n        \"name\": \"banana\",\r\n        \"imagePath\": \"../Low Poly Fruit/Low Poly Fruit/Banana.png\",\r\n        \"origin\": {\r\n            \"x\": 0,\r\n            \"y\": 0\r\n        },\r\n        \"polygons\": [\r\n            [{\r\n                \"x\": 0.8533333539962769,\r\n                \"y\": 0.22666668891906738\r\n            }, {\r\n                \"x\": 0.8799999952316284,\r\n                \"y\": 0.24000000953674316\r\n            }, {\r\n                \"x\": 0.903333306312561,\r\n                \"y\": 0.2799999713897705\r\n            }, {\r\n                \"x\": 0.8899999856948853,\r\n                \"y\": 0.3166666626930237\r\n            }],\r\n            [{\r\n                \"x\": 0.8899999856948853,\r\n                \"y\": 0.3166666626930237\r\n            }, {\r\n                \"x\": 0.8366666436195374,\r\n                \"y\": 0.3766666650772095\r\n            }, {\r\n                \"x\": 0.6966666579246521,\r\n                \"y\": 0.49000000953674316\r\n            }, {\r\n                \"x\": 0.6933333277702332,\r\n                \"y\": 0.18333333730697632\r\n            }, {\r\n                \"x\": 0.7933333516120911,\r\n                \"y\": 0.17666667699813843\r\n            }, {\r\n                \"x\": 0.8266666531562805,\r\n                \"y\": 0.19333332777023315\r\n            }, {\r\n                \"x\": 0.8533333539962769,\r\n                \"y\": 0.22666668891906738\r\n            }],\r\n            [{\r\n                \"x\": 0.6966666579246521,\r\n                \"y\": 0.49000000953674316\r\n            }, {\r\n                \"x\": 0.3933333456516266,\r\n                \"y\": 0.23333334922790527\r\n            }, {\r\n                \"x\": 0.476666659116745,\r\n                \"y\": 0.1600000262260437\r\n            }, {\r\n                \"x\": 0.54666668176651,\r\n                \"y\": 0.12333333492279053\r\n            }, {\r\n                \"x\": 0.596666693687439,\r\n                \"y\": 0.11333334445953369\r\n            }, {\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.12333333492279053\r\n            }, {\r\n                \"x\": 0.6766666769981384,\r\n                \"y\": 0.15333330631256104\r\n            }, {\r\n                \"x\": 0.6933333277702332,\r\n                \"y\": 0.18333333730697632\r\n            }],\r\n            [{\r\n                \"x\": 0.5366666913032532,\r\n                \"y\": 0.7266666889190674\r\n            }, {\r\n                \"x\": 0.5266666412353516,\r\n                \"y\": 0.7733333110809326\r\n            }, {\r\n                \"x\": 0.3566666543483734,\r\n                \"y\": 0.846666693687439\r\n            }],\r\n            [{\r\n                \"x\": 0.3566666543483734,\r\n                \"y\": 0.846666693687439\r\n            }, {\r\n                \"x\": 0.596666693687439,\r\n                \"y\": 0.6000000238418579\r\n            }, {\r\n                \"x\": 0.5366666913032532,\r\n                \"y\": 0.7266666889190674\r\n            }],\r\n            [{\r\n                \"x\": 0.3566666543483734,\r\n                \"y\": 0.846666693687439\r\n            }, {\r\n                \"x\": 0.2633333206176758,\r\n                \"y\": 0.84333336353302\r\n            }, {\r\n                \"x\": 0.2133333384990692,\r\n                \"y\": 0.8199999928474426\r\n            }, {\r\n                \"x\": 0.1666666716337204,\r\n                \"y\": 0.7766666412353516\r\n            }, {\r\n                \"x\": 0.12666666507720947,\r\n                \"y\": 0.7133333683013916\r\n            }],\r\n            [{\r\n                \"x\": 0.12666666507720947,\r\n                \"y\": 0.7133333683013916\r\n            }, {\r\n                \"x\": 0.10000000149011612,\r\n                \"y\": 0.6399999856948853\r\n            }, {\r\n                \"x\": 0.09000000357627869,\r\n                \"y\": 0.550000011920929\r\n            }, {\r\n                \"x\": 0.09666666388511658,\r\n                \"y\": 0.46666663885116577\r\n            }, {\r\n                \"x\": 0.12333333492279053,\r\n                \"y\": 0.39666664600372314\r\n            }, {\r\n                \"x\": 0.3566666543483734,\r\n                \"y\": 0.846666693687439\r\n            }],\r\n            [{\r\n                \"x\": 0.12333333492279053,\r\n                \"y\": 0.39666664600372314\r\n            }, {\r\n                \"x\": 0.1666666716337204,\r\n                \"y\": 0.3266666531562805\r\n            }, {\r\n                \"x\": 0.21666666865348816,\r\n                \"y\": 0.2799999713897705\r\n            }, {\r\n                \"x\": 0.28333333134651184,\r\n                \"y\": 0.24000000953674316\r\n            }, {\r\n                \"x\": 0.3700000047683716,\r\n                \"y\": 0.22666668891906738\r\n            }],\r\n            [{\r\n                \"x\": 0.3700000047683716,\r\n                \"y\": 0.22666668891906738\r\n            }, {\r\n                \"x\": 0.3933333456516266,\r\n                \"y\": 0.23333334922790527\r\n            }, {\r\n                \"x\": 0.6966666579246521,\r\n                \"y\": 0.49000000953674316\r\n            }, {\r\n                \"x\": 0.596666693687439,\r\n                \"y\": 0.6000000238418579\r\n            }, {\r\n                \"x\": 0.3566666543483734,\r\n                \"y\": 0.846666693687439\r\n            }, {\r\n                \"x\": 0.12333333492279053,\r\n                \"y\": 0.39666664600372314\r\n            }],\r\n            [{\r\n                \"x\": 0.5266666412353516,\r\n                \"y\": 0.7733333110809326\r\n            }, {\r\n                \"x\": 0.5333333611488342,\r\n                \"y\": 0.8166666626930237\r\n            }, {\r\n                \"x\": 0.5133333206176758,\r\n                \"y\": 0.8533333539962769\r\n            }, {\r\n                \"x\": 0.4699999988079071,\r\n                \"y\": 0.8866666555404663\r\n            }, {\r\n                \"x\": 0.4466666579246521,\r\n                \"y\": 0.8866666555404663\r\n            }, {\r\n                \"x\": 0.4000000059604645,\r\n                \"y\": 0.8766666650772095\r\n            }, {\r\n                \"x\": 0.3566666543483734,\r\n                \"y\": 0.846666693687439\r\n            }]\r\n        ],\r\n        \"circles\": [],\r\n        \"shapes\": [{\r\n            \"type\": \"POLYGON\",\r\n            \"vertices\": [{\r\n                \"x\": 0.4466666579246521,\r\n                \"y\": 0.8866666555404663\r\n            }, {\r\n                \"x\": 0.4699999988079071,\r\n                \"y\": 0.8866666555404663\r\n            }, {\r\n                \"x\": 0.5133333206176758,\r\n                \"y\": 0.8533333539962769\r\n            }, {\r\n                \"x\": 0.5333333611488342,\r\n                \"y\": 0.8166666626930237\r\n            }, {\r\n                \"x\": 0.5266666412353516,\r\n                \"y\": 0.7733333110809326\r\n            }, {\r\n                \"x\": 0.5366666913032532,\r\n                \"y\": 0.7266666889190674\r\n            }, {\r\n                \"x\": 0.596666693687439,\r\n                \"y\": 0.6000000238418579\r\n            }, {\r\n                \"x\": 0.6966666579246521,\r\n                \"y\": 0.49000000953674316\r\n            }, {\r\n                \"x\": 0.8366666436195374,\r\n                \"y\": 0.3766666650772095\r\n            }, {\r\n                \"x\": 0.8899999856948853,\r\n                \"y\": 0.3166666626930237\r\n            }, {\r\n                \"x\": 0.903333306312561,\r\n                \"y\": 0.2799999713897705\r\n            }, {\r\n                \"x\": 0.8799999952316284,\r\n                \"y\": 0.24000000953674316\r\n            }, {\r\n                \"x\": 0.8533333539962769,\r\n                \"y\": 0.22666668891906738\r\n            }, {\r\n                \"x\": 0.8266666531562805,\r\n                \"y\": 0.19333332777023315\r\n            }, {\r\n                \"x\": 0.7933333516120911,\r\n                \"y\": 0.17666667699813843\r\n            }, {\r\n                \"x\": 0.6933333277702332,\r\n                \"y\": 0.18333333730697632\r\n            }, {\r\n                \"x\": 0.6766666769981384,\r\n                \"y\": 0.15333330631256104\r\n            }, {\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.12333333492279053\r\n            }, {\r\n                \"x\": 0.596666693687439,\r\n                \"y\": 0.11333334445953369\r\n            }, {\r\n                \"x\": 0.54666668176651,\r\n                \"y\": 0.12333333492279053\r\n            }, {\r\n                \"x\": 0.476666659116745,\r\n                \"y\": 0.1600000262260437\r\n            }, {\r\n                \"x\": 0.3933333456516266,\r\n                \"y\": 0.23333334922790527\r\n            }, {\r\n                \"x\": 0.3700000047683716,\r\n                \"y\": 0.22666668891906738\r\n            }, {\r\n                \"x\": 0.28333333134651184,\r\n                \"y\": 0.24000000953674316\r\n            }, {\r\n                \"x\": 0.21666666865348816,\r\n                \"y\": 0.2799999713897705\r\n            }, {\r\n                \"x\": 0.1666666716337204,\r\n                \"y\": 0.3266666531562805\r\n            }, {\r\n                \"x\": 0.12333333492279053,\r\n                \"y\": 0.39666664600372314\r\n            }, {\r\n                \"x\": 0.09666666388511658,\r\n                \"y\": 0.46666663885116577\r\n            }, {\r\n                \"x\": 0.09000000357627869,\r\n                \"y\": 0.550000011920929\r\n            }, {\r\n                \"x\": 0.10000000149011612,\r\n                \"y\": 0.6399999856948853\r\n            }, {\r\n                \"x\": 0.12666666507720947,\r\n                \"y\": 0.7133333683013916\r\n            }, {\r\n                \"x\": 0.1666666716337204,\r\n                \"y\": 0.7766666412353516\r\n            }, {\r\n                \"x\": 0.2133333384990692,\r\n                \"y\": 0.8199999928474426\r\n            }, {\r\n                \"x\": 0.2633333206176758,\r\n                \"y\": 0.84333336353302\r\n            }, {\r\n                \"x\": 0.3566666543483734,\r\n                \"y\": 0.846666693687439\r\n            }, {\r\n                \"x\": 0.4000000059604645,\r\n                \"y\": 0.8766666650772095\r\n            }]\r\n        }]\r\n    }, {\r\n        \"name\": \"blackberry\",\r\n        \"imagePath\": \"../Low Poly Fruit/Low Poly Fruit/Blackberry.png\",\r\n        \"origin\": {\r\n            \"x\": 0,\r\n            \"y\": 0\r\n        },\r\n        \"polygons\": [\r\n            [{\r\n                \"x\": 0.41333332657814026,\r\n                \"y\": 0.8366667032241821\r\n            }, {\r\n                \"x\": 0.3799999952316284,\r\n                \"y\": 0.8533333539962769\r\n            }, {\r\n                \"x\": 0.3566666543483734,\r\n                \"y\": 0.8400000333786011\r\n            }, {\r\n                \"x\": 0.3499999940395355,\r\n                \"y\": 0.8133333325386047\r\n            }],\r\n            [{\r\n                \"x\": 0.28999999165534973,\r\n                \"y\": 0.7799999713897705\r\n            }, {\r\n                \"x\": 0.22333332896232605,\r\n                \"y\": 0.8199999928474426\r\n            }, {\r\n                \"x\": 0.1366666704416275,\r\n                \"y\": 0.846666693687439\r\n            }, {\r\n                \"x\": 0.1066666692495346,\r\n                \"y\": 0.8400000333786011\r\n            }, {\r\n                \"x\": 0.09666666388511658,\r\n                \"y\": 0.8166666626930237\r\n            }, {\r\n                \"x\": 0.12333333492279053,\r\n                \"y\": 0.6833333373069763\r\n            }],\r\n            [{\r\n                \"x\": 0.12333333492279053,\r\n                \"y\": 0.6833333373069763\r\n            }, {\r\n                \"x\": 0.1133333370089531,\r\n                \"y\": 0.653333306312561\r\n            }, {\r\n                \"x\": 0.14666666090488434,\r\n                \"y\": 0.5766666531562805\r\n            }, {\r\n                \"x\": 0.31333333253860474,\r\n                \"y\": 0.7799999713897705\r\n            }, {\r\n                \"x\": 0.28999999165534973,\r\n                \"y\": 0.7799999713897705\r\n            }],\r\n            [{\r\n                \"x\": 0.12999999523162842,\r\n                \"y\": 0.5433332920074463\r\n            }, {\r\n                \"x\": 0.08666666597127914,\r\n                \"y\": 0.5099999904632568\r\n            }, {\r\n                \"x\": 0.0833333358168602,\r\n                \"y\": 0.49000000953674316\r\n            }, {\r\n                \"x\": 0.1066666692495346,\r\n                \"y\": 0.4599999785423279\r\n            }, {\r\n                \"x\": 0.15333333611488342,\r\n                \"y\": 0.4399999976158142\r\n            }],\r\n            [{\r\n                \"x\": 0.15333333611488342,\r\n                \"y\": 0.4399999976158142\r\n            }, {\r\n                \"x\": 0.15333333611488342,\r\n                \"y\": 0.4166666865348816\r\n            }, {\r\n                \"x\": 0.17666666209697723,\r\n                \"y\": 0.40333330631256104\r\n            }],\r\n            [{\r\n                \"x\": 0.28333333134651184,\r\n                \"y\": 0.21333330869674683\r\n            }, {\r\n                \"x\": 0.3199999928474426,\r\n                \"y\": 0.18333333730697632\r\n            }, {\r\n                \"x\": 0.3633333444595337,\r\n                \"y\": 0.17666667699813843\r\n            }, {\r\n                \"x\": 0.4000000059604645,\r\n                \"y\": 0.18666666746139526\r\n            }],\r\n            [{\r\n                \"x\": 0.4000000059604645,\r\n                \"y\": 0.18666666746139526\r\n            }, {\r\n                \"x\": 0.20333333313465118,\r\n                \"y\": 0.3033333420753479\r\n            }, {\r\n                \"x\": 0.20999999344348907,\r\n                \"y\": 0.2566666603088379\r\n            }, {\r\n                \"x\": 0.23333333432674408,\r\n                \"y\": 0.23000001907348633\r\n            }, {\r\n                \"x\": 0.28333333134651184,\r\n                \"y\": 0.21333330869674683\r\n            }],\r\n            [{\r\n                \"x\": 0.4000000059604645,\r\n                \"y\": 0.18666666746139526\r\n            }, {\r\n                \"x\": 0.17666666209697723,\r\n                \"y\": 0.40333330631256104\r\n            }, {\r\n                \"x\": 0.17000000178813934,\r\n                \"y\": 0.3566666841506958\r\n            }, {\r\n                \"x\": 0.18333333730697632,\r\n                \"y\": 0.3166666626930237\r\n            }, {\r\n                \"x\": 0.20333333313465118,\r\n                \"y\": 0.3033333420753479\r\n            }],\r\n            [{\r\n                \"x\": 0.7200000286102295,\r\n                \"y\": 0.20666664838790894\r\n            }, {\r\n                \"x\": 0.7699999809265137,\r\n                \"y\": 0.18000000715255737\r\n            }, {\r\n                \"x\": 0.8066666722297668,\r\n                \"y\": 0.18666666746139526\r\n            }, {\r\n                \"x\": 0.8733333349227905,\r\n                \"y\": 0.22333335876464844\r\n            }],\r\n            [{\r\n                \"x\": 0.8733333349227905,\r\n                \"y\": 0.22333335876464844\r\n            }, {\r\n                \"x\": 0.9066666960716248,\r\n                \"y\": 0.25999999046325684\r\n            }, {\r\n                \"x\": 0.9200000166893005,\r\n                \"y\": 0.30666667222976685\r\n            }, {\r\n                \"x\": 0.9166666865348816,\r\n                \"y\": 0.35333335399627686\r\n            }, {\r\n                \"x\": 0.6200000047683716,\r\n                \"y\": 0.2433333396911621\r\n            }, {\r\n                \"x\": 0.6299999952316284,\r\n                \"y\": 0.22333335876464844\r\n            }, {\r\n                \"x\": 0.6633333563804626,\r\n                \"y\": 0.20666664838790894\r\n            }, {\r\n                \"x\": 0.7200000286102295,\r\n                \"y\": 0.20666664838790894\r\n            }],\r\n            [{\r\n                \"x\": 0.8399999737739563,\r\n                \"y\": 0.5833333730697632\r\n            }, {\r\n                \"x\": 0.8266666531562805,\r\n                \"y\": 0.6133333444595337\r\n            }, {\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.6333333253860474\r\n            }, {\r\n                \"x\": 0.75,\r\n                \"y\": 0.6366666555404663\r\n            }],\r\n            [{\r\n                \"x\": 0.75,\r\n                \"y\": 0.6366666555404663\r\n            }, {\r\n                \"x\": 0.8966666460037231,\r\n                \"y\": 0.5066666603088379\r\n            }, {\r\n                \"x\": 0.8733333349227905,\r\n                \"y\": 0.5600000023841858\r\n            }, {\r\n                \"x\": 0.8399999737739563,\r\n                \"y\": 0.5833333730697632\r\n            }],\r\n            [{\r\n                \"x\": 0.75,\r\n                \"y\": 0.6366666555404663\r\n            }, {\r\n                \"x\": 0.7433333396911621,\r\n                \"y\": 0.6966666579246521\r\n            }, {\r\n                \"x\": 0.7133333086967468,\r\n                \"y\": 0.7300000190734863\r\n            }, {\r\n                \"x\": 0.44999998807907104,\r\n                \"y\": 0.8366667032241821\r\n            }],\r\n            [{\r\n                \"x\": 0.44999998807907104,\r\n                \"y\": 0.8366667032241821\r\n            }, {\r\n                \"x\": 0.5600000023841858,\r\n                \"y\": 0.3166666626930237\r\n            }, {\r\n                \"x\": 0.5733333230018616,\r\n                \"y\": 0.27666664123535156\r\n            }, {\r\n                \"x\": 0.6000000238418579,\r\n                \"y\": 0.24666666984558105\r\n            }, {\r\n                \"x\": 0.6200000047683716,\r\n                \"y\": 0.2433333396911621\r\n            }, {\r\n                \"x\": 0.9166666865348816,\r\n                \"y\": 0.35333335399627686\r\n            }],\r\n            [{\r\n                \"x\": 0.9166666865348816,\r\n                \"y\": 0.35333335399627686\r\n            }, {\r\n                \"x\": 0.9300000071525574,\r\n                \"y\": 0.3733333349227905\r\n            }, {\r\n                \"x\": 0.9366666674613953,\r\n                \"y\": 0.4300000071525574\r\n            }, {\r\n                \"x\": 0.9266666769981384,\r\n                \"y\": 0.47333335876464844\r\n            }, {\r\n                \"x\": 0.8966666460037231,\r\n                \"y\": 0.5066666603088379\r\n            }, {\r\n                \"x\": 0.75,\r\n                \"y\": 0.6366666555404663\r\n            }, {\r\n                \"x\": 0.44999998807907104,\r\n                \"y\": 0.8366667032241821\r\n            }],\r\n            [{\r\n                \"x\": 0.44999998807907104,\r\n                \"y\": 0.8366667032241821\r\n            }, {\r\n                \"x\": 0.41333332657814026,\r\n                \"y\": 0.8366667032241821\r\n            }, {\r\n                \"x\": 0.3499999940395355,\r\n                \"y\": 0.8133333325386047\r\n            }, {\r\n                \"x\": 0.31333333253860474,\r\n                \"y\": 0.7799999713897705\r\n            }, {\r\n                \"x\": 0.14666666090488434,\r\n                \"y\": 0.5766666531562805\r\n            }, {\r\n                \"x\": 0.12999999523162842,\r\n                \"y\": 0.5433332920074463\r\n            }],\r\n            [{\r\n                \"x\": 0.12999999523162842,\r\n                \"y\": 0.5433332920074463\r\n            }, {\r\n                \"x\": 0.15333333611488342,\r\n                \"y\": 0.4399999976158142\r\n            }, {\r\n                \"x\": 0.17666666209697723,\r\n                \"y\": 0.40333330631256104\r\n            }, {\r\n                \"x\": 0.5066666603088379,\r\n                \"y\": 0.23666667938232422\r\n            }, {\r\n                \"x\": 0.5533333420753479,\r\n                \"y\": 0.2633333206176758\r\n            }, {\r\n                \"x\": 0.5600000023841858,\r\n                \"y\": 0.3166666626930237\r\n            }, {\r\n                \"x\": 0.44999998807907104,\r\n                \"y\": 0.8366667032241821\r\n            }],\r\n            [{\r\n                \"x\": 0.17666666209697723,\r\n                \"y\": 0.40333330631256104\r\n            }, {\r\n                \"x\": 0.4000000059604645,\r\n                \"y\": 0.18666666746139526\r\n            }, {\r\n                \"x\": 0.44999998807907104,\r\n                \"y\": 0.18000000715255737\r\n            }, {\r\n                \"x\": 0.4933333396911621,\r\n                \"y\": 0.20999997854232788\r\n            }, {\r\n                \"x\": 0.5066666603088379,\r\n                \"y\": 0.23666667938232422\r\n            }],\r\n            [{\r\n                \"x\": 0.5866666436195374,\r\n                \"y\": 0.8500000238418579\r\n            }, {\r\n                \"x\": 0.54666668176651,\r\n                \"y\": 0.8700000047683716\r\n            }, {\r\n                \"x\": 0.503333330154419,\r\n                \"y\": 0.8733333349227905\r\n            }, {\r\n                \"x\": 0.4699999988079071,\r\n                \"y\": 0.8600000143051147\r\n            }, {\r\n                \"x\": 0.44999998807907104,\r\n                \"y\": 0.8366667032241821\r\n            }],\r\n            [{\r\n                \"x\": 0.44999998807907104,\r\n                \"y\": 0.8366667032241821\r\n            }, {\r\n                \"x\": 0.7133333086967468,\r\n                \"y\": 0.7300000190734863\r\n            }, {\r\n                \"x\": 0.6866666674613953,\r\n                \"y\": 0.8100000023841858\r\n            }, {\r\n                \"x\": 0.6600000262260437,\r\n                \"y\": 0.8400000333786011\r\n            }, {\r\n                \"x\": 0.6233333349227905,\r\n                \"y\": 0.8533333539962769\r\n            }, {\r\n                \"x\": 0.5866666436195374,\r\n                \"y\": 0.8500000238418579\r\n            }]\r\n        ],\r\n        \"circles\": [],\r\n        \"shapes\": [{\r\n            \"type\": \"POLYGON\",\r\n            \"vertices\": [{\r\n                \"x\": 0.503333330154419,\r\n                \"y\": 0.8733333349227905\r\n            }, {\r\n                \"x\": 0.54666668176651,\r\n                \"y\": 0.8700000047683716\r\n            }, {\r\n                \"x\": 0.5866666436195374,\r\n                \"y\": 0.8500000238418579\r\n            }, {\r\n                \"x\": 0.6233333349227905,\r\n                \"y\": 0.8533333539962769\r\n            }, {\r\n                \"x\": 0.6600000262260437,\r\n                \"y\": 0.8400000333786011\r\n            }, {\r\n                \"x\": 0.6866666674613953,\r\n                \"y\": 0.8100000023841858\r\n            }, {\r\n                \"x\": 0.7133333086967468,\r\n                \"y\": 0.7300000190734863\r\n            }, {\r\n                \"x\": 0.7433333396911621,\r\n                \"y\": 0.6966666579246521\r\n            }, {\r\n                \"x\": 0.75,\r\n                \"y\": 0.6366666555404663\r\n            }, {\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.6333333253860474\r\n            }, {\r\n                \"x\": 0.8266666531562805,\r\n                \"y\": 0.6133333444595337\r\n            }, {\r\n                \"x\": 0.8399999737739563,\r\n                \"y\": 0.5833333730697632\r\n            }, {\r\n                \"x\": 0.8733333349227905,\r\n                \"y\": 0.5600000023841858\r\n            }, {\r\n                \"x\": 0.8966666460037231,\r\n                \"y\": 0.5066666603088379\r\n            }, {\r\n                \"x\": 0.9266666769981384,\r\n                \"y\": 0.47333335876464844\r\n            }, {\r\n                \"x\": 0.9366666674613953,\r\n                \"y\": 0.4300000071525574\r\n            }, {\r\n                \"x\": 0.9300000071525574,\r\n                \"y\": 0.3733333349227905\r\n            }, {\r\n                \"x\": 0.9166666865348816,\r\n                \"y\": 0.35333335399627686\r\n            }, {\r\n                \"x\": 0.9200000166893005,\r\n                \"y\": 0.30666667222976685\r\n            }, {\r\n                \"x\": 0.9066666960716248,\r\n                \"y\": 0.25999999046325684\r\n            }, {\r\n                \"x\": 0.8733333349227905,\r\n                \"y\": 0.22333335876464844\r\n            }, {\r\n                \"x\": 0.8066666722297668,\r\n                \"y\": 0.18666666746139526\r\n            }, {\r\n                \"x\": 0.7699999809265137,\r\n                \"y\": 0.18000000715255737\r\n            }, {\r\n                \"x\": 0.7200000286102295,\r\n                \"y\": 0.20666664838790894\r\n            }, {\r\n                \"x\": 0.6633333563804626,\r\n                \"y\": 0.20666664838790894\r\n            }, {\r\n                \"x\": 0.6299999952316284,\r\n                \"y\": 0.22333335876464844\r\n            }, {\r\n                \"x\": 0.6200000047683716,\r\n                \"y\": 0.2433333396911621\r\n            }, {\r\n                \"x\": 0.6000000238418579,\r\n                \"y\": 0.24666666984558105\r\n            }, {\r\n                \"x\": 0.5733333230018616,\r\n                \"y\": 0.27666664123535156\r\n            }, {\r\n                \"x\": 0.5600000023841858,\r\n                \"y\": 0.3166666626930237\r\n            }, {\r\n                \"x\": 0.5533333420753479,\r\n                \"y\": 0.2633333206176758\r\n            }, {\r\n                \"x\": 0.5066666603088379,\r\n                \"y\": 0.23666667938232422\r\n            }, {\r\n                \"x\": 0.4933333396911621,\r\n                \"y\": 0.20999997854232788\r\n            }, {\r\n                \"x\": 0.44999998807907104,\r\n                \"y\": 0.18000000715255737\r\n            }, {\r\n                \"x\": 0.4000000059604645,\r\n                \"y\": 0.18666666746139526\r\n            }, {\r\n                \"x\": 0.3633333444595337,\r\n                \"y\": 0.17666667699813843\r\n            }, {\r\n                \"x\": 0.3199999928474426,\r\n                \"y\": 0.18333333730697632\r\n            }, {\r\n                \"x\": 0.28333333134651184,\r\n                \"y\": 0.21333330869674683\r\n            }, {\r\n                \"x\": 0.23333333432674408,\r\n                \"y\": 0.23000001907348633\r\n            }, {\r\n                \"x\": 0.20999999344348907,\r\n                \"y\": 0.2566666603088379\r\n            }, {\r\n                \"x\": 0.20333333313465118,\r\n                \"y\": 0.3033333420753479\r\n            }, {\r\n                \"x\": 0.18333333730697632,\r\n                \"y\": 0.3166666626930237\r\n            }, {\r\n                \"x\": 0.17000000178813934,\r\n                \"y\": 0.3566666841506958\r\n            }, {\r\n                \"x\": 0.17666666209697723,\r\n                \"y\": 0.40333330631256104\r\n            }, {\r\n                \"x\": 0.15333333611488342,\r\n                \"y\": 0.4166666865348816\r\n            }, {\r\n                \"x\": 0.15333333611488342,\r\n                \"y\": 0.4399999976158142\r\n            }, {\r\n                \"x\": 0.1066666692495346,\r\n                \"y\": 0.4599999785423279\r\n            }, {\r\n                \"x\": 0.0833333358168602,\r\n                \"y\": 0.49000000953674316\r\n            }, {\r\n                \"x\": 0.08666666597127914,\r\n                \"y\": 0.5099999904632568\r\n            }, {\r\n                \"x\": 0.12999999523162842,\r\n                \"y\": 0.5433332920074463\r\n            }, {\r\n                \"x\": 0.14666666090488434,\r\n                \"y\": 0.5766666531562805\r\n            }, {\r\n                \"x\": 0.1133333370089531,\r\n                \"y\": 0.653333306312561\r\n            }, {\r\n                \"x\": 0.12333333492279053,\r\n                \"y\": 0.6833333373069763\r\n            }, {\r\n                \"x\": 0.09666666388511658,\r\n                \"y\": 0.8166666626930237\r\n            }, {\r\n                \"x\": 0.1066666692495346,\r\n                \"y\": 0.8400000333786011\r\n            }, {\r\n                \"x\": 0.1366666704416275,\r\n                \"y\": 0.846666693687439\r\n            }, {\r\n                \"x\": 0.22333332896232605,\r\n                \"y\": 0.8199999928474426\r\n            }, {\r\n                \"x\": 0.28999999165534973,\r\n                \"y\": 0.7799999713897705\r\n            }, {\r\n                \"x\": 0.31333333253860474,\r\n                \"y\": 0.7799999713897705\r\n            }, {\r\n                \"x\": 0.3499999940395355,\r\n                \"y\": 0.8133333325386047\r\n            }, {\r\n                \"x\": 0.3566666543483734,\r\n                \"y\": 0.8400000333786011\r\n            }, {\r\n                \"x\": 0.3799999952316284,\r\n                \"y\": 0.8533333539962769\r\n            }, {\r\n                \"x\": 0.41333332657814026,\r\n                \"y\": 0.8366667032241821\r\n            }, {\r\n                \"x\": 0.44999998807907104,\r\n                \"y\": 0.8366667032241821\r\n            }, {\r\n                \"x\": 0.4699999988079071,\r\n                \"y\": 0.8600000143051147\r\n            }]\r\n        }]\r\n    }, {\r\n        \"name\": \"cherry\",\r\n        \"imagePath\": \"../Low Poly Fruit/Low Poly Fruit/Cherry.png\",\r\n        \"origin\": {\r\n            \"x\": 0,\r\n            \"y\": 0\r\n        },\r\n        \"polygons\": [\r\n            [{\r\n                \"x\": 0.3633333444595337,\r\n                \"y\": 0.5633333325386047\r\n            }, {\r\n                \"x\": 0.3166666626930237,\r\n                \"y\": 0.5800000429153442\r\n            }, {\r\n                \"x\": 0.2666666805744171,\r\n                \"y\": 0.5800000429153442\r\n            }, {\r\n                \"x\": 0.2266666740179062,\r\n                \"y\": 0.5633333325386047\r\n            }, {\r\n                \"x\": 0.18333333730697632,\r\n                \"y\": 0.5233333110809326\r\n            }, {\r\n                \"x\": 0.15000000596046448,\r\n                \"y\": 0.46666663885116577\r\n            }, {\r\n                \"x\": 0.12666666507720947,\r\n                \"y\": 0.38999998569488525\r\n            }, {\r\n                \"x\": 0.12333333492279053,\r\n                \"y\": 0.31333333253860474\r\n            }],\r\n            [{\r\n                \"x\": 0.12333333492279053,\r\n                \"y\": 0.31333333253860474\r\n            }, {\r\n                \"x\": 0.14000000059604645,\r\n                \"y\": 0.2433333396911621\r\n            }, {\r\n                \"x\": 0.16333332657814026,\r\n                \"y\": 0.20666664838790894\r\n            }, {\r\n                \"x\": 0.2266666740179062,\r\n                \"y\": 0.1600000262260437\r\n            }, {\r\n                \"x\": 0.2800000011920929,\r\n                \"y\": 0.13999998569488525\r\n            }, {\r\n                \"x\": 0.36000001430511475,\r\n                \"y\": 0.1366666555404663\r\n            }, {\r\n                \"x\": 0.4333333373069763,\r\n                \"y\": 0.15333330631256104\r\n            }, {\r\n                \"x\": 0.3633333444595337,\r\n                \"y\": 0.5633333325386047\r\n            }],\r\n            [{\r\n                \"x\": 0.7833333611488342,\r\n                \"y\": 0.8033333420753479\r\n            }, {\r\n                \"x\": 0.8100000023841858,\r\n                \"y\": 0.8333333134651184\r\n            }, {\r\n                \"x\": 0.8133333325386047,\r\n                \"y\": 0.8600000143051147\r\n            }, {\r\n                \"x\": 0.79666668176651,\r\n                \"y\": 0.8766666650772095\r\n            }, {\r\n                \"x\": 0.75,\r\n                \"y\": 0.8833333253860474\r\n            }],\r\n            [{\r\n                \"x\": 0.75,\r\n                \"y\": 0.8833333253860474\r\n            }, {\r\n                \"x\": 0.6933333277702332,\r\n                \"y\": 0.8700000047683716\r\n            }, {\r\n                \"x\": 0.5233333110809326,\r\n                \"y\": 0.7433333396911621\r\n            }, {\r\n                \"x\": 0.75,\r\n                \"y\": 0.5333333015441895\r\n            }, {\r\n                \"x\": 0.800000011920929,\r\n                \"y\": 0.6200000047683716\r\n            }, {\r\n                \"x\": 0.8133333325386047,\r\n                \"y\": 0.6933333277702332\r\n            }, {\r\n                \"x\": 0.8066666722297668,\r\n                \"y\": 0.746666669845581\r\n            }, {\r\n                \"x\": 0.7833333611488342,\r\n                \"y\": 0.8033333420753479\r\n            }],\r\n            [{\r\n                \"x\": 0.5233333110809326,\r\n                \"y\": 0.7433333396911621\r\n            }, {\r\n                \"x\": 0.44999998807907104,\r\n                \"y\": 0.6766666769981384\r\n            }, {\r\n                \"x\": 0.7333333492279053,\r\n                \"y\": 0.48000001907348633\r\n            }, {\r\n                \"x\": 0.746666669845581,\r\n                \"y\": 0.5\r\n            }, {\r\n                \"x\": 0.75,\r\n                \"y\": 0.5333333015441895\r\n            }],\r\n            [{\r\n                \"x\": 0.44999998807907104,\r\n                \"y\": 0.6766666769981384\r\n            }, {\r\n                \"x\": 0.3633333444595337,\r\n                \"y\": 0.5633333325386047\r\n            }, {\r\n                \"x\": 0.4333333373069763,\r\n                \"y\": 0.15333330631256104\r\n            }, {\r\n                \"x\": 0.4866666793823242,\r\n                \"y\": 0.11000001430511475\r\n            }, {\r\n                \"x\": 0.54666668176651,\r\n                \"y\": 0.0899999737739563\r\n            }, {\r\n                \"x\": 0.6133333444595337,\r\n                \"y\": 0.0899999737739563\r\n            }, {\r\n                \"x\": 0.6733333468437195,\r\n                \"y\": 0.1066666841506958\r\n            }, {\r\n                \"x\": 0.7233333587646484,\r\n                \"y\": 0.1433333158493042\r\n            }],\r\n            [{\r\n                \"x\": 0.7233333587646484,\r\n                \"y\": 0.1433333158493042\r\n            }, {\r\n                \"x\": 0.7699999809265137,\r\n                \"y\": 0.19999998807907104\r\n            }, {\r\n                \"x\": 0.7933333516120911,\r\n                \"y\": 0.26999998092651367\r\n            }, {\r\n                \"x\": 0.800000011920929,\r\n                \"y\": 0.34666669368743896\r\n            }, {\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.40333330631256104\r\n            }, {\r\n                \"x\": 0.7633333206176758,\r\n                \"y\": 0.45333331823349\r\n            }, {\r\n                \"x\": 0.7333333492279053,\r\n                \"y\": 0.48000001907348633\r\n            }, {\r\n                \"x\": 0.44999998807907104,\r\n                \"y\": 0.6766666769981384\r\n            }],\r\n            [{\r\n                \"x\": 0.6933333277702332,\r\n                \"y\": 0.8700000047683716\r\n            }, {\r\n                \"x\": 0.6499999761581421,\r\n                \"y\": 0.8999999761581421\r\n            }, {\r\n                \"x\": 0.5433333516120911,\r\n                \"y\": 0.9399999976158142\r\n            }, {\r\n                \"x\": 0.4699999988079071,\r\n                \"y\": 0.949999988079071\r\n            }, {\r\n                \"x\": 0.4166666567325592,\r\n                \"y\": 0.9466666579246521\r\n            }, {\r\n                \"x\": 0.35333332419395447,\r\n                \"y\": 0.9266666769981384\r\n            }, {\r\n                \"x\": 0.2933333218097687,\r\n                \"y\": 0.8899999856948853\r\n            }, {\r\n                \"x\": 0.17000000178813934,\r\n                \"y\": 0.7833333015441895\r\n            }],\r\n            [{\r\n                \"x\": 0.17000000178813934,\r\n                \"y\": 0.7833333015441895\r\n            }, {\r\n                \"x\": 0.1666666716337204,\r\n                \"y\": 0.7633333206176758\r\n            }, {\r\n                \"x\": 0.1966666728258133,\r\n                \"y\": 0.7366666793823242\r\n            }, {\r\n                \"x\": 0.30000001192092896,\r\n                \"y\": 0.699999988079071\r\n            }, {\r\n                \"x\": 0.3700000047683716,\r\n                \"y\": 0.6933333277702332\r\n            }, {\r\n                \"x\": 0.4300000071525574,\r\n                \"y\": 0.7033333778381348\r\n            }, {\r\n                \"x\": 0.5233333110809326,\r\n                \"y\": 0.7433333396911621\r\n            }, {\r\n                \"x\": 0.6933333277702332,\r\n                \"y\": 0.8700000047683716\r\n            }]\r\n        ],\r\n        \"circles\": [],\r\n        \"shapes\": [{\r\n            \"type\": \"POLYGON\",\r\n            \"vertices\": [{\r\n                \"x\": 0.4699999988079071,\r\n                \"y\": 0.949999988079071\r\n            }, {\r\n                \"x\": 0.5433333516120911,\r\n                \"y\": 0.9399999976158142\r\n            }, {\r\n                \"x\": 0.6499999761581421,\r\n                \"y\": 0.8999999761581421\r\n            }, {\r\n                \"x\": 0.6933333277702332,\r\n                \"y\": 0.8700000047683716\r\n            }, {\r\n                \"x\": 0.75,\r\n                \"y\": 0.8833333253860474\r\n            }, {\r\n                \"x\": 0.79666668176651,\r\n                \"y\": 0.8766666650772095\r\n            }, {\r\n                \"x\": 0.8133333325386047,\r\n                \"y\": 0.8600000143051147\r\n            }, {\r\n                \"x\": 0.8100000023841858,\r\n                \"y\": 0.8333333134651184\r\n            }, {\r\n                \"x\": 0.7833333611488342,\r\n                \"y\": 0.8033333420753479\r\n            }, {\r\n                \"x\": 0.8066666722297668,\r\n                \"y\": 0.746666669845581\r\n            }, {\r\n                \"x\": 0.8133333325386047,\r\n                \"y\": 0.6933333277702332\r\n            }, {\r\n                \"x\": 0.800000011920929,\r\n                \"y\": 0.6200000047683716\r\n            }, {\r\n                \"x\": 0.75,\r\n                \"y\": 0.5333333015441895\r\n            }, {\r\n                \"x\": 0.746666669845581,\r\n                \"y\": 0.5\r\n            }, {\r\n                \"x\": 0.7333333492279053,\r\n                \"y\": 0.48000001907348633\r\n            }, {\r\n                \"x\": 0.7633333206176758,\r\n                \"y\": 0.45333331823349\r\n            }, {\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.40333330631256104\r\n            }, {\r\n                \"x\": 0.800000011920929,\r\n                \"y\": 0.34666669368743896\r\n            }, {\r\n                \"x\": 0.7933333516120911,\r\n                \"y\": 0.26999998092651367\r\n            }, {\r\n                \"x\": 0.7699999809265137,\r\n                \"y\": 0.19999998807907104\r\n            }, {\r\n                \"x\": 0.7233333587646484,\r\n                \"y\": 0.1433333158493042\r\n            }, {\r\n                \"x\": 0.6733333468437195,\r\n                \"y\": 0.1066666841506958\r\n            }, {\r\n                \"x\": 0.6133333444595337,\r\n                \"y\": 0.0899999737739563\r\n            }, {\r\n                \"x\": 0.54666668176651,\r\n                \"y\": 0.0899999737739563\r\n            }, {\r\n                \"x\": 0.4866666793823242,\r\n                \"y\": 0.11000001430511475\r\n            }, {\r\n                \"x\": 0.4333333373069763,\r\n                \"y\": 0.15333330631256104\r\n            }, {\r\n                \"x\": 0.36000001430511475,\r\n                \"y\": 0.1366666555404663\r\n            }, {\r\n                \"x\": 0.2800000011920929,\r\n                \"y\": 0.13999998569488525\r\n            }, {\r\n                \"x\": 0.2266666740179062,\r\n                \"y\": 0.1600000262260437\r\n            }, {\r\n                \"x\": 0.16333332657814026,\r\n                \"y\": 0.20666664838790894\r\n            }, {\r\n                \"x\": 0.14000000059604645,\r\n                \"y\": 0.2433333396911621\r\n            }, {\r\n                \"x\": 0.12333333492279053,\r\n                \"y\": 0.31333333253860474\r\n            }, {\r\n                \"x\": 0.12666666507720947,\r\n                \"y\": 0.38999998569488525\r\n            }, {\r\n                \"x\": 0.15000000596046448,\r\n                \"y\": 0.46666663885116577\r\n            }, {\r\n                \"x\": 0.18333333730697632,\r\n                \"y\": 0.5233333110809326\r\n            }, {\r\n                \"x\": 0.2266666740179062,\r\n                \"y\": 0.5633333325386047\r\n            }, {\r\n                \"x\": 0.2666666805744171,\r\n                \"y\": 0.5800000429153442\r\n            }, {\r\n                \"x\": 0.3166666626930237,\r\n                \"y\": 0.5800000429153442\r\n            }, {\r\n                \"x\": 0.3633333444595337,\r\n                \"y\": 0.5633333325386047\r\n            }, {\r\n                \"x\": 0.44999998807907104,\r\n                \"y\": 0.6766666769981384\r\n            }, {\r\n                \"x\": 0.5233333110809326,\r\n                \"y\": 0.7433333396911621\r\n            }, {\r\n                \"x\": 0.4300000071525574,\r\n                \"y\": 0.7033333778381348\r\n            }, {\r\n                \"x\": 0.3700000047683716,\r\n                \"y\": 0.6933333277702332\r\n            }, {\r\n                \"x\": 0.30000001192092896,\r\n                \"y\": 0.699999988079071\r\n            }, {\r\n                \"x\": 0.1966666728258133,\r\n                \"y\": 0.7366666793823242\r\n            }, {\r\n                \"x\": 0.1666666716337204,\r\n                \"y\": 0.7633333206176758\r\n            }, {\r\n                \"x\": 0.17000000178813934,\r\n                \"y\": 0.7833333015441895\r\n            }, {\r\n                \"x\": 0.2933333218097687,\r\n                \"y\": 0.8899999856948853\r\n            }, {\r\n                \"x\": 0.35333332419395447,\r\n                \"y\": 0.9266666769981384\r\n            }, {\r\n                \"x\": 0.4166666567325592,\r\n                \"y\": 0.9466666579246521\r\n            }]\r\n        }]\r\n    }, {\r\n        \"name\": \"coconut\",\r\n        \"imagePath\": \"../Low Poly Fruit/Low Poly Fruit/Coconut.png\",\r\n        \"origin\": {\r\n            \"x\": 0,\r\n            \"y\": 0\r\n        },\r\n        \"polygons\": [\r\n            [{\r\n                \"x\": 0.38999998569488525,\r\n                \"y\": 0.7233333587646484\r\n            }, {\r\n                \"x\": 0.3499999940395355,\r\n                \"y\": 0.75\r\n            }, {\r\n                \"x\": 0.2800000011920929,\r\n                \"y\": 0.753333330154419\r\n            }, {\r\n                \"x\": 0.1966666728258133,\r\n                \"y\": 0.7333333492279053\r\n            }],\r\n            [{\r\n                \"x\": 0.1966666728258133,\r\n                \"y\": 0.7333333492279053\r\n            }, {\r\n                \"x\": 0.14000000059604645,\r\n                \"y\": 0.6966666579246521\r\n            }, {\r\n                \"x\": 0.10999999940395355,\r\n                \"y\": 0.653333306312561\r\n            }, {\r\n                \"x\": 0.09000000357627869,\r\n                \"y\": 0.5866667032241821\r\n            }, {\r\n                \"x\": 0.09000000357627869,\r\n                \"y\": 0.5166666507720947\r\n            }, {\r\n                \"x\": 0.11999999731779099,\r\n                \"y\": 0.45666664838790894\r\n            }],\r\n            [{\r\n                \"x\": 0.11999999731779099,\r\n                \"y\": 0.45666664838790894\r\n            }, {\r\n                \"x\": 0.18000000715255737,\r\n                \"y\": 0.40333330631256104\r\n            }, {\r\n                \"x\": 0.23333333432674408,\r\n                \"y\": 0.3799999952316284\r\n            }, {\r\n                \"x\": 0.33000001311302185,\r\n                \"y\": 0.3733333349227905\r\n            }, {\r\n                \"x\": 0.46000000834465027,\r\n                \"y\": 0.7100000381469727\r\n            }, {\r\n                \"x\": 0.38999998569488525,\r\n                \"y\": 0.7233333587646484\r\n            }, {\r\n                \"x\": 0.1966666728258133,\r\n                \"y\": 0.7333333492279053\r\n            }],\r\n            [{\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.44999998807907104\r\n            }, {\r\n                \"x\": 0.8566666841506958,\r\n                \"y\": 0.4933333396911621\r\n            }, {\r\n                \"x\": 0.8933333158493042,\r\n                \"y\": 0.5399999618530273\r\n            }, {\r\n                \"x\": 0.9200000166893005,\r\n                \"y\": 0.6100000143051147\r\n            }, {\r\n                \"x\": 0.9100000262260437,\r\n                \"y\": 0.6766666769981384\r\n            }],\r\n            [{\r\n                \"x\": 0.9100000262260437,\r\n                \"y\": 0.6766666769981384\r\n            }, {\r\n                \"x\": 0.8766666650772095,\r\n                \"y\": 0.7599999904632568\r\n            }, {\r\n                \"x\": 0.8399999737739563,\r\n                \"y\": 0.8066666722297668\r\n            }, {\r\n                \"x\": 0.79666668176651,\r\n                \"y\": 0.8333333134651184\r\n            }, {\r\n                \"x\": 0.6733333468437195,\r\n                \"y\": 0.8333333134651184\r\n            }, {\r\n                \"x\": 0.6466666460037231,\r\n                \"y\": 0.8299999833106995\r\n            }],\r\n            [{\r\n                \"x\": 0.6466666460037231,\r\n                \"y\": 0.8299999833106995\r\n            }, {\r\n                \"x\": 0.5633333325386047,\r\n                \"y\": 0.8033333420753479\r\n            }, {\r\n                \"x\": 0.5066666603088379,\r\n                \"y\": 0.7633333206176758\r\n            }, {\r\n                \"x\": 0.46000000834465027,\r\n                \"y\": 0.7100000381469727\r\n            }, {\r\n                \"x\": 0.7666666507720947,\r\n                \"y\": 0.4166666865348816\r\n            }, {\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.44999998807907104\r\n            }, {\r\n                \"x\": 0.9100000262260437,\r\n                \"y\": 0.6766666769981384\r\n            }],\r\n            [{\r\n                \"x\": 0.46000000834465027,\r\n                \"y\": 0.7100000381469727\r\n            }, {\r\n                \"x\": 0.33000001311302185,\r\n                \"y\": 0.3733333349227905\r\n            }, {\r\n                \"x\": 0.3233333230018616,\r\n                \"y\": 0.3266666531562805\r\n            }, {\r\n                \"x\": 0.3499999940395355,\r\n                \"y\": 0.25333333015441895\r\n            }, {\r\n                \"x\": 0.4000000059604645,\r\n                \"y\": 0.17666667699813843\r\n            }, {\r\n                \"x\": 0.46666666865348816,\r\n                \"y\": 0.13999998569488525\r\n            }, {\r\n                \"x\": 0.5166666507720947,\r\n                \"y\": 0.12999999523162842\r\n            }],\r\n            [{\r\n                \"x\": 0.5166666507720947,\r\n                \"y\": 0.12999999523162842\r\n            }, {\r\n                \"x\": 0.6333333253860474,\r\n                \"y\": 0.13333332538604736\r\n            }, {\r\n                \"x\": 0.70333331823349,\r\n                \"y\": 0.17666667699813843\r\n            }, {\r\n                \"x\": 0.75,\r\n                \"y\": 0.2433333396911621\r\n            }, {\r\n                \"x\": 0.7699999809265137,\r\n                \"y\": 0.3033333420753479\r\n            }, {\r\n                \"x\": 0.7666666507720947,\r\n                \"y\": 0.4166666865348816\r\n            }, {\r\n                \"x\": 0.46000000834465027,\r\n                \"y\": 0.7100000381469727\r\n            }]\r\n        ],\r\n        \"circles\": [],\r\n        \"shapes\": [{\r\n            \"type\": \"POLYGON\",\r\n            \"vertices\": [{\r\n                \"x\": 0.6733333468437195,\r\n                \"y\": 0.8333333134651184\r\n            }, {\r\n                \"x\": 0.79666668176651,\r\n                \"y\": 0.8333333134651184\r\n            }, {\r\n                \"x\": 0.8399999737739563,\r\n                \"y\": 0.8066666722297668\r\n            }, {\r\n                \"x\": 0.8766666650772095,\r\n                \"y\": 0.7599999904632568\r\n            }, {\r\n                \"x\": 0.9100000262260437,\r\n                \"y\": 0.6766666769981384\r\n            }, {\r\n                \"x\": 0.9200000166893005,\r\n                \"y\": 0.6100000143051147\r\n            }, {\r\n                \"x\": 0.8933333158493042,\r\n                \"y\": 0.5399999618530273\r\n            }, {\r\n                \"x\": 0.8566666841506958,\r\n                \"y\": 0.4933333396911621\r\n            }, {\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.44999998807907104\r\n            }, {\r\n                \"x\": 0.7666666507720947,\r\n                \"y\": 0.4166666865348816\r\n            }, {\r\n                \"x\": 0.7699999809265137,\r\n                \"y\": 0.3033333420753479\r\n            }, {\r\n                \"x\": 0.75,\r\n                \"y\": 0.2433333396911621\r\n            }, {\r\n                \"x\": 0.70333331823349,\r\n                \"y\": 0.17666667699813843\r\n            }, {\r\n                \"x\": 0.6333333253860474,\r\n                \"y\": 0.13333332538604736\r\n            }, {\r\n                \"x\": 0.5166666507720947,\r\n                \"y\": 0.12999999523162842\r\n            }, {\r\n                \"x\": 0.46666666865348816,\r\n                \"y\": 0.13999998569488525\r\n            }, {\r\n                \"x\": 0.4000000059604645,\r\n                \"y\": 0.17666667699813843\r\n            }, {\r\n                \"x\": 0.3499999940395355,\r\n                \"y\": 0.25333333015441895\r\n            }, {\r\n                \"x\": 0.3233333230018616,\r\n                \"y\": 0.3266666531562805\r\n            }, {\r\n                \"x\": 0.33000001311302185,\r\n                \"y\": 0.3733333349227905\r\n            }, {\r\n                \"x\": 0.23333333432674408,\r\n                \"y\": 0.3799999952316284\r\n            }, {\r\n                \"x\": 0.18000000715255737,\r\n                \"y\": 0.40333330631256104\r\n            }, {\r\n                \"x\": 0.11999999731779099,\r\n                \"y\": 0.45666664838790894\r\n            }, {\r\n                \"x\": 0.09000000357627869,\r\n                \"y\": 0.5166666507720947\r\n            }, {\r\n                \"x\": 0.09000000357627869,\r\n                \"y\": 0.5866667032241821\r\n            }, {\r\n                \"x\": 0.10999999940395355,\r\n                \"y\": 0.653333306312561\r\n            }, {\r\n                \"x\": 0.14000000059604645,\r\n                \"y\": 0.6966666579246521\r\n            }, {\r\n                \"x\": 0.1966666728258133,\r\n                \"y\": 0.7333333492279053\r\n            }, {\r\n                \"x\": 0.2800000011920929,\r\n                \"y\": 0.753333330154419\r\n            }, {\r\n                \"x\": 0.3499999940395355,\r\n                \"y\": 0.75\r\n            }, {\r\n                \"x\": 0.38999998569488525,\r\n                \"y\": 0.7233333587646484\r\n            }, {\r\n                \"x\": 0.46000000834465027,\r\n                \"y\": 0.7100000381469727\r\n            }, {\r\n                \"x\": 0.5066666603088379,\r\n                \"y\": 0.7633333206176758\r\n            }, {\r\n                \"x\": 0.5633333325386047,\r\n                \"y\": 0.8033333420753479\r\n            }, {\r\n                \"x\": 0.6466666460037231,\r\n                \"y\": 0.8299999833106995\r\n            }]\r\n        }]\r\n    }, {\r\n        \"name\": \"fig\",\r\n        \"imagePath\": \"../Low Poly Fruit/Low Poly Fruit/Fig.png\",\r\n        \"origin\": {\r\n            \"x\": 0,\r\n            \"y\": 0\r\n        },\r\n        \"polygons\": [\r\n            [{\r\n                \"x\": 0.8433333039283752,\r\n                \"y\": 0.6066666841506958\r\n            }, {\r\n                \"x\": 0.8700000047683716,\r\n                \"y\": 0.6399999856948853\r\n            }, {\r\n                \"x\": 0.8666666746139526,\r\n                \"y\": 0.6633332967758179\r\n            }, {\r\n                \"x\": 0.8233333230018616,\r\n                \"y\": 0.699999988079071\r\n            }],\r\n            [{\r\n                \"x\": 0.8233333230018616,\r\n                \"y\": 0.699999988079071\r\n            }, {\r\n                \"x\": 0.7799999713897705,\r\n                \"y\": 0.7100000381469727\r\n            }, {\r\n                \"x\": 0.7233333587646484,\r\n                \"y\": 0.6899999976158142\r\n            }, {\r\n                \"x\": 0.7133333086967468,\r\n                \"y\": 0.6699999570846558\r\n            }, {\r\n                \"x\": 0.8399999737739563,\r\n                \"y\": 0.5666666626930237\r\n            }, {\r\n                \"x\": 0.8433333039283752,\r\n                \"y\": 0.6066666841506958\r\n            }],\r\n            [{\r\n                \"x\": 0.7133333086967468,\r\n                \"y\": 0.6699999570846558\r\n            }, {\r\n                \"x\": 0.4000000059604645,\r\n                \"y\": 0.22666668891906738\r\n            }, {\r\n                \"x\": 0.4833333194255829,\r\n                \"y\": 0.15666669607162476\r\n            }, {\r\n                \"x\": 0.5600000023841858,\r\n                \"y\": 0.13333332538604736\r\n            }, {\r\n                \"x\": 0.653333306312561,\r\n                \"y\": 0.12333333492279053\r\n            }, {\r\n                \"x\": 0.7333333492279053,\r\n                \"y\": 0.12999999523162842\r\n            }, {\r\n                \"x\": 0.8366666436195374,\r\n                \"y\": 0.18000000715255737\r\n            }],\r\n            [{\r\n                \"x\": 0.8366666436195374,\r\n                \"y\": 0.18000000715255737\r\n            }, {\r\n                \"x\": 0.8700000047683716,\r\n                \"y\": 0.22333335876464844\r\n            }, {\r\n                \"x\": 0.8966666460037231,\r\n                \"y\": 0.29666668176651\r\n            }, {\r\n                \"x\": 0.8999999761581421,\r\n                \"y\": 0.38333332538604736\r\n            }, {\r\n                \"x\": 0.8700000047683716,\r\n                \"y\": 0.503333330154419\r\n            }, {\r\n                \"x\": 0.8399999737739563,\r\n                \"y\": 0.5666666626930237\r\n            }, {\r\n                \"x\": 0.7133333086967468,\r\n                \"y\": 0.6699999570846558\r\n            }],\r\n            [{\r\n                \"x\": 0.7133333086967468,\r\n                \"y\": 0.6699999570846558\r\n            }, {\r\n                \"x\": 0.6733333468437195,\r\n                \"y\": 0.6866666674613953\r\n            }, {\r\n                \"x\": 0.6066666841506958,\r\n                \"y\": 0.6866666674613953\r\n            }, {\r\n                \"x\": 0.3633333444595337,\r\n                \"y\": 0.24000000953674316\r\n            }, {\r\n                \"x\": 0.4000000059604645,\r\n                \"y\": 0.22666668891906738\r\n            }],\r\n            [{\r\n                \"x\": 0.5299999713897705,\r\n                \"y\": 0.7300000190734863\r\n            }, {\r\n                \"x\": 0.4533333480358124,\r\n                \"y\": 0.79666668176651\r\n            }, {\r\n                \"x\": 0.273333340883255,\r\n                \"y\": 0.7766666412353516\r\n            }],\r\n            [{\r\n                \"x\": 0.273333340883255,\r\n                \"y\": 0.7766666412353516\r\n            }, {\r\n                \"x\": 0.18000000715255737,\r\n                \"y\": 0.7200000286102295\r\n            }, {\r\n                \"x\": 0.1133333370089531,\r\n                \"y\": 0.6399999856948853\r\n            }, {\r\n                \"x\": 0.08666666597127914,\r\n                \"y\": 0.5633333325386047\r\n            }, {\r\n                \"x\": 0.08666666597127914,\r\n                \"y\": 0.41333335638046265\r\n            }, {\r\n                \"x\": 0.11999999731779099,\r\n                \"y\": 0.34333330392837524\r\n            }, {\r\n                \"x\": 0.17000000178813934,\r\n                \"y\": 0.27666664123535156\r\n            }],\r\n            [{\r\n                \"x\": 0.17000000178813934,\r\n                \"y\": 0.27666664123535156\r\n            }, {\r\n                \"x\": 0.20000000298023224,\r\n                \"y\": 0.2566666603088379\r\n            }, {\r\n                \"x\": 0.2866666615009308,\r\n                \"y\": 0.24000000953674316\r\n            }, {\r\n                \"x\": 0.3633333444595337,\r\n                \"y\": 0.24000000953674316\r\n            }, {\r\n                \"x\": 0.6066666841506958,\r\n                \"y\": 0.6866666674613953\r\n            }, {\r\n                \"x\": 0.5299999713897705,\r\n                \"y\": 0.7300000190734863\r\n            }, {\r\n                \"x\": 0.273333340883255,\r\n                \"y\": 0.7766666412353516\r\n            }],\r\n            [{\r\n                \"x\": 0.4533333480358124,\r\n                \"y\": 0.79666668176651\r\n            }, {\r\n                \"x\": 0.4533333480358124,\r\n                \"y\": 0.8799999952316284\r\n            }, {\r\n                \"x\": 0.4266666769981384,\r\n                \"y\": 0.8966666460037231\r\n            }, {\r\n                \"x\": 0.38999998569488525,\r\n                \"y\": 0.8966666460037231\r\n            }, {\r\n                \"x\": 0.36666667461395264,\r\n                \"y\": 0.8799999952316284\r\n            }, {\r\n                \"x\": 0.273333340883255,\r\n                \"y\": 0.7766666412353516\r\n            }]\r\n        ],\r\n        \"circles\": [],\r\n        \"shapes\": [{\r\n            \"type\": \"POLYGON\",\r\n            \"vertices\": [{\r\n                \"x\": 0.38999998569488525,\r\n                \"y\": 0.8966666460037231\r\n            }, {\r\n                \"x\": 0.4266666769981384,\r\n                \"y\": 0.8966666460037231\r\n            }, {\r\n                \"x\": 0.4533333480358124,\r\n                \"y\": 0.8799999952316284\r\n            }, {\r\n                \"x\": 0.4533333480358124,\r\n                \"y\": 0.79666668176651\r\n            }, {\r\n                \"x\": 0.5299999713897705,\r\n                \"y\": 0.7300000190734863\r\n            }, {\r\n                \"x\": 0.6066666841506958,\r\n                \"y\": 0.6866666674613953\r\n            }, {\r\n                \"x\": 0.6733333468437195,\r\n                \"y\": 0.6866666674613953\r\n            }, {\r\n                \"x\": 0.7133333086967468,\r\n                \"y\": 0.6699999570846558\r\n            }, {\r\n                \"x\": 0.7233333587646484,\r\n                \"y\": 0.6899999976158142\r\n            }, {\r\n                \"x\": 0.7799999713897705,\r\n                \"y\": 0.7100000381469727\r\n            }, {\r\n                \"x\": 0.8233333230018616,\r\n                \"y\": 0.699999988079071\r\n            }, {\r\n                \"x\": 0.8666666746139526,\r\n                \"y\": 0.6633332967758179\r\n            }, {\r\n                \"x\": 0.8700000047683716,\r\n                \"y\": 0.6399999856948853\r\n            }, {\r\n                \"x\": 0.8433333039283752,\r\n                \"y\": 0.6066666841506958\r\n            }, {\r\n                \"x\": 0.8399999737739563,\r\n                \"y\": 0.5666666626930237\r\n            }, {\r\n                \"x\": 0.8700000047683716,\r\n                \"y\": 0.503333330154419\r\n            }, {\r\n                \"x\": 0.8999999761581421,\r\n                \"y\": 0.38333332538604736\r\n            }, {\r\n                \"x\": 0.8966666460037231,\r\n                \"y\": 0.29666668176651\r\n            }, {\r\n                \"x\": 0.8700000047683716,\r\n                \"y\": 0.22333335876464844\r\n            }, {\r\n                \"x\": 0.8366666436195374,\r\n                \"y\": 0.18000000715255737\r\n            }, {\r\n                \"x\": 0.7333333492279053,\r\n                \"y\": 0.12999999523162842\r\n            }, {\r\n                \"x\": 0.653333306312561,\r\n                \"y\": 0.12333333492279053\r\n            }, {\r\n                \"x\": 0.5600000023841858,\r\n                \"y\": 0.13333332538604736\r\n            }, {\r\n                \"x\": 0.4833333194255829,\r\n                \"y\": 0.15666669607162476\r\n            }, {\r\n                \"x\": 0.4000000059604645,\r\n                \"y\": 0.22666668891906738\r\n            }, {\r\n                \"x\": 0.3633333444595337,\r\n                \"y\": 0.24000000953674316\r\n            }, {\r\n                \"x\": 0.2866666615009308,\r\n                \"y\": 0.24000000953674316\r\n            }, {\r\n                \"x\": 0.20000000298023224,\r\n                \"y\": 0.2566666603088379\r\n            }, {\r\n                \"x\": 0.17000000178813934,\r\n                \"y\": 0.27666664123535156\r\n            }, {\r\n                \"x\": 0.11999999731779099,\r\n                \"y\": 0.34333330392837524\r\n            }, {\r\n                \"x\": 0.08666666597127914,\r\n                \"y\": 0.41333335638046265\r\n            }, {\r\n                \"x\": 0.08666666597127914,\r\n                \"y\": 0.5633333325386047\r\n            }, {\r\n                \"x\": 0.1133333370089531,\r\n                \"y\": 0.6399999856948853\r\n            }, {\r\n                \"x\": 0.18000000715255737,\r\n                \"y\": 0.7200000286102295\r\n            }, {\r\n                \"x\": 0.273333340883255,\r\n                \"y\": 0.7766666412353516\r\n            }, {\r\n                \"x\": 0.36666667461395264,\r\n                \"y\": 0.8799999952316284\r\n            }]\r\n        }]\r\n    }, {\r\n        \"name\": \"grapes\",\r\n        \"imagePath\": \"../Low Poly Fruit/Low Poly Fruit/Grapes.png\",\r\n        \"origin\": {\r\n            \"x\": 0,\r\n            \"y\": 0\r\n        },\r\n        \"polygons\": [\r\n            [{\r\n                \"x\": 0.19333332777023315,\r\n                \"y\": 0.7900000214576721\r\n            }, {\r\n                \"x\": 0.1599999964237213,\r\n                \"y\": 0.7866666316986084\r\n            }, {\r\n                \"x\": 0.10333333164453506,\r\n                \"y\": 0.753333330154419\r\n            }, {\r\n                \"x\": 0.09000000357627869,\r\n                \"y\": 0.7333333492279053\r\n            }, {\r\n                \"x\": 0.09666666388511658,\r\n                \"y\": 0.7033333778381348\r\n            }],\r\n            [{\r\n                \"x\": 0.09666666388511658,\r\n                \"y\": 0.7033333778381348\r\n            }, {\r\n                \"x\": 0.1733333319425583,\r\n                \"y\": 0.596666693687439\r\n            }, {\r\n                \"x\": 0.2133333384990692,\r\n                \"y\": 0.5733333230018616\r\n            }, {\r\n                \"x\": 0.27666667103767395,\r\n                \"y\": 0.8266666531562805\r\n            }, {\r\n                \"x\": 0.23999999463558197,\r\n                \"y\": 0.8233333230018616\r\n            }, {\r\n                \"x\": 0.19333332777023315,\r\n                \"y\": 0.7900000214576721\r\n            }],\r\n            [{\r\n                \"x\": 0.2133333384990692,\r\n                \"y\": 0.5733333230018616\r\n            }, {\r\n                \"x\": 0.46000000834465027,\r\n                \"y\": 0.8366667032241821\r\n            }, {\r\n                \"x\": 0.3233333230018616,\r\n                \"y\": 0.8933333158493042\r\n            }, {\r\n                \"x\": 0.30000001192092896,\r\n                \"y\": 0.8799999952316284\r\n            }, {\r\n                \"x\": 0.27666667103767395,\r\n                \"y\": 0.8266666531562805\r\n            }],\r\n            [{\r\n                \"x\": 0.22333332896232605,\r\n                \"y\": 0.5533333420753479\r\n            }, {\r\n                \"x\": 0.20333333313465118,\r\n                \"y\": 0.5166666507720947\r\n            }, {\r\n                \"x\": 0.24666666984558105,\r\n                \"y\": 0.4766666889190674\r\n            }, {\r\n                \"x\": 0.31333333253860474,\r\n                \"y\": 0.4466666579246521\r\n            }, {\r\n                \"x\": 0.3499999940395355,\r\n                \"y\": 0.4466666579246521\r\n            }],\r\n            [{\r\n                \"x\": 0.3499999940395355,\r\n                \"y\": 0.4466666579246521\r\n            }, {\r\n                \"x\": 0.3733333349227905,\r\n                \"y\": 0.39666664600372314\r\n            }, {\r\n                \"x\": 0.4533333480358124,\r\n                \"y\": 0.3799999952316284\r\n            }],\r\n            [{\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.21333330869674683\r\n            }, {\r\n                \"x\": 0.6466666460037231,\r\n                \"y\": 0.17666667699813843\r\n            }, {\r\n                \"x\": 0.6800000071525574,\r\n                \"y\": 0.14666664600372314\r\n            }, {\r\n                \"x\": 0.7599999904632568,\r\n                \"y\": 0.12333333492279053\r\n            }, {\r\n                \"x\": 0.8033333420753479,\r\n                \"y\": 0.15333330631256104\r\n            }, {\r\n                \"x\": 0.8233333230018616,\r\n                \"y\": 0.1899999976158142\r\n            }, {\r\n                \"x\": 0.8199999928474426,\r\n                \"y\": 0.2200000286102295\r\n            }],\r\n            [{\r\n                \"x\": 0.8199999928474426,\r\n                \"y\": 0.2200000286102295\r\n            }, {\r\n                \"x\": 0.8366666436195374,\r\n                \"y\": 0.2566666603088379\r\n            }, {\r\n                \"x\": 0.8233333230018616,\r\n                \"y\": 0.29333335161209106\r\n            }, {\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.3233333230018616\r\n            }, {\r\n                \"x\": 0.5766666531562805,\r\n                \"y\": 0.2566666603088379\r\n            }, {\r\n                \"x\": 0.5933333039283752,\r\n                \"y\": 0.22666668891906738\r\n            }, {\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.21333330869674683\r\n            }],\r\n            [{\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.3233333230018616\r\n            }, {\r\n                \"x\": 0.5099999904632568,\r\n                \"y\": 0.3233333230018616\r\n            }, {\r\n                \"x\": 0.5166666507720947,\r\n                \"y\": 0.2866666913032532\r\n            }, {\r\n                \"x\": 0.550000011920929,\r\n                \"y\": 0.25999999046325684\r\n            }, {\r\n                \"x\": 0.5766666531562805,\r\n                \"y\": 0.2566666603088379\r\n            }],\r\n            [{\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.3233333230018616\r\n            }, {\r\n                \"x\": 0.8133333325386047,\r\n                \"y\": 0.36000001430511475\r\n            }, {\r\n                \"x\": 0.8066666722297668,\r\n                \"y\": 0.3933333158493042\r\n            }, {\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.40666669607162476\r\n            }, {\r\n                \"x\": 0.4533333480358124,\r\n                \"y\": 0.3799999952316284\r\n            }, {\r\n                \"x\": 0.47999998927116394,\r\n                \"y\": 0.33666664361953735\r\n            }, {\r\n                \"x\": 0.5099999904632568,\r\n                \"y\": 0.3233333230018616\r\n            }],\r\n            [{\r\n                \"x\": 0.79666668176651,\r\n                \"y\": 0.4766666889190674\r\n            }, {\r\n                \"x\": 0.8233333230018616,\r\n                \"y\": 0.4766666889190674\r\n            }, {\r\n                \"x\": 0.8566666841506958,\r\n                \"y\": 0.4933333396911621\r\n            }, {\r\n                \"x\": 0.8600000143051147,\r\n                \"y\": 0.5299999713897705\r\n            }, {\r\n                \"x\": 0.8433333039283752,\r\n                \"y\": 0.5766666531562805\r\n            }],\r\n            [{\r\n                \"x\": 0.7833333611488342,\r\n                \"y\": 0.7566666603088379\r\n            }, {\r\n                \"x\": 0.7866666913032532,\r\n                \"y\": 0.7900000214576721\r\n            }, {\r\n                \"x\": 0.75,\r\n                \"y\": 0.8033333420753479\r\n            }],\r\n            [{\r\n                \"x\": 0.75,\r\n                \"y\": 0.8033333420753479\r\n            }, {\r\n                \"x\": 0.7133333086967468,\r\n                \"y\": 0.79666668176651\r\n            }, {\r\n                \"x\": 0.7866666913032532,\r\n                \"y\": 0.4599999785423279\r\n            }, {\r\n                \"x\": 0.79666668176651,\r\n                \"y\": 0.4766666889190674\r\n            }, {\r\n                \"x\": 0.800000011920929,\r\n                \"y\": 0.7200000286102295\r\n            }, {\r\n                \"x\": 0.7833333611488342,\r\n                \"y\": 0.7566666603088379\r\n            }],\r\n            [{\r\n                \"x\": 0.79666668176651,\r\n                \"y\": 0.4766666889190674\r\n            }, {\r\n                \"x\": 0.8433333039283752,\r\n                \"y\": 0.5766666531562805\r\n            }, {\r\n                \"x\": 0.8533333539962769,\r\n                \"y\": 0.653333306312561\r\n            }, {\r\n                \"x\": 0.8333333134651184,\r\n                \"y\": 0.6933333277702332\r\n            }, {\r\n                \"x\": 0.800000011920929,\r\n                \"y\": 0.7200000286102295\r\n            }],\r\n            [{\r\n                \"x\": 0.6600000262260437,\r\n                \"y\": 0.846666693687439\r\n            }, {\r\n                \"x\": 0.6166666746139526,\r\n                \"y\": 0.8633333444595337\r\n            }, {\r\n                \"x\": 0.47333332896232605,\r\n                \"y\": 0.84333336353302\r\n            }, {\r\n                \"x\": 0.46000000834465027,\r\n                \"y\": 0.8366667032241821\r\n            }, {\r\n                \"x\": 0.2133333384990692,\r\n                \"y\": 0.5733333230018616\r\n            }, {\r\n                \"x\": 0.22333332896232605,\r\n                \"y\": 0.5533333420753479\r\n            }],\r\n            [{\r\n                \"x\": 0.22333332896232605,\r\n                \"y\": 0.5533333420753479\r\n            }, {\r\n                \"x\": 0.3499999940395355,\r\n                \"y\": 0.4466666579246521\r\n            }, {\r\n                \"x\": 0.4533333480358124,\r\n                \"y\": 0.3799999952316284\r\n            }, {\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.40666669607162476\r\n            }, {\r\n                \"x\": 0.7866666913032532,\r\n                \"y\": 0.4599999785423279\r\n            }, {\r\n                \"x\": 0.6600000262260437,\r\n                \"y\": 0.846666693687439\r\n            }],\r\n            [{\r\n                \"x\": 0.7866666913032532,\r\n                \"y\": 0.4599999785423279\r\n            }, {\r\n                \"x\": 0.7133333086967468,\r\n                \"y\": 0.79666668176651\r\n            }, {\r\n                \"x\": 0.699999988079071,\r\n                \"y\": 0.846666693687439\r\n            }, {\r\n                \"x\": 0.6733333468437195,\r\n                \"y\": 0.8566666841506958\r\n            }, {\r\n                \"x\": 0.6600000262260437,\r\n                \"y\": 0.846666693687439\r\n            }],\r\n            [{\r\n                \"x\": 0.6166666746139526,\r\n                \"y\": 0.8633333444595337\r\n            }, {\r\n                \"x\": 0.5600000023841858,\r\n                \"y\": 0.90666663646698\r\n            }, {\r\n                \"x\": 0.5,\r\n                \"y\": 0.9200000166893005\r\n            }, {\r\n                \"x\": 0.47999998927116394,\r\n                \"y\": 0.8999999761581421\r\n            }, {\r\n                \"x\": 0.47333332896232605,\r\n                \"y\": 0.84333336353302\r\n            }]\r\n        ],\r\n        \"circles\": [],\r\n        \"shapes\": [{\r\n            \"type\": \"POLYGON\",\r\n            \"vertices\": [{\r\n                \"x\": 0.5,\r\n                \"y\": 0.9200000166893005\r\n            }, {\r\n                \"x\": 0.5600000023841858,\r\n                \"y\": 0.90666663646698\r\n            }, {\r\n                \"x\": 0.6166666746139526,\r\n                \"y\": 0.8633333444595337\r\n            }, {\r\n                \"x\": 0.6600000262260437,\r\n                \"y\": 0.846666693687439\r\n            }, {\r\n                \"x\": 0.6733333468437195,\r\n                \"y\": 0.8566666841506958\r\n            }, {\r\n                \"x\": 0.699999988079071,\r\n                \"y\": 0.846666693687439\r\n            }, {\r\n                \"x\": 0.7133333086967468,\r\n                \"y\": 0.79666668176651\r\n            }, {\r\n                \"x\": 0.75,\r\n                \"y\": 0.8033333420753479\r\n            }, {\r\n                \"x\": 0.7866666913032532,\r\n                \"y\": 0.7900000214576721\r\n            }, {\r\n                \"x\": 0.7833333611488342,\r\n                \"y\": 0.7566666603088379\r\n            }, {\r\n                \"x\": 0.800000011920929,\r\n                \"y\": 0.7200000286102295\r\n            }, {\r\n                \"x\": 0.8333333134651184,\r\n                \"y\": 0.6933333277702332\r\n            }, {\r\n                \"x\": 0.8533333539962769,\r\n                \"y\": 0.653333306312561\r\n            }, {\r\n                \"x\": 0.8433333039283752,\r\n                \"y\": 0.5766666531562805\r\n            }, {\r\n                \"x\": 0.8600000143051147,\r\n                \"y\": 0.5299999713897705\r\n            }, {\r\n                \"x\": 0.8566666841506958,\r\n                \"y\": 0.4933333396911621\r\n            }, {\r\n                \"x\": 0.8233333230018616,\r\n                \"y\": 0.4766666889190674\r\n            }, {\r\n                \"x\": 0.79666668176651,\r\n                \"y\": 0.4766666889190674\r\n            }, {\r\n                \"x\": 0.7866666913032532,\r\n                \"y\": 0.4599999785423279\r\n            }, {\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.40666669607162476\r\n            }, {\r\n                \"x\": 0.8066666722297668,\r\n                \"y\": 0.3933333158493042\r\n            }, {\r\n                \"x\": 0.8133333325386047,\r\n                \"y\": 0.36000001430511475\r\n            }, {\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.3233333230018616\r\n            }, {\r\n                \"x\": 0.8233333230018616,\r\n                \"y\": 0.29333335161209106\r\n            }, {\r\n                \"x\": 0.8366666436195374,\r\n                \"y\": 0.2566666603088379\r\n            }, {\r\n                \"x\": 0.8199999928474426,\r\n                \"y\": 0.2200000286102295\r\n            }, {\r\n                \"x\": 0.8233333230018616,\r\n                \"y\": 0.1899999976158142\r\n            }, {\r\n                \"x\": 0.8033333420753479,\r\n                \"y\": 0.15333330631256104\r\n            }, {\r\n                \"x\": 0.7599999904632568,\r\n                \"y\": 0.12333333492279053\r\n            }, {\r\n                \"x\": 0.6800000071525574,\r\n                \"y\": 0.14666664600372314\r\n            }, {\r\n                \"x\": 0.6466666460037231,\r\n                \"y\": 0.17666667699813843\r\n            }, {\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.21333330869674683\r\n            }, {\r\n                \"x\": 0.5933333039283752,\r\n                \"y\": 0.22666668891906738\r\n            }, {\r\n                \"x\": 0.5766666531562805,\r\n                \"y\": 0.2566666603088379\r\n            }, {\r\n                \"x\": 0.550000011920929,\r\n                \"y\": 0.25999999046325684\r\n            }, {\r\n                \"x\": 0.5166666507720947,\r\n                \"y\": 0.2866666913032532\r\n            }, {\r\n                \"x\": 0.5099999904632568,\r\n                \"y\": 0.3233333230018616\r\n            }, {\r\n                \"x\": 0.47999998927116394,\r\n                \"y\": 0.33666664361953735\r\n            }, {\r\n                \"x\": 0.4533333480358124,\r\n                \"y\": 0.3799999952316284\r\n            }, {\r\n                \"x\": 0.3733333349227905,\r\n                \"y\": 0.39666664600372314\r\n            }, {\r\n                \"x\": 0.3499999940395355,\r\n                \"y\": 0.4466666579246521\r\n            }, {\r\n                \"x\": 0.31333333253860474,\r\n                \"y\": 0.4466666579246521\r\n            }, {\r\n                \"x\": 0.24666666984558105,\r\n                \"y\": 0.4766666889190674\r\n            }, {\r\n                \"x\": 0.20333333313465118,\r\n                \"y\": 0.5166666507720947\r\n            }, {\r\n                \"x\": 0.22333332896232605,\r\n                \"y\": 0.5533333420753479\r\n            }, {\r\n                \"x\": 0.2133333384990692,\r\n                \"y\": 0.5733333230018616\r\n            }, {\r\n                \"x\": 0.1733333319425583,\r\n                \"y\": 0.596666693687439\r\n            }, {\r\n                \"x\": 0.09666666388511658,\r\n                \"y\": 0.7033333778381348\r\n            }, {\r\n                \"x\": 0.09000000357627869,\r\n                \"y\": 0.7333333492279053\r\n            }, {\r\n                \"x\": 0.10333333164453506,\r\n                \"y\": 0.753333330154419\r\n            }, {\r\n                \"x\": 0.1599999964237213,\r\n                \"y\": 0.7866666316986084\r\n            }, {\r\n                \"x\": 0.19333332777023315,\r\n                \"y\": 0.7900000214576721\r\n            }, {\r\n                \"x\": 0.23999999463558197,\r\n                \"y\": 0.8233333230018616\r\n            }, {\r\n                \"x\": 0.27666667103767395,\r\n                \"y\": 0.8266666531562805\r\n            }, {\r\n                \"x\": 0.30000001192092896,\r\n                \"y\": 0.8799999952316284\r\n            }, {\r\n                \"x\": 0.3233333230018616,\r\n                \"y\": 0.8933333158493042\r\n            }, {\r\n                \"x\": 0.46000000834465027,\r\n                \"y\": 0.8366667032241821\r\n            }, {\r\n                \"x\": 0.47333332896232605,\r\n                \"y\": 0.84333336353302\r\n            }, {\r\n                \"x\": 0.47999998927116394,\r\n                \"y\": 0.8999999761581421\r\n            }]\r\n        }]\r\n    }, {\r\n        \"name\": \"kiwi\",\r\n        \"imagePath\": \"../Low Poly Fruit/Low Poly Fruit/Kiwi.png\",\r\n        \"origin\": {\r\n            \"x\": 0,\r\n            \"y\": 0\r\n        },\r\n        \"polygons\": [\r\n            [{\r\n                \"x\": 0.4300000071525574,\r\n                \"y\": 0.7400000095367432\r\n            }, {\r\n                \"x\": 0.2800000011920929,\r\n                \"y\": 0.7166666984558105\r\n            }, {\r\n                \"x\": 0.2199999988079071,\r\n                \"y\": 0.6866666674613953\r\n            }, {\r\n                \"x\": 0.15333333611488342,\r\n                \"y\": 0.6333333253860474\r\n            }, {\r\n                \"x\": 0.1066666692495346,\r\n                \"y\": 0.5600000023841858\r\n            }],\r\n            [{\r\n                \"x\": 0.1066666692495346,\r\n                \"y\": 0.5600000023841858\r\n            }, {\r\n                \"x\": 0.08666666597127914,\r\n                \"y\": 0.4766666889190674\r\n            }, {\r\n                \"x\": 0.09000000357627869,\r\n                \"y\": 0.42000001668930054\r\n            }, {\r\n                \"x\": 0.10999999940395355,\r\n                \"y\": 0.3500000238418579\r\n            }, {\r\n                \"x\": 0.14666666090488434,\r\n                \"y\": 0.2900000214576721\r\n            }, {\r\n                \"x\": 0.4300000071525574,\r\n                \"y\": 0.7400000095367432\r\n            }],\r\n            [{\r\n                \"x\": 0.14666666090488434,\r\n                \"y\": 0.2900000214576721\r\n            }, {\r\n                \"x\": 0.2133333384990692,\r\n                \"y\": 0.22333335876464844\r\n            }, {\r\n                \"x\": 0.25999999046325684,\r\n                \"y\": 0.20333331823349\r\n            }, {\r\n                \"x\": 0.33666667342185974,\r\n                \"y\": 0.19333332777023315\r\n            }, {\r\n                \"x\": 0.41333332657814026,\r\n                \"y\": 0.19999998807907104\r\n            }],\r\n            [{\r\n                \"x\": 0.41333332657814026,\r\n                \"y\": 0.19999998807907104\r\n            }, {\r\n                \"x\": 0.4699999988079071,\r\n                \"y\": 0.22333335876464844\r\n            }, {\r\n                \"x\": 0.5533333420753479,\r\n                \"y\": 0.2866666913032532\r\n            }, {\r\n                \"x\": 0.596666693687439,\r\n                \"y\": 0.33666664361953735\r\n            }, {\r\n                \"x\": 0.4300000071525574,\r\n                \"y\": 0.7400000095367432\r\n            }, {\r\n                \"x\": 0.14666666090488434,\r\n                \"y\": 0.2900000214576721\r\n            }],\r\n            [{\r\n                \"x\": 0.596666693687439,\r\n                \"y\": 0.33666664361953735\r\n            }, {\r\n                \"x\": 0.7300000190734863,\r\n                \"y\": 0.34666669368743896\r\n            }, {\r\n                \"x\": 0.7799999713897705,\r\n                \"y\": 0.36666667461395264\r\n            }, {\r\n                \"x\": 0.8233333230018616,\r\n                \"y\": 0.40333330631256104\r\n            }, {\r\n                \"x\": 0.8766666650772095,\r\n                \"y\": 0.48000001907348633\r\n            }, {\r\n                \"x\": 0.9066666960716248,\r\n                \"y\": 0.5733333230018616\r\n            }, {\r\n                \"x\": 0.9133333563804626,\r\n                \"y\": 0.65666663646698\r\n            }, {\r\n                \"x\": 0.903333306312561,\r\n                \"y\": 0.7066667079925537\r\n            }],\r\n            [{\r\n                \"x\": 0.903333306312561,\r\n                \"y\": 0.7066667079925537\r\n            }, {\r\n                \"x\": 0.8666666746139526,\r\n                \"y\": 0.753333330154419\r\n            }, {\r\n                \"x\": 0.8133333325386047,\r\n                \"y\": 0.7900000214576721\r\n            }, {\r\n                \"x\": 0.7133333086967468,\r\n                \"y\": 0.8133333325386047\r\n            }, {\r\n                \"x\": 0.6399999856948853,\r\n                \"y\": 0.8133333325386047\r\n            }],\r\n            [{\r\n                \"x\": 0.6399999856948853,\r\n                \"y\": 0.8133333325386047\r\n            }, {\r\n                \"x\": 0.5933333039283752,\r\n                \"y\": 0.8066666722297668\r\n            }, {\r\n                \"x\": 0.49000000953674316,\r\n                \"y\": 0.7733333110809326\r\n            }, {\r\n                \"x\": 0.4300000071525574,\r\n                \"y\": 0.7400000095367432\r\n            }, {\r\n                \"x\": 0.596666693687439,\r\n                \"y\": 0.33666664361953735\r\n            }, {\r\n                \"x\": 0.903333306312561,\r\n                \"y\": 0.7066667079925537\r\n            }]\r\n        ],\r\n        \"circles\": [],\r\n        \"shapes\": [{\r\n            \"type\": \"POLYGON\",\r\n            \"vertices\": [{\r\n                \"x\": 0.6399999856948853,\r\n                \"y\": 0.8133333325386047\r\n            }, {\r\n                \"x\": 0.7133333086967468,\r\n                \"y\": 0.8133333325386047\r\n            }, {\r\n                \"x\": 0.8133333325386047,\r\n                \"y\": 0.7900000214576721\r\n            }, {\r\n                \"x\": 0.8666666746139526,\r\n                \"y\": 0.753333330154419\r\n            }, {\r\n                \"x\": 0.903333306312561,\r\n                \"y\": 0.7066667079925537\r\n            }, {\r\n                \"x\": 0.9133333563804626,\r\n                \"y\": 0.65666663646698\r\n            }, {\r\n                \"x\": 0.9066666960716248,\r\n                \"y\": 0.5733333230018616\r\n            }, {\r\n                \"x\": 0.8766666650772095,\r\n                \"y\": 0.48000001907348633\r\n            }, {\r\n                \"x\": 0.8233333230018616,\r\n                \"y\": 0.40333330631256104\r\n            }, {\r\n                \"x\": 0.7799999713897705,\r\n                \"y\": 0.36666667461395264\r\n            }, {\r\n                \"x\": 0.7300000190734863,\r\n                \"y\": 0.34666669368743896\r\n            }, {\r\n                \"x\": 0.596666693687439,\r\n                \"y\": 0.33666664361953735\r\n            }, {\r\n                \"x\": 0.5533333420753479,\r\n                \"y\": 0.2866666913032532\r\n            }, {\r\n                \"x\": 0.4699999988079071,\r\n                \"y\": 0.22333335876464844\r\n            }, {\r\n                \"x\": 0.41333332657814026,\r\n                \"y\": 0.19999998807907104\r\n            }, {\r\n                \"x\": 0.33666667342185974,\r\n                \"y\": 0.19333332777023315\r\n            }, {\r\n                \"x\": 0.25999999046325684,\r\n                \"y\": 0.20333331823349\r\n            }, {\r\n                \"x\": 0.2133333384990692,\r\n                \"y\": 0.22333335876464844\r\n            }, {\r\n                \"x\": 0.14666666090488434,\r\n                \"y\": 0.2900000214576721\r\n            }, {\r\n                \"x\": 0.10999999940395355,\r\n                \"y\": 0.3500000238418579\r\n            }, {\r\n                \"x\": 0.09000000357627869,\r\n                \"y\": 0.42000001668930054\r\n            }, {\r\n                \"x\": 0.08666666597127914,\r\n                \"y\": 0.4766666889190674\r\n            }, {\r\n                \"x\": 0.1066666692495346,\r\n                \"y\": 0.5600000023841858\r\n            }, {\r\n                \"x\": 0.15333333611488342,\r\n                \"y\": 0.6333333253860474\r\n            }, {\r\n                \"x\": 0.2199999988079071,\r\n                \"y\": 0.6866666674613953\r\n            }, {\r\n                \"x\": 0.2800000011920929,\r\n                \"y\": 0.7166666984558105\r\n            }, {\r\n                \"x\": 0.4300000071525574,\r\n                \"y\": 0.7400000095367432\r\n            }, {\r\n                \"x\": 0.49000000953674316,\r\n                \"y\": 0.7733333110809326\r\n            }, {\r\n                \"x\": 0.5933333039283752,\r\n                \"y\": 0.8066666722297668\r\n            }]\r\n        }]\r\n    }, {\r\n        \"name\": \"lemon\",\r\n        \"imagePath\": \"../Low Poly Fruit/Low Poly Fruit/Lemon.png\",\r\n        \"origin\": {\r\n            \"x\": 0,\r\n            \"y\": 0\r\n        },\r\n        \"polygons\": [\r\n            [{\r\n                \"x\": 0.25,\r\n                \"y\": 0.3766666650772095\r\n            }, {\r\n                \"x\": 0.2633333206176758,\r\n                \"y\": 0.28333336114883423\r\n            }, {\r\n                \"x\": 0.3033333420753479,\r\n                \"y\": 0.2733333110809326\r\n            }, {\r\n                \"x\": 0.3733333349227905,\r\n                \"y\": 0.2866666913032532\r\n            }],\r\n            [{\r\n                \"x\": 0.476666659116745,\r\n                \"y\": 0.2733333110809326\r\n            }, {\r\n                \"x\": 0.5566666722297668,\r\n                \"y\": 0.19333332777023315\r\n            }, {\r\n                \"x\": 0.6000000238418579,\r\n                \"y\": 0.17666667699813843\r\n            }, {\r\n                \"x\": 0.7233333587646484,\r\n                \"y\": 0.17000001668930054\r\n            }, {\r\n                \"x\": 0.7766666412353516,\r\n                \"y\": 0.18000000715255737\r\n            }, {\r\n                \"x\": 0.8433333039283752,\r\n                \"y\": 0.2200000286102295\r\n            }, {\r\n                \"x\": 0.8866666555404663,\r\n                \"y\": 0.2633333206176758\r\n            }, {\r\n                \"x\": 0.903333306312561,\r\n                \"y\": 0.3033333420753479\r\n            }],\r\n            [{\r\n                \"x\": 0.903333306312561,\r\n                \"y\": 0.3033333420753479\r\n            }, {\r\n                \"x\": 0.9066666960716248,\r\n                \"y\": 0.38333332538604736\r\n            }, {\r\n                \"x\": 0.8933333158493042,\r\n                \"y\": 0.44333332777023315\r\n            }, {\r\n                \"x\": 0.8633333444595337,\r\n                \"y\": 0.49666666984558105\r\n            }, {\r\n                \"x\": 0.8066666722297668,\r\n                \"y\": 0.5566666722297668\r\n            }, {\r\n                \"x\": 0.7566666603088379,\r\n                \"y\": 0.5866667032241821\r\n            }, {\r\n                \"x\": 0.699999988079071,\r\n                \"y\": 0.6000000238418579\r\n            }, {\r\n                \"x\": 0.476666659116745,\r\n                \"y\": 0.2733333110809326\r\n            }],\r\n            [{\r\n                \"x\": 0.6233333349227905,\r\n                \"y\": 0.800000011920929\r\n            }, {\r\n                \"x\": 0.2966666519641876,\r\n                \"y\": 0.6433333158493042\r\n            }, {\r\n                \"x\": 0.6466666460037231,\r\n                \"y\": 0.7433333396911621\r\n            }, {\r\n                \"x\": 0.6733333468437195,\r\n                \"y\": 0.7833333015441895\r\n            }, {\r\n                \"x\": 0.6666666865348816,\r\n                \"y\": 0.8066666722297668\r\n            }],\r\n            [{\r\n                \"x\": 0.6666666865348816,\r\n                \"y\": 0.8066666722297668\r\n            }, {\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.8133333325386047\r\n            }, {\r\n                \"x\": 0.6233333349227905,\r\n                \"y\": 0.800000011920929\r\n            }],\r\n            [{\r\n                \"x\": 0.2966666519641876,\r\n                \"y\": 0.6433333158493042\r\n            }, {\r\n                \"x\": 0.23999999463558197,\r\n                \"y\": 0.5433332920074463\r\n            }, {\r\n                \"x\": 0.2266666740179062,\r\n                \"y\": 0.4766666889190674\r\n            }, {\r\n                \"x\": 0.23000000417232513,\r\n                \"y\": 0.41333335638046265\r\n            }, {\r\n                \"x\": 0.25,\r\n                \"y\": 0.3766666650772095\r\n            }, {\r\n                \"x\": 0.3733333349227905,\r\n                \"y\": 0.2866666913032532\r\n            }],\r\n            [{\r\n                \"x\": 0.3733333349227905,\r\n                \"y\": 0.2866666913032532\r\n            }, {\r\n                \"x\": 0.476666659116745,\r\n                \"y\": 0.2733333110809326\r\n            }, {\r\n                \"x\": 0.699999988079071,\r\n                \"y\": 0.6000000238418579\r\n            }, {\r\n                \"x\": 0.6800000071525574,\r\n                \"y\": 0.6933333277702332\r\n            }, {\r\n                \"x\": 0.6466666460037231,\r\n                \"y\": 0.7433333396911621\r\n            }, {\r\n                \"x\": 0.2966666519641876,\r\n                \"y\": 0.6433333158493042\r\n            }],\r\n            [{\r\n                \"x\": 0.6233333349227905,\r\n                \"y\": 0.800000011920929\r\n            }, {\r\n                \"x\": 0.5866666436195374,\r\n                \"y\": 0.8033333420753479\r\n            }, {\r\n                \"x\": 0.2266666740179062,\r\n                \"y\": 0.6733333468437195\r\n            }, {\r\n                \"x\": 0.2966666519641876,\r\n                \"y\": 0.6433333158493042\r\n            }],\r\n            [{\r\n                \"x\": 0.5866666436195374,\r\n                \"y\": 0.8033333420753479\r\n            }, {\r\n                \"x\": 0.5233333110809326,\r\n                \"y\": 0.84333336353302\r\n            }, {\r\n                \"x\": 0.44333332777023315,\r\n                \"y\": 0.8633333444595337\r\n            }, {\r\n                \"x\": 0.3766666650772095,\r\n                \"y\": 0.8633333444595337\r\n            }, {\r\n                \"x\": 0.33666667342185974,\r\n                \"y\": 0.8533333539962769\r\n            }, {\r\n                \"x\": 0.23000000417232513,\r\n                \"y\": 0.8133333325386047\r\n            }],\r\n            [{\r\n                \"x\": 0.23000000417232513,\r\n                \"y\": 0.8133333325386047\r\n            }, {\r\n                \"x\": 0.13333334028720856,\r\n                \"y\": 0.7599999904632568\r\n            }, {\r\n                \"x\": 0.08666666597127914,\r\n                \"y\": 0.7200000286102295\r\n            }, {\r\n                \"x\": 0.08666666597127914,\r\n                \"y\": 0.699999988079071\r\n            }, {\r\n                \"x\": 0.11666666716337204,\r\n                \"y\": 0.6833333373069763\r\n            }, {\r\n                \"x\": 0.2266666740179062,\r\n                \"y\": 0.6733333468437195\r\n            }, {\r\n                \"x\": 0.5866666436195374,\r\n                \"y\": 0.8033333420753479\r\n            }]\r\n        ],\r\n        \"circles\": [],\r\n        \"shapes\": [{\r\n            \"type\": \"POLYGON\",\r\n            \"vertices\": [{\r\n                \"x\": 0.3766666650772095,\r\n                \"y\": 0.8633333444595337\r\n            }, {\r\n                \"x\": 0.44333332777023315,\r\n                \"y\": 0.8633333444595337\r\n            }, {\r\n                \"x\": 0.5233333110809326,\r\n                \"y\": 0.84333336353302\r\n            }, {\r\n                \"x\": 0.5866666436195374,\r\n                \"y\": 0.8033333420753479\r\n            }, {\r\n                \"x\": 0.6233333349227905,\r\n                \"y\": 0.800000011920929\r\n            }, {\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.8133333325386047\r\n            }, {\r\n                \"x\": 0.6666666865348816,\r\n                \"y\": 0.8066666722297668\r\n            }, {\r\n                \"x\": 0.6733333468437195,\r\n                \"y\": 0.7833333015441895\r\n            }, {\r\n                \"x\": 0.6466666460037231,\r\n                \"y\": 0.7433333396911621\r\n            }, {\r\n                \"x\": 0.6800000071525574,\r\n                \"y\": 0.6933333277702332\r\n            }, {\r\n                \"x\": 0.699999988079071,\r\n                \"y\": 0.6000000238418579\r\n            }, {\r\n                \"x\": 0.7566666603088379,\r\n                \"y\": 0.5866667032241821\r\n            }, {\r\n                \"x\": 0.8066666722297668,\r\n                \"y\": 0.5566666722297668\r\n            }, {\r\n                \"x\": 0.8633333444595337,\r\n                \"y\": 0.49666666984558105\r\n            }, {\r\n                \"x\": 0.8933333158493042,\r\n                \"y\": 0.44333332777023315\r\n            }, {\r\n                \"x\": 0.9066666960716248,\r\n                \"y\": 0.38333332538604736\r\n            }, {\r\n                \"x\": 0.903333306312561,\r\n                \"y\": 0.3033333420753479\r\n            }, {\r\n                \"x\": 0.8866666555404663,\r\n                \"y\": 0.2633333206176758\r\n            }, {\r\n                \"x\": 0.8433333039283752,\r\n                \"y\": 0.2200000286102295\r\n            }, {\r\n                \"x\": 0.7766666412353516,\r\n                \"y\": 0.18000000715255737\r\n            }, {\r\n                \"x\": 0.7233333587646484,\r\n                \"y\": 0.17000001668930054\r\n            }, {\r\n                \"x\": 0.6000000238418579,\r\n                \"y\": 0.17666667699813843\r\n            }, {\r\n                \"x\": 0.5566666722297668,\r\n                \"y\": 0.19333332777023315\r\n            }, {\r\n                \"x\": 0.476666659116745,\r\n                \"y\": 0.2733333110809326\r\n            }, {\r\n                \"x\": 0.3733333349227905,\r\n                \"y\": 0.2866666913032532\r\n            }, {\r\n                \"x\": 0.3033333420753479,\r\n                \"y\": 0.2733333110809326\r\n            }, {\r\n                \"x\": 0.2633333206176758,\r\n                \"y\": 0.28333336114883423\r\n            }, {\r\n                \"x\": 0.25,\r\n                \"y\": 0.3766666650772095\r\n            }, {\r\n                \"x\": 0.23000000417232513,\r\n                \"y\": 0.41333335638046265\r\n            }, {\r\n                \"x\": 0.2266666740179062,\r\n                \"y\": 0.4766666889190674\r\n            }, {\r\n                \"x\": 0.23999999463558197,\r\n                \"y\": 0.5433332920074463\r\n            }, {\r\n                \"x\": 0.2966666519641876,\r\n                \"y\": 0.6433333158493042\r\n            }, {\r\n                \"x\": 0.2266666740179062,\r\n                \"y\": 0.6733333468437195\r\n            }, {\r\n                \"x\": 0.11666666716337204,\r\n                \"y\": 0.6833333373069763\r\n            }, {\r\n                \"x\": 0.08666666597127914,\r\n                \"y\": 0.699999988079071\r\n            }, {\r\n                \"x\": 0.08666666597127914,\r\n                \"y\": 0.7200000286102295\r\n            }, {\r\n                \"x\": 0.13333334028720856,\r\n                \"y\": 0.7599999904632568\r\n            }, {\r\n                \"x\": 0.23000000417232513,\r\n                \"y\": 0.8133333325386047\r\n            }, {\r\n                \"x\": 0.33666667342185974,\r\n                \"y\": 0.8533333539962769\r\n            }]\r\n        }]\r\n    }, {\r\n        \"name\": \"mango\",\r\n        \"imagePath\": \"../Low Poly Fruit/Low Poly Fruit/Mango.png\",\r\n        \"origin\": {\r\n            \"x\": 0,\r\n            \"y\": 0\r\n        },\r\n        \"polygons\": [\r\n            [{\r\n                \"x\": 0.3799999952316284,\r\n                \"y\": 0.6933333277702332\r\n            }, {\r\n                \"x\": 0.3499999940395355,\r\n                \"y\": 0.7133333683013916\r\n            }, {\r\n                \"x\": 0.3233333230018616,\r\n                \"y\": 0.7033333778381348\r\n            }, {\r\n                \"x\": 0.3166666626930237,\r\n                \"y\": 0.6833333373069763\r\n            }],\r\n            [{\r\n                \"x\": 0.3166666626930237,\r\n                \"y\": 0.6833333373069763\r\n            }, {\r\n                \"x\": 0.25333333015441895,\r\n                \"y\": 0.6833333373069763\r\n            }, {\r\n                \"x\": 0.17666666209697723,\r\n                \"y\": 0.6466666460037231\r\n            }, {\r\n                \"x\": 0.15666666626930237,\r\n                \"y\": 0.6233333349227905\r\n            }, {\r\n                \"x\": 0.1599999964237213,\r\n                \"y\": 0.59333336353302\r\n            }, {\r\n                \"x\": 0.17666666209697723,\r\n                \"y\": 0.5800000429153442\r\n            }],\r\n            [{\r\n                \"x\": 0.08666666597127914,\r\n                \"y\": 0.40666669607162476\r\n            }, {\r\n                \"x\": 0.05999999865889549,\r\n                \"y\": 0.39666664600372314\r\n            }, {\r\n                \"x\": 0.046666666865348816,\r\n                \"y\": 0.3700000047683716\r\n            }, {\r\n                \"x\": 0.046666666865348816,\r\n                \"y\": 0.3166666626930237\r\n            }, {\r\n                \"x\": 0.06333333253860474,\r\n                \"y\": 0.28333336114883423\r\n            }],\r\n            [{\r\n                \"x\": 0.06333333253860474,\r\n                \"y\": 0.28333336114883423\r\n            }, {\r\n                \"x\": 0.15000000596046448,\r\n                \"y\": 0.5233333110809326\r\n            }, {\r\n                \"x\": 0.12999999523162842,\r\n                \"y\": 0.5066666603088379\r\n            }, {\r\n                \"x\": 0.08666666597127914,\r\n                \"y\": 0.40666669607162476\r\n            }],\r\n            [{\r\n                \"x\": 0.06333333253860474,\r\n                \"y\": 0.28333336114883423\r\n            }, {\r\n                \"x\": 0.05999999865889549,\r\n                \"y\": 0.25999999046325684\r\n            }, {\r\n                \"x\": 0.09000000357627869,\r\n                \"y\": 0.23666667938232422\r\n            }, {\r\n                \"x\": 0.14666666090488434,\r\n                \"y\": 0.22666668891906738\r\n            }, {\r\n                \"x\": 0.23000000417232513,\r\n                \"y\": 0.24000000953674316\r\n            }, {\r\n                \"x\": 0.34333333373069763,\r\n                \"y\": 0.2799999713897705\r\n            }, {\r\n                \"x\": 0.41333332657814026,\r\n                \"y\": 0.3199999928474426\r\n            }],\r\n            [{\r\n                \"x\": 0.41333332657814026,\r\n                \"y\": 0.3199999928474426\r\n            }, {\r\n                \"x\": 0.41333332657814026,\r\n                \"y\": 0.6933333277702332\r\n            }, {\r\n                \"x\": 0.3799999952316284,\r\n                \"y\": 0.6933333277702332\r\n            }, {\r\n                \"x\": 0.3166666626930237,\r\n                \"y\": 0.6833333373069763\r\n            }, {\r\n                \"x\": 0.17666666209697723,\r\n                \"y\": 0.5800000429153442\r\n            }, {\r\n                \"x\": 0.15000000596046448,\r\n                \"y\": 0.5233333110809326\r\n            }, {\r\n                \"x\": 0.06333333253860474,\r\n                \"y\": 0.28333336114883423\r\n            }],\r\n            [{\r\n                \"x\": 0.4399999976158142,\r\n                \"y\": 0.2900000214576721\r\n            }, {\r\n                \"x\": 0.44333332777023315,\r\n                \"y\": 0.2633333206176758\r\n            }, {\r\n                \"x\": 0.4833333194255829,\r\n                \"y\": 0.21333330869674683\r\n            }, {\r\n                \"x\": 0.5299999713897705,\r\n                \"y\": 0.19999998807907104\r\n            }, {\r\n                \"x\": 0.6100000143051147,\r\n                \"y\": 0.20999997854232788\r\n            }, {\r\n                \"x\": 0.653333306312561,\r\n                \"y\": 0.25\r\n            }],\r\n            [{\r\n                \"x\": 0.8899999856948853,\r\n                \"y\": 0.5433332920074463\r\n            }, {\r\n                \"x\": 0.9300000071525574,\r\n                \"y\": 0.5833333730697632\r\n            }, {\r\n                \"x\": 0.9200000166893005,\r\n                \"y\": 0.6166666746139526\r\n            }, {\r\n                \"x\": 0.8933333158493042,\r\n                \"y\": 0.6399999856948853\r\n            }],\r\n            [{\r\n                \"x\": 0.8933333158493042,\r\n                \"y\": 0.6399999856948853\r\n            }, {\r\n                \"x\": 0.8933333158493042,\r\n                \"y\": 0.6699999570846558\r\n            }, {\r\n                \"x\": 0.8700000047683716,\r\n                \"y\": 0.7133333683013916\r\n            }, {\r\n                \"x\": 0.8399999737739563,\r\n                \"y\": 0.7233333587646484\r\n            }, {\r\n                \"x\": 0.8633333444595337,\r\n                \"y\": 0.47333335876464844\r\n            }, {\r\n                \"x\": 0.8833333253860474,\r\n                \"y\": 0.4933333396911621\r\n            }, {\r\n                \"x\": 0.8899999856948853,\r\n                \"y\": 0.5433332920074463\r\n            }],\r\n            [{\r\n                \"x\": 0.8399999737739563,\r\n                \"y\": 0.7233333587646484\r\n            }, {\r\n                \"x\": 0.8133333325386047,\r\n                \"y\": 0.753333330154419\r\n            }, {\r\n                \"x\": 0.4933333396911621,\r\n                \"y\": 0.7699999809265137\r\n            }, {\r\n                \"x\": 0.4233333468437195,\r\n                \"y\": 0.7233333587646484\r\n            }, {\r\n                \"x\": 0.41333332657814026,\r\n                \"y\": 0.6933333277702332\r\n            }, {\r\n                \"x\": 0.41333332657814026,\r\n                \"y\": 0.3199999928474426\r\n            }, {\r\n                \"x\": 0.4399999976158142,\r\n                \"y\": 0.2900000214576721\r\n            }],\r\n            [{\r\n                \"x\": 0.4399999976158142,\r\n                \"y\": 0.2900000214576721\r\n            }, {\r\n                \"x\": 0.653333306312561,\r\n                \"y\": 0.25\r\n            }, {\r\n                \"x\": 0.7300000190734863,\r\n                \"y\": 0.2799999713897705\r\n            }, {\r\n                \"x\": 0.7933333516120911,\r\n                \"y\": 0.34333330392837524\r\n            }, {\r\n                \"x\": 0.8633333444595337,\r\n                \"y\": 0.44333332777023315\r\n            }, {\r\n                \"x\": 0.8633333444595337,\r\n                \"y\": 0.47333335876464844\r\n            }, {\r\n                \"x\": 0.8399999737739563,\r\n                \"y\": 0.7233333587646484\r\n            }],\r\n            [{\r\n                \"x\": 0.8133333325386047,\r\n                \"y\": 0.753333330154419\r\n            }, {\r\n                \"x\": 0.8366666436195374,\r\n                \"y\": 0.7799999713897705\r\n            }, {\r\n                \"x\": 0.8166666626930237,\r\n                \"y\": 0.8133333325386047\r\n            }, {\r\n                \"x\": 0.7666666507720947,\r\n                \"y\": 0.846666693687439\r\n            }, {\r\n                \"x\": 0.6966666579246521,\r\n                \"y\": 0.8666666746139526\r\n            }, {\r\n                \"x\": 0.6233333349227905,\r\n                \"y\": 0.8700000047683716\r\n            }, {\r\n                \"x\": 0.550000011920929,\r\n                \"y\": 0.8400000333786011\r\n            }, {\r\n                \"x\": 0.4933333396911621,\r\n                \"y\": 0.7699999809265137\r\n            }]\r\n        ],\r\n        \"circles\": [],\r\n        \"shapes\": [{\r\n            \"type\": \"POLYGON\",\r\n            \"vertices\": [{\r\n                \"x\": 0.6233333349227905,\r\n                \"y\": 0.8700000047683716\r\n            }, {\r\n                \"x\": 0.6966666579246521,\r\n                \"y\": 0.8666666746139526\r\n            }, {\r\n                \"x\": 0.7666666507720947,\r\n                \"y\": 0.846666693687439\r\n            }, {\r\n                \"x\": 0.8166666626930237,\r\n                \"y\": 0.8133333325386047\r\n            }, {\r\n                \"x\": 0.8366666436195374,\r\n                \"y\": 0.7799999713897705\r\n            }, {\r\n                \"x\": 0.8133333325386047,\r\n                \"y\": 0.753333330154419\r\n            }, {\r\n                \"x\": 0.8399999737739563,\r\n                \"y\": 0.7233333587646484\r\n            }, {\r\n                \"x\": 0.8700000047683716,\r\n                \"y\": 0.7133333683013916\r\n            }, {\r\n                \"x\": 0.8933333158493042,\r\n                \"y\": 0.6699999570846558\r\n            }, {\r\n                \"x\": 0.8933333158493042,\r\n                \"y\": 0.6399999856948853\r\n            }, {\r\n                \"x\": 0.9200000166893005,\r\n                \"y\": 0.6166666746139526\r\n            }, {\r\n                \"x\": 0.9300000071525574,\r\n                \"y\": 0.5833333730697632\r\n            }, {\r\n                \"x\": 0.8899999856948853,\r\n                \"y\": 0.5433332920074463\r\n            }, {\r\n                \"x\": 0.8833333253860474,\r\n                \"y\": 0.4933333396911621\r\n            }, {\r\n                \"x\": 0.8633333444595337,\r\n                \"y\": 0.47333335876464844\r\n            }, {\r\n                \"x\": 0.8633333444595337,\r\n                \"y\": 0.44333332777023315\r\n            }, {\r\n                \"x\": 0.7933333516120911,\r\n                \"y\": 0.34333330392837524\r\n            }, {\r\n                \"x\": 0.7300000190734863,\r\n                \"y\": 0.2799999713897705\r\n            }, {\r\n                \"x\": 0.653333306312561,\r\n                \"y\": 0.25\r\n            }, {\r\n                \"x\": 0.6100000143051147,\r\n                \"y\": 0.20999997854232788\r\n            }, {\r\n                \"x\": 0.5299999713897705,\r\n                \"y\": 0.19999998807907104\r\n            }, {\r\n                \"x\": 0.4833333194255829,\r\n                \"y\": 0.21333330869674683\r\n            }, {\r\n                \"x\": 0.44333332777023315,\r\n                \"y\": 0.2633333206176758\r\n            }, {\r\n                \"x\": 0.4399999976158142,\r\n                \"y\": 0.2900000214576721\r\n            }, {\r\n                \"x\": 0.41333332657814026,\r\n                \"y\": 0.3199999928474426\r\n            }, {\r\n                \"x\": 0.34333333373069763,\r\n                \"y\": 0.2799999713897705\r\n            }, {\r\n                \"x\": 0.23000000417232513,\r\n                \"y\": 0.24000000953674316\r\n            }, {\r\n                \"x\": 0.14666666090488434,\r\n                \"y\": 0.22666668891906738\r\n            }, {\r\n                \"x\": 0.09000000357627869,\r\n                \"y\": 0.23666667938232422\r\n            }, {\r\n                \"x\": 0.05999999865889549,\r\n                \"y\": 0.25999999046325684\r\n            }, {\r\n                \"x\": 0.06333333253860474,\r\n                \"y\": 0.28333336114883423\r\n            }, {\r\n                \"x\": 0.046666666865348816,\r\n                \"y\": 0.3166666626930237\r\n            }, {\r\n                \"x\": 0.046666666865348816,\r\n                \"y\": 0.3700000047683716\r\n            }, {\r\n                \"x\": 0.05999999865889549,\r\n                \"y\": 0.39666664600372314\r\n            }, {\r\n                \"x\": 0.08666666597127914,\r\n                \"y\": 0.40666669607162476\r\n            }, {\r\n                \"x\": 0.12999999523162842,\r\n                \"y\": 0.5066666603088379\r\n            }, {\r\n                \"x\": 0.15000000596046448,\r\n                \"y\": 0.5233333110809326\r\n            }, {\r\n                \"x\": 0.17666666209697723,\r\n                \"y\": 0.5800000429153442\r\n            }, {\r\n                \"x\": 0.1599999964237213,\r\n                \"y\": 0.59333336353302\r\n            }, {\r\n                \"x\": 0.15666666626930237,\r\n                \"y\": 0.6233333349227905\r\n            }, {\r\n                \"x\": 0.17666666209697723,\r\n                \"y\": 0.6466666460037231\r\n            }, {\r\n                \"x\": 0.25333333015441895,\r\n                \"y\": 0.6833333373069763\r\n            }, {\r\n                \"x\": 0.3166666626930237,\r\n                \"y\": 0.6833333373069763\r\n            }, {\r\n                \"x\": 0.3233333230018616,\r\n                \"y\": 0.7033333778381348\r\n            }, {\r\n                \"x\": 0.3499999940395355,\r\n                \"y\": 0.7133333683013916\r\n            }, {\r\n                \"x\": 0.3799999952316284,\r\n                \"y\": 0.6933333277702332\r\n            }, {\r\n                \"x\": 0.41333332657814026,\r\n                \"y\": 0.6933333277702332\r\n            }, {\r\n                \"x\": 0.4233333468437195,\r\n                \"y\": 0.7233333587646484\r\n            }, {\r\n                \"x\": 0.4933333396911621,\r\n                \"y\": 0.7699999809265137\r\n            }, {\r\n                \"x\": 0.550000011920929,\r\n                \"y\": 0.8400000333786011\r\n            }]\r\n        }]\r\n    }, {\r\n        \"name\": \"orange\",\r\n        \"imagePath\": \"../Low Poly Fruit/Low Poly Fruit/Orange.png\",\r\n        \"origin\": {\r\n            \"x\": 0,\r\n            \"y\": 0\r\n        },\r\n        \"polygons\": [\r\n            [{\r\n                \"x\": 0.46000000834465027,\r\n                \"y\": 0.8033333420753479\r\n            }, {\r\n                \"x\": 0.39666667580604553,\r\n                \"y\": 0.8166666626930237\r\n            }, {\r\n                \"x\": 0.3033333420753479,\r\n                \"y\": 0.8033333420753479\r\n            }, {\r\n                \"x\": 0.2566666603088379,\r\n                \"y\": 0.7833333015441895\r\n            }, {\r\n                \"x\": 0.18000000715255737,\r\n                \"y\": 0.7266666889190674\r\n            }, {\r\n                \"x\": 0.12333333492279053,\r\n                \"y\": 0.6633332967758179\r\n            }],\r\n            [{\r\n                \"x\": 0.12333333492279053,\r\n                \"y\": 0.6633332967758179\r\n            }, {\r\n                \"x\": 0.0833333358168602,\r\n                \"y\": 0.5900000333786011\r\n            }, {\r\n                \"x\": 0.0533333346247673,\r\n                \"y\": 0.5\r\n            }, {\r\n                \"x\": 0.046666666865348816,\r\n                \"y\": 0.40666669607162476\r\n            }, {\r\n                \"x\": 0.05999999865889549,\r\n                \"y\": 0.32999998331069946\r\n            }, {\r\n                \"x\": 0.46000000834465027,\r\n                \"y\": 0.8033333420753479\r\n            }],\r\n            [{\r\n                \"x\": 0.05999999865889549,\r\n                \"y\": 0.32999998331069946\r\n            }, {\r\n                \"x\": 0.09000000357627869,\r\n                \"y\": 0.2666666507720947\r\n            }, {\r\n                \"x\": 0.1366666704416275,\r\n                \"y\": 0.20999997854232788\r\n            }, {\r\n                \"x\": 0.18666666746139526,\r\n                \"y\": 0.17666667699813843\r\n            }, {\r\n                \"x\": 0.2633333206176758,\r\n                \"y\": 0.15333330631256104\r\n            }, {\r\n                \"x\": 0.3400000035762787,\r\n                \"y\": 0.14666664600372314\r\n            }],\r\n            [{\r\n                \"x\": 0.3400000035762787,\r\n                \"y\": 0.14666664600372314\r\n            }, {\r\n                \"x\": 0.4233333468437195,\r\n                \"y\": 0.1600000262260437\r\n            }, {\r\n                \"x\": 0.4866666793823242,\r\n                \"y\": 0.18666666746139526\r\n            }, {\r\n                \"x\": 0.5600000023841858,\r\n                \"y\": 0.23666667938232422\r\n            }, {\r\n                \"x\": 0.6033333539962769,\r\n                \"y\": 0.28333336114883423\r\n            }, {\r\n                \"x\": 0.46000000834465027,\r\n                \"y\": 0.8033333420753479\r\n            }, {\r\n                \"x\": 0.05999999865889549,\r\n                \"y\": 0.32999998331069946\r\n            }],\r\n            [{\r\n                \"x\": 0.6033333539962769,\r\n                \"y\": 0.28333336114883423\r\n            }, {\r\n                \"x\": 0.6666666865348816,\r\n                \"y\": 0.2799999713897705\r\n            }, {\r\n                \"x\": 0.7400000095367432,\r\n                \"y\": 0.29666668176651\r\n            }, {\r\n                \"x\": 0.800000011920929,\r\n                \"y\": 0.3266666531562805\r\n            }, {\r\n                \"x\": 0.8566666841506958,\r\n                \"y\": 0.3733333349227905\r\n            }],\r\n            [{\r\n                \"x\": 0.8566666841506958,\r\n                \"y\": 0.3733333349227905\r\n            }, {\r\n                \"x\": 0.9133333563804626,\r\n                \"y\": 0.4466666579246521\r\n            }, {\r\n                \"x\": 0.9433333277702332,\r\n                \"y\": 0.5233333110809326\r\n            }, {\r\n                \"x\": 0.95333331823349,\r\n                \"y\": 0.6000000238418579\r\n            }, {\r\n                \"x\": 0.9433333277702332,\r\n                \"y\": 0.6800000071525574\r\n            }, {\r\n                \"x\": 0.6033333539962769,\r\n                \"y\": 0.28333336114883423\r\n            }],\r\n            [{\r\n                \"x\": 0.9433333277702332,\r\n                \"y\": 0.6800000071525574\r\n            }, {\r\n                \"x\": 0.9233333468437195,\r\n                \"y\": 0.7266666889190674\r\n            }, {\r\n                \"x\": 0.8533333539962769,\r\n                \"y\": 0.800000011920929\r\n            }, {\r\n                \"x\": 0.7833333611488342,\r\n                \"y\": 0.8333333134651184\r\n            }, {\r\n                \"x\": 0.7099999785423279,\r\n                \"y\": 0.8500000238418579\r\n            }, {\r\n                \"x\": 0.6200000047683716,\r\n                \"y\": 0.8533333539962769\r\n            }],\r\n            [{\r\n                \"x\": 0.6200000047683716,\r\n                \"y\": 0.8533333539962769\r\n            }, {\r\n                \"x\": 0.6000000238418579,\r\n                \"y\": 0.8500000238418579\r\n            }, {\r\n                \"x\": 0.5266666412353516,\r\n                \"y\": 0.8333333134651184\r\n            }, {\r\n                \"x\": 0.46000000834465027,\r\n                \"y\": 0.8033333420753479\r\n            }, {\r\n                \"x\": 0.6033333539962769,\r\n                \"y\": 0.28333336114883423\r\n            }, {\r\n                \"x\": 0.9433333277702332,\r\n                \"y\": 0.6800000071525574\r\n            }]\r\n        ],\r\n        \"circles\": [],\r\n        \"shapes\": [{\r\n            \"type\": \"POLYGON\",\r\n            \"vertices\": [{\r\n                \"x\": 0.6200000047683716,\r\n                \"y\": 0.8533333539962769\r\n            }, {\r\n                \"x\": 0.7099999785423279,\r\n                \"y\": 0.8500000238418579\r\n            }, {\r\n                \"x\": 0.7833333611488342,\r\n                \"y\": 0.8333333134651184\r\n            }, {\r\n                \"x\": 0.8533333539962769,\r\n                \"y\": 0.800000011920929\r\n            }, {\r\n                \"x\": 0.9233333468437195,\r\n                \"y\": 0.7266666889190674\r\n            }, {\r\n                \"x\": 0.9433333277702332,\r\n                \"y\": 0.6800000071525574\r\n            }, {\r\n                \"x\": 0.95333331823349,\r\n                \"y\": 0.6000000238418579\r\n            }, {\r\n                \"x\": 0.9433333277702332,\r\n                \"y\": 0.5233333110809326\r\n            }, {\r\n                \"x\": 0.9133333563804626,\r\n                \"y\": 0.4466666579246521\r\n            }, {\r\n                \"x\": 0.8566666841506958,\r\n                \"y\": 0.3733333349227905\r\n            }, {\r\n                \"x\": 0.800000011920929,\r\n                \"y\": 0.3266666531562805\r\n            }, {\r\n                \"x\": 0.7400000095367432,\r\n                \"y\": 0.29666668176651\r\n            }, {\r\n                \"x\": 0.6666666865348816,\r\n                \"y\": 0.2799999713897705\r\n            }, {\r\n                \"x\": 0.6033333539962769,\r\n                \"y\": 0.28333336114883423\r\n            }, {\r\n                \"x\": 0.5600000023841858,\r\n                \"y\": 0.23666667938232422\r\n            }, {\r\n                \"x\": 0.4866666793823242,\r\n                \"y\": 0.18666666746139526\r\n            }, {\r\n                \"x\": 0.4233333468437195,\r\n                \"y\": 0.1600000262260437\r\n            }, {\r\n                \"x\": 0.3400000035762787,\r\n                \"y\": 0.14666664600372314\r\n            }, {\r\n                \"x\": 0.2633333206176758,\r\n                \"y\": 0.15333330631256104\r\n            }, {\r\n                \"x\": 0.18666666746139526,\r\n                \"y\": 0.17666667699813843\r\n            }, {\r\n                \"x\": 0.1366666704416275,\r\n                \"y\": 0.20999997854232788\r\n            }, {\r\n                \"x\": 0.09000000357627869,\r\n                \"y\": 0.2666666507720947\r\n            }, {\r\n                \"x\": 0.05999999865889549,\r\n                \"y\": 0.32999998331069946\r\n            }, {\r\n                \"x\": 0.046666666865348816,\r\n                \"y\": 0.40666669607162476\r\n            }, {\r\n                \"x\": 0.0533333346247673,\r\n                \"y\": 0.5\r\n            }, {\r\n                \"x\": 0.0833333358168602,\r\n                \"y\": 0.5900000333786011\r\n            }, {\r\n                \"x\": 0.12333333492279053,\r\n                \"y\": 0.6633332967758179\r\n            }, {\r\n                \"x\": 0.18000000715255737,\r\n                \"y\": 0.7266666889190674\r\n            }, {\r\n                \"x\": 0.2566666603088379,\r\n                \"y\": 0.7833333015441895\r\n            }, {\r\n                \"x\": 0.3033333420753479,\r\n                \"y\": 0.8033333420753479\r\n            }, {\r\n                \"x\": 0.39666667580604553,\r\n                \"y\": 0.8166666626930237\r\n            }, {\r\n                \"x\": 0.46000000834465027,\r\n                \"y\": 0.8033333420753479\r\n            }, {\r\n                \"x\": 0.5266666412353516,\r\n                \"y\": 0.8333333134651184\r\n            }, {\r\n                \"x\": 0.6000000238418579,\r\n                \"y\": 0.8500000238418579\r\n            }]\r\n        }]\r\n    }, {\r\n        \"name\": \"peach\",\r\n        \"imagePath\": \"../Low Poly Fruit/Low Poly Fruit/Peach.png\",\r\n        \"origin\": {\r\n            \"x\": 0,\r\n            \"y\": 0\r\n        },\r\n        \"polygons\": [\r\n            [{\r\n                \"x\": 0.43666666746139526,\r\n                \"y\": 0.23333334922790527\r\n            }, {\r\n                \"x\": 0.5,\r\n                \"y\": 0.18666666746139526\r\n            }, {\r\n                \"x\": 0.6566666960716248,\r\n                \"y\": 0.18000000715255737\r\n            }, {\r\n                \"x\": 0.7066666483879089,\r\n                \"y\": 0.1899999976158142\r\n            }, {\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.23333334922790527\r\n            }, {\r\n                \"x\": 0.846666693687439,\r\n                \"y\": 0.2900000214576721\r\n            }, {\r\n                \"x\": 0.8766666650772095,\r\n                \"y\": 0.3500000238418579\r\n            }],\r\n            [{\r\n                \"x\": 0.8766666650772095,\r\n                \"y\": 0.3500000238418579\r\n            }, {\r\n                \"x\": 0.8866666555404663,\r\n                \"y\": 0.4300000071525574\r\n            }, {\r\n                \"x\": 0.8500000238418579,\r\n                \"y\": 0.5299999713897705\r\n            }, {\r\n                \"x\": 0.800000011920929,\r\n                \"y\": 0.6166666746139526\r\n            }, {\r\n                \"x\": 0.746666669845581,\r\n                \"y\": 0.6433333158493042\r\n            }, {\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.6666666269302368\r\n            }, {\r\n                \"x\": 0.43666666746139526,\r\n                \"y\": 0.23333334922790527\r\n            }],\r\n            [{\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.6666666269302368\r\n            }, {\r\n                \"x\": 0.41999998688697815,\r\n                \"y\": 0.7566666603088379\r\n            }, {\r\n                \"x\": 0.3466666638851166,\r\n                \"y\": 0.7733333110809326\r\n            }, {\r\n                \"x\": 0.2933333218097687,\r\n                \"y\": 0.7599999904632568\r\n            }, {\r\n                \"x\": 0.24666666984558105,\r\n                \"y\": 0.7333333492279053\r\n            }, {\r\n                \"x\": 0.19333332777023315,\r\n                \"y\": 0.6766666769981384\r\n            }, {\r\n                \"x\": 0.15333333611488342,\r\n                \"y\": 0.6066666841506958\r\n            }, {\r\n                \"x\": 0.1366666704416275,\r\n                \"y\": 0.5466666221618652\r\n            }],\r\n            [{\r\n                \"x\": 0.1366666704416275,\r\n                \"y\": 0.5466666221618652\r\n            }, {\r\n                \"x\": 0.13333334028720856,\r\n                \"y\": 0.46666663885116577\r\n            }, {\r\n                \"x\": 0.15000000596046448,\r\n                \"y\": 0.3700000047683716\r\n            }, {\r\n                \"x\": 0.18666666746139526,\r\n                \"y\": 0.30000001192092896\r\n            }, {\r\n                \"x\": 0.23999999463558197,\r\n                \"y\": 0.24666666984558105\r\n            }],\r\n            [{\r\n                \"x\": 0.23999999463558197,\r\n                \"y\": 0.24666666984558105\r\n            }, {\r\n                \"x\": 0.30000001192092896,\r\n                \"y\": 0.2200000286102295\r\n            }, {\r\n                \"x\": 0.36000001430511475,\r\n                \"y\": 0.21666663885116577\r\n            }, {\r\n                \"x\": 0.43666666746139526,\r\n                \"y\": 0.23333334922790527\r\n            }, {\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.6666666269302368\r\n            }, {\r\n                \"x\": 0.1366666704416275,\r\n                \"y\": 0.5466666221618652\r\n            }],\r\n            [{\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.6666666269302368\r\n            }, {\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.6866666674613953\r\n            }, {\r\n                \"x\": 0.47999998927116394,\r\n                \"y\": 0.7733333110809326\r\n            }, {\r\n                \"x\": 0.44999998807907104,\r\n                \"y\": 0.7766666412353516\r\n            }, {\r\n                \"x\": 0.41999998688697815,\r\n                \"y\": 0.7566666603088379\r\n            }],\r\n            [{\r\n                \"x\": 0.6933333277702332,\r\n                \"y\": 0.7933333516120911\r\n            }, {\r\n                \"x\": 0.6800000071525574,\r\n                \"y\": 0.8166666626930237\r\n            }, {\r\n                \"x\": 0.5899999737739563,\r\n                \"y\": 0.8199999928474426\r\n            }, {\r\n                \"x\": 0.5333333611488342,\r\n                \"y\": 0.8033333420753479\r\n            }],\r\n            [{\r\n                \"x\": 0.5333333611488342,\r\n                \"y\": 0.8033333420753479\r\n            }, {\r\n                \"x\": 0.47999998927116394,\r\n                \"y\": 0.7733333110809326\r\n            }, {\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.6866666674613953\r\n            }, {\r\n                \"x\": 0.6766666769981384,\r\n                \"y\": 0.6966666579246521\r\n            }, {\r\n                \"x\": 0.7433333396911621,\r\n                \"y\": 0.7433333396911621\r\n            }, {\r\n                \"x\": 0.75,\r\n                \"y\": 0.7733333110809326\r\n            }, {\r\n                \"x\": 0.7333333492279053,\r\n                \"y\": 0.7900000214576721\r\n            }, {\r\n                \"x\": 0.6933333277702332,\r\n                \"y\": 0.7933333516120911\r\n            }]\r\n        ],\r\n        \"circles\": [],\r\n        \"shapes\": [{\r\n            \"type\": \"POLYGON\",\r\n            \"vertices\": [{\r\n                \"x\": 0.5899999737739563,\r\n                \"y\": 0.8199999928474426\r\n            }, {\r\n                \"x\": 0.6800000071525574,\r\n                \"y\": 0.8166666626930237\r\n            }, {\r\n                \"x\": 0.6933333277702332,\r\n                \"y\": 0.7933333516120911\r\n            }, {\r\n                \"x\": 0.7333333492279053,\r\n                \"y\": 0.7900000214576721\r\n            }, {\r\n                \"x\": 0.75,\r\n                \"y\": 0.7733333110809326\r\n            }, {\r\n                \"x\": 0.7433333396911621,\r\n                \"y\": 0.7433333396911621\r\n            }, {\r\n                \"x\": 0.6766666769981384,\r\n                \"y\": 0.6966666579246521\r\n            }, {\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.6866666674613953\r\n            }, {\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.6666666269302368\r\n            }, {\r\n                \"x\": 0.746666669845581,\r\n                \"y\": 0.6433333158493042\r\n            }, {\r\n                \"x\": 0.800000011920929,\r\n                \"y\": 0.6166666746139526\r\n            }, {\r\n                \"x\": 0.8500000238418579,\r\n                \"y\": 0.5299999713897705\r\n            }, {\r\n                \"x\": 0.8866666555404663,\r\n                \"y\": 0.4300000071525574\r\n            }, {\r\n                \"x\": 0.8766666650772095,\r\n                \"y\": 0.3500000238418579\r\n            }, {\r\n                \"x\": 0.846666693687439,\r\n                \"y\": 0.2900000214576721\r\n            }, {\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.23333334922790527\r\n            }, {\r\n                \"x\": 0.7066666483879089,\r\n                \"y\": 0.1899999976158142\r\n            }, {\r\n                \"x\": 0.6566666960716248,\r\n                \"y\": 0.18000000715255737\r\n            }, {\r\n                \"x\": 0.5,\r\n                \"y\": 0.18666666746139526\r\n            }, {\r\n                \"x\": 0.43666666746139526,\r\n                \"y\": 0.23333334922790527\r\n            }, {\r\n                \"x\": 0.36000001430511475,\r\n                \"y\": 0.21666663885116577\r\n            }, {\r\n                \"x\": 0.30000001192092896,\r\n                \"y\": 0.2200000286102295\r\n            }, {\r\n                \"x\": 0.23999999463558197,\r\n                \"y\": 0.24666666984558105\r\n            }, {\r\n                \"x\": 0.18666666746139526,\r\n                \"y\": 0.30000001192092896\r\n            }, {\r\n                \"x\": 0.15000000596046448,\r\n                \"y\": 0.3700000047683716\r\n            }, {\r\n                \"x\": 0.13333334028720856,\r\n                \"y\": 0.46666663885116577\r\n            }, {\r\n                \"x\": 0.1366666704416275,\r\n                \"y\": 0.5466666221618652\r\n            }, {\r\n                \"x\": 0.15333333611488342,\r\n                \"y\": 0.6066666841506958\r\n            }, {\r\n                \"x\": 0.19333332777023315,\r\n                \"y\": 0.6766666769981384\r\n            }, {\r\n                \"x\": 0.24666666984558105,\r\n                \"y\": 0.7333333492279053\r\n            }, {\r\n                \"x\": 0.2933333218097687,\r\n                \"y\": 0.7599999904632568\r\n            }, {\r\n                \"x\": 0.3466666638851166,\r\n                \"y\": 0.7733333110809326\r\n            }, {\r\n                \"x\": 0.41999998688697815,\r\n                \"y\": 0.7566666603088379\r\n            }, {\r\n                \"x\": 0.44999998807907104,\r\n                \"y\": 0.7766666412353516\r\n            }, {\r\n                \"x\": 0.47999998927116394,\r\n                \"y\": 0.7733333110809326\r\n            }, {\r\n                \"x\": 0.5333333611488342,\r\n                \"y\": 0.8033333420753479\r\n            }]\r\n        }]\r\n    }, {\r\n        \"name\": \"pear\",\r\n        \"imagePath\": \"../Low Poly Fruit/Low Poly Fruit/Pear.png\",\r\n        \"origin\": {\r\n            \"x\": 0,\r\n            \"y\": 0\r\n        },\r\n        \"polygons\": [\r\n            [{\r\n                \"x\": 0.30000001192092896,\r\n                \"y\": 0.7933333516120911\r\n            }, {\r\n                \"x\": 0.25333333015441895,\r\n                \"y\": 0.746666669845581\r\n            }, {\r\n                \"x\": 0.23999999463558197,\r\n                \"y\": 0.6766666769981384\r\n            }, {\r\n                \"x\": 0.2433333396911621,\r\n                \"y\": 0.5133333206176758\r\n            }],\r\n            [{\r\n                \"x\": 0.2433333396911621,\r\n                \"y\": 0.5133333206176758\r\n            }, {\r\n                \"x\": 0.2133333384990692,\r\n                \"y\": 0.3766666650772095\r\n            }, {\r\n                \"x\": 0.2133333384990692,\r\n                \"y\": 0.2866666913032532\r\n            }, {\r\n                \"x\": 0.23333333432674408,\r\n                \"y\": 0.20999997854232788\r\n            }, {\r\n                \"x\": 0.2666666805744171,\r\n                \"y\": 0.14666664600372314\r\n            }, {\r\n                \"x\": 0.3100000023841858,\r\n                \"y\": 0.10333335399627686\r\n            }],\r\n            [{\r\n                \"x\": 0.3100000023841858,\r\n                \"y\": 0.10333335399627686\r\n            }, {\r\n                \"x\": 0.3799999952316284,\r\n                \"y\": 0.06333333253860474\r\n            }, {\r\n                \"x\": 0.46666666865348816,\r\n                \"y\": 0.036666691303253174\r\n            }, {\r\n                \"x\": 0.550000011920929,\r\n                \"y\": 0.03333336114883423\r\n            }, {\r\n                \"x\": 0.6333333253860474,\r\n                \"y\": 0.050000011920928955\r\n            }, {\r\n                \"x\": 0.2433333396911621,\r\n                \"y\": 0.5133333206176758\r\n            }],\r\n            [{\r\n                \"x\": 0.6333333253860474,\r\n                \"y\": 0.050000011920928955\r\n            }, {\r\n                \"x\": 0.7233333587646484,\r\n                \"y\": 0.09666669368743896\r\n            }, {\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.1600000262260437\r\n            }, {\r\n                \"x\": 0.8333333134651184,\r\n                \"y\": 0.22666668891906738\r\n            }, {\r\n                \"x\": 0.8500000238418579,\r\n                \"y\": 0.30000001192092896\r\n            }, {\r\n                \"x\": 0.8533333539962769,\r\n                \"y\": 0.3766666650772095\r\n            }],\r\n            [{\r\n                \"x\": 0.8533333539962769,\r\n                \"y\": 0.3766666650772095\r\n            }, {\r\n                \"x\": 0.8399999737739563,\r\n                \"y\": 0.4466666579246521\r\n            }, {\r\n                \"x\": 0.8066666722297668,\r\n                \"y\": 0.5233333110809326\r\n            }, {\r\n                \"x\": 0.7566666603088379,\r\n                \"y\": 0.596666693687439\r\n            }, {\r\n                \"x\": 0.596666693687439,\r\n                \"y\": 0.7300000190734863\r\n            }, {\r\n                \"x\": 0.2433333396911621,\r\n                \"y\": 0.5133333206176758\r\n            }, {\r\n                \"x\": 0.6333333253860474,\r\n                \"y\": 0.050000011920928955\r\n            }],\r\n            [{\r\n                \"x\": 0.596666693687439,\r\n                \"y\": 0.7300000190734863\r\n            }, {\r\n                \"x\": 0.54666668176651,\r\n                \"y\": 0.800000011920929\r\n            }, {\r\n                \"x\": 0.4833333194255829,\r\n                \"y\": 0.846666693687439\r\n            }, {\r\n                \"x\": 0.4399999976158142,\r\n                \"y\": 0.8600000143051147\r\n            }, {\r\n                \"x\": 0.3700000047683716,\r\n                \"y\": 0.8600000143051147\r\n            }, {\r\n                \"x\": 0.30666667222976685,\r\n                \"y\": 0.8199999928474426\r\n            }, {\r\n                \"x\": 0.30000001192092896,\r\n                \"y\": 0.7933333516120911\r\n            }, {\r\n                \"x\": 0.2433333396911621,\r\n                \"y\": 0.5133333206176758\r\n            }],\r\n            [{\r\n                \"x\": 0.3499999940395355,\r\n                \"y\": 0.8966666460037231\r\n            }, {\r\n                \"x\": 0.3499999940395355,\r\n                \"y\": 0.9266666769981384\r\n            }, {\r\n                \"x\": 0.33000001311302185,\r\n                \"y\": 0.95333331823349\r\n            }, {\r\n                \"x\": 0.3033333420753479,\r\n                \"y\": 0.9566666483879089\r\n            }],\r\n            [{\r\n                \"x\": 0.3033333420753479,\r\n                \"y\": 0.9566666483879089\r\n            }, {\r\n                \"x\": 0.28999999165534973,\r\n                \"y\": 0.949999988079071\r\n            }, {\r\n                \"x\": 0.273333340883255,\r\n                \"y\": 0.9300000071525574\r\n            }, {\r\n                \"x\": 0.273333340883255,\r\n                \"y\": 0.8933333158493042\r\n            }, {\r\n                \"x\": 0.30666667222976685,\r\n                \"y\": 0.8199999928474426\r\n            }, {\r\n                \"x\": 0.3700000047683716,\r\n                \"y\": 0.8600000143051147\r\n            }, {\r\n                \"x\": 0.3499999940395355,\r\n                \"y\": 0.8966666460037231\r\n            }]\r\n        ],\r\n        \"circles\": [],\r\n        \"shapes\": [{\r\n            \"type\": \"POLYGON\",\r\n            \"vertices\": [{\r\n                \"x\": 0.3033333420753479,\r\n                \"y\": 0.9566666483879089\r\n            }, {\r\n                \"x\": 0.33000001311302185,\r\n                \"y\": 0.95333331823349\r\n            }, {\r\n                \"x\": 0.3499999940395355,\r\n                \"y\": 0.9266666769981384\r\n            }, {\r\n                \"x\": 0.3499999940395355,\r\n                \"y\": 0.8966666460037231\r\n            }, {\r\n                \"x\": 0.3700000047683716,\r\n                \"y\": 0.8600000143051147\r\n            }, {\r\n                \"x\": 0.4399999976158142,\r\n                \"y\": 0.8600000143051147\r\n            }, {\r\n                \"x\": 0.4833333194255829,\r\n                \"y\": 0.846666693687439\r\n            }, {\r\n                \"x\": 0.54666668176651,\r\n                \"y\": 0.800000011920929\r\n            }, {\r\n                \"x\": 0.596666693687439,\r\n                \"y\": 0.7300000190734863\r\n            }, {\r\n                \"x\": 0.7566666603088379,\r\n                \"y\": 0.596666693687439\r\n            }, {\r\n                \"x\": 0.8066666722297668,\r\n                \"y\": 0.5233333110809326\r\n            }, {\r\n                \"x\": 0.8399999737739563,\r\n                \"y\": 0.4466666579246521\r\n            }, {\r\n                \"x\": 0.8533333539962769,\r\n                \"y\": 0.3766666650772095\r\n            }, {\r\n                \"x\": 0.8500000238418579,\r\n                \"y\": 0.30000001192092896\r\n            }, {\r\n                \"x\": 0.8333333134651184,\r\n                \"y\": 0.22666668891906738\r\n            }, {\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.1600000262260437\r\n            }, {\r\n                \"x\": 0.7233333587646484,\r\n                \"y\": 0.09666669368743896\r\n            }, {\r\n                \"x\": 0.6333333253860474,\r\n                \"y\": 0.050000011920928955\r\n            }, {\r\n                \"x\": 0.550000011920929,\r\n                \"y\": 0.03333336114883423\r\n            }, {\r\n                \"x\": 0.46666666865348816,\r\n                \"y\": 0.036666691303253174\r\n            }, {\r\n                \"x\": 0.3799999952316284,\r\n                \"y\": 0.06333333253860474\r\n            }, {\r\n                \"x\": 0.3100000023841858,\r\n                \"y\": 0.10333335399627686\r\n            }, {\r\n                \"x\": 0.2666666805744171,\r\n                \"y\": 0.14666664600372314\r\n            }, {\r\n                \"x\": 0.23333333432674408,\r\n                \"y\": 0.20999997854232788\r\n            }, {\r\n                \"x\": 0.2133333384990692,\r\n                \"y\": 0.2866666913032532\r\n            }, {\r\n                \"x\": 0.2133333384990692,\r\n                \"y\": 0.3766666650772095\r\n            }, {\r\n                \"x\": 0.2433333396911621,\r\n                \"y\": 0.5133333206176758\r\n            }, {\r\n                \"x\": 0.23999999463558197,\r\n                \"y\": 0.6766666769981384\r\n            }, {\r\n                \"x\": 0.25333333015441895,\r\n                \"y\": 0.746666669845581\r\n            }, {\r\n                \"x\": 0.30000001192092896,\r\n                \"y\": 0.7933333516120911\r\n            }, {\r\n                \"x\": 0.30666667222976685,\r\n                \"y\": 0.8199999928474426\r\n            }, {\r\n                \"x\": 0.273333340883255,\r\n                \"y\": 0.8933333158493042\r\n            }, {\r\n                \"x\": 0.273333340883255,\r\n                \"y\": 0.9300000071525574\r\n            }, {\r\n                \"x\": 0.28999999165534973,\r\n                \"y\": 0.949999988079071\r\n            }]\r\n        }]\r\n    }, {\r\n        \"name\": \"pineapple\",\r\n        \"imagePath\": \"../Low Poly Fruit/Low Poly Fruit/Pineapple.png\",\r\n        \"origin\": {\r\n            \"x\": 0,\r\n            \"y\": 0\r\n        },\r\n        \"polygons\": [\r\n            [{\r\n                \"x\": 0.18666666746139526,\r\n                \"y\": 0.7400000095367432\r\n            }, {\r\n                \"x\": 0.09666666388511658,\r\n                \"y\": 0.7200000286102295\r\n            }, {\r\n                \"x\": 0.08666666597127914,\r\n                \"y\": 0.6966666579246521\r\n            }, {\r\n                \"x\": 0.10000000149011612,\r\n                \"y\": 0.6766666769981384\r\n            }, {\r\n                \"x\": 0.13333334028720856,\r\n                \"y\": 0.6699999570846558\r\n            }, {\r\n                \"x\": 0.2136428952217102,\r\n                \"y\": 0.7369246482849121\r\n            }],\r\n            [{\r\n                \"x\": 0.2933333218097687,\r\n                \"y\": 0.8033333420753479\r\n            }, {\r\n                \"x\": 0.17666666209697723,\r\n                \"y\": 0.8333333134651184\r\n            }, {\r\n                \"x\": 0.14000000059604645,\r\n                \"y\": 0.8266666531562805\r\n            }, {\r\n                \"x\": 0.15000000596046448,\r\n                \"y\": 0.7866666316986084\r\n            }, {\r\n                \"x\": 0.18666666746139526,\r\n                \"y\": 0.7400000095367432\r\n            }, {\r\n                \"x\": 0.2136428952217102,\r\n                \"y\": 0.7369246482849121\r\n            }],\r\n            [{\r\n                \"x\": 0.14000000059604645,\r\n                \"y\": 0.6299999952316284\r\n            }, {\r\n                \"x\": 0.09666666388511658,\r\n                \"y\": 0.5900000333786011\r\n            }, {\r\n                \"x\": 0.10000000149011612,\r\n                \"y\": 0.5733333230018616\r\n            }, {\r\n                \"x\": 0.12666666507720947,\r\n                \"y\": 0.5633333325386047\r\n            }, {\r\n                \"x\": 0.20999999344348907,\r\n                \"y\": 0.5800000429153442\r\n            }],\r\n            [{\r\n                \"x\": 0.6899999976158142,\r\n                \"y\": 0.5133333206176758\r\n            }, {\r\n                \"x\": 0.6766666769981384,\r\n                \"y\": 0.5433332920074463\r\n            }, {\r\n                \"x\": 0.3400000035762787,\r\n                \"y\": 0.4466666579246521\r\n            }, {\r\n                \"x\": 0.36666667461395264,\r\n                \"y\": 0.23666667938232422\r\n            }, {\r\n                \"x\": 0.39666667580604553,\r\n                \"y\": 0.17000001668930054\r\n            }, {\r\n                \"x\": 0.44999998807907104,\r\n                \"y\": 0.11000001430511475\r\n            }, {\r\n                \"x\": 0.5133333206176758,\r\n                \"y\": 0.06999999284744263\r\n            }],\r\n            [{\r\n                \"x\": 0.5133333206176758,\r\n                \"y\": 0.06999999284744263\r\n            }, {\r\n                \"x\": 0.5899999737739563,\r\n                \"y\": 0.056666672229766846\r\n            }, {\r\n                \"x\": 0.6566666960716248,\r\n                \"y\": 0.06666666269302368\r\n            }, {\r\n                \"x\": 0.70333331823349,\r\n                \"y\": 0.0899999737739563\r\n            }, {\r\n                \"x\": 0.75,\r\n                \"y\": 0.13999998569488525\r\n            }, {\r\n                \"x\": 0.7766666412353516,\r\n                \"y\": 0.19999998807907104\r\n            }, {\r\n                \"x\": 0.6899999976158142,\r\n                \"y\": 0.5133333206176758\r\n            }],\r\n            [{\r\n                \"x\": 0.7766666412353516,\r\n                \"y\": 0.19999998807907104\r\n            }, {\r\n                \"x\": 0.7933333516120911,\r\n                \"y\": 0.2900000214576721\r\n            }, {\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.3566666841506958\r\n            }, {\r\n                \"x\": 0.7699999809265137,\r\n                \"y\": 0.4166666865348816\r\n            }, {\r\n                \"x\": 0.7233333587646484,\r\n                \"y\": 0.4866666793823242\r\n            }, {\r\n                \"x\": 0.6899999976158142,\r\n                \"y\": 0.5133333206176758\r\n            }],\r\n            [{\r\n                \"x\": 0.6766666769981384,\r\n                \"y\": 0.5433332920074463\r\n            }, {\r\n                \"x\": 0.6966666579246521,\r\n                \"y\": 0.5333333015441895\r\n            }, {\r\n                \"x\": 0.7200000286102295,\r\n                \"y\": 0.5399999618530273\r\n            }, {\r\n                \"x\": 0.7200000286102295,\r\n                \"y\": 0.5699999928474426\r\n            }, {\r\n                \"x\": 0.699999988079071,\r\n                \"y\": 0.6000000238418579\r\n            }],\r\n            [{\r\n                \"x\": 0.699999988079071,\r\n                \"y\": 0.6000000238418579\r\n            }, {\r\n                \"x\": 0.7366666793823242,\r\n                \"y\": 0.6066666841506958\r\n            }, {\r\n                \"x\": 0.7366666793823242,\r\n                \"y\": 0.6333333253860474\r\n            }, {\r\n                \"x\": 0.7066666483879089,\r\n                \"y\": 0.6666666269302368\r\n            }],\r\n            [{\r\n                \"x\": 0.7066666483879089,\r\n                \"y\": 0.6666666269302368\r\n            }, {\r\n                \"x\": 0.7200000286102295,\r\n                \"y\": 0.6899999976158142\r\n            }, {\r\n                \"x\": 0.6966666579246521,\r\n                \"y\": 0.7133333683013916\r\n            }],\r\n            [{\r\n                \"x\": 0.6966666579246521,\r\n                \"y\": 0.7133333683013916\r\n            }, {\r\n                \"x\": 0.6466666460037231,\r\n                \"y\": 0.7266666889190674\r\n            }, {\r\n                \"x\": 0.3233333230018616,\r\n                \"y\": 0.47333335876464844\r\n            }, {\r\n                \"x\": 0.3400000035762787,\r\n                \"y\": 0.4466666579246521\r\n            }, {\r\n                \"x\": 0.6766666769981384,\r\n                \"y\": 0.5433332920074463\r\n            }, {\r\n                \"x\": 0.699999988079071,\r\n                \"y\": 0.6000000238418579\r\n            }, {\r\n                \"x\": 0.7066666483879089,\r\n                \"y\": 0.6666666269302368\r\n            }],\r\n            [{\r\n                \"x\": 0.5733333230018616,\r\n                \"y\": 0.90666663646698\r\n            }, {\r\n                \"x\": 0.5666666626930237,\r\n                \"y\": 0.9399999976158142\r\n            }, {\r\n                \"x\": 0.5433333516120911,\r\n                \"y\": 0.9399999976158142\r\n            }, {\r\n                \"x\": 0.4933333396911621,\r\n                \"y\": 0.8933333158493042\r\n            }],\r\n            [{\r\n                \"x\": 0.4933333396911621,\r\n                \"y\": 0.8933333158493042\r\n            }, {\r\n                \"x\": 0.6000000238418579,\r\n                \"y\": 0.8133333325386047\r\n            }, {\r\n                \"x\": 0.6166666746139526,\r\n                \"y\": 0.8899999856948853\r\n            }, {\r\n                \"x\": 0.6033333539962769,\r\n                \"y\": 0.90666663646698\r\n            }, {\r\n                \"x\": 0.5733333230018616,\r\n                \"y\": 0.90666663646698\r\n            }],\r\n            [{\r\n                \"x\": 0.4933333396911621,\r\n                \"y\": 0.8933333158493042\r\n            }, {\r\n                \"x\": 0.23999999463558197,\r\n                \"y\": 0.5733333230018616\r\n            }, {\r\n                \"x\": 0.21666666865348816,\r\n                \"y\": 0.5333333015441895\r\n            }, {\r\n                \"x\": 0.20999999344348907,\r\n                \"y\": 0.46666663885116577\r\n            }, {\r\n                \"x\": 0.22333332896232605,\r\n                \"y\": 0.4399999976158142\r\n            }],\r\n            [{\r\n                \"x\": 0.22333332896232605,\r\n                \"y\": 0.4399999976158142\r\n            }, {\r\n                \"x\": 0.27000001072883606,\r\n                \"y\": 0.44333332777023315\r\n            }, {\r\n                \"x\": 0.3233333230018616,\r\n                \"y\": 0.47333335876464844\r\n            }, {\r\n                \"x\": 0.6100000143051147,\r\n                \"y\": 0.7866666316986084\r\n            }, {\r\n                \"x\": 0.6000000238418579,\r\n                \"y\": 0.8133333325386047\r\n            }, {\r\n                \"x\": 0.4933333396911621,\r\n                \"y\": 0.8933333158493042\r\n            }],\r\n            [{\r\n                \"x\": 0.3233333230018616,\r\n                \"y\": 0.47333335876464844\r\n            }, {\r\n                \"x\": 0.6466666460037231,\r\n                \"y\": 0.7266666889190674\r\n            }, {\r\n                \"x\": 0.6700000166893005,\r\n                \"y\": 0.7666666507720947\r\n            }, {\r\n                \"x\": 0.6666666865348816,\r\n                \"y\": 0.7933333516120911\r\n            }, {\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.800000011920929\r\n            }, {\r\n                \"x\": 0.6100000143051147,\r\n                \"y\": 0.7866666316986084\r\n            }],\r\n            [{\r\n                \"x\": 0.4933333396911621,\r\n                \"y\": 0.8933333158493042\r\n            }, {\r\n                \"x\": 0.3100000023841858,\r\n                \"y\": 0.8133333325386047\r\n            }, {\r\n                \"x\": 0.2933333218097687,\r\n                \"y\": 0.8033333420753479\r\n            }, {\r\n                \"x\": 0.13333334028720856,\r\n                \"y\": 0.6699999570846558\r\n            }, {\r\n                \"x\": 0.14000000059604645,\r\n                \"y\": 0.6299999952316284\r\n            }, {\r\n                \"x\": 0.20999999344348907,\r\n                \"y\": 0.5800000429153442\r\n            }, {\r\n                \"x\": 0.23999999463558197,\r\n                \"y\": 0.5733333230018616\r\n            }],\r\n            [{\r\n                \"x\": 0.41333332657814026,\r\n                \"y\": 0.9200000166893005\r\n            }, {\r\n                \"x\": 0.3400000035762787,\r\n                \"y\": 0.9366666674613953\r\n            }, {\r\n                \"x\": 0.3166666626930237,\r\n                \"y\": 0.9366666674613953\r\n            }, {\r\n                \"x\": 0.3033333420753479,\r\n                \"y\": 0.8766666650772095\r\n            }, {\r\n                \"x\": 0.3100000023841858,\r\n                \"y\": 0.8133333325386047\r\n            }, {\r\n                \"x\": 0.4933333396911621,\r\n                \"y\": 0.8933333158493042\r\n            }],\r\n            [{\r\n                \"x\": 0.4933333396911621,\r\n                \"y\": 0.8933333158493042\r\n            }, {\r\n                \"x\": 0.4866666793823242,\r\n                \"y\": 0.949999988079071\r\n            }, {\r\n                \"x\": 0.4633333384990692,\r\n                \"y\": 0.9633333086967468\r\n            }, {\r\n                \"x\": 0.43666666746139526,\r\n                \"y\": 0.9566666483879089\r\n            }, {\r\n                \"x\": 0.41333332657814026,\r\n                \"y\": 0.9200000166893005\r\n            }],\r\n            [{\r\n                \"x\": 0.41333332657814026,\r\n                \"y\": 0.9200000166893005\r\n            }, {\r\n                \"x\": 0.3799999952316284,\r\n                \"y\": 0.9700000286102295\r\n            }, {\r\n                \"x\": 0.3566666543483734,\r\n                \"y\": 0.9700000286102295\r\n            }, {\r\n                \"x\": 0.3466666638851166,\r\n                \"y\": 0.9599999785423279\r\n            }, {\r\n                \"x\": 0.3400000035762787,\r\n                \"y\": 0.9366666674613953\r\n            }]\r\n        ],\r\n        \"circles\": [],\r\n        \"shapes\": [{\r\n            \"type\": \"POLYGON\",\r\n            \"vertices\": [{\r\n                \"x\": 0.3566666543483734,\r\n                \"y\": 0.9700000286102295\r\n            }, {\r\n                \"x\": 0.3799999952316284,\r\n                \"y\": 0.9700000286102295\r\n            }, {\r\n                \"x\": 0.41333332657814026,\r\n                \"y\": 0.9200000166893005\r\n            }, {\r\n                \"x\": 0.43666666746139526,\r\n                \"y\": 0.9566666483879089\r\n            }, {\r\n                \"x\": 0.4633333384990692,\r\n                \"y\": 0.9633333086967468\r\n            }, {\r\n                \"x\": 0.4866666793823242,\r\n                \"y\": 0.949999988079071\r\n            }, {\r\n                \"x\": 0.4933333396911621,\r\n                \"y\": 0.8933333158493042\r\n            }, {\r\n                \"x\": 0.5433333516120911,\r\n                \"y\": 0.9399999976158142\r\n            }, {\r\n                \"x\": 0.5666666626930237,\r\n                \"y\": 0.9399999976158142\r\n            }, {\r\n                \"x\": 0.5733333230018616,\r\n                \"y\": 0.90666663646698\r\n            }, {\r\n                \"x\": 0.6033333539962769,\r\n                \"y\": 0.90666663646698\r\n            }, {\r\n                \"x\": 0.6166666746139526,\r\n                \"y\": 0.8899999856948853\r\n            }, {\r\n                \"x\": 0.6000000238418579,\r\n                \"y\": 0.8133333325386047\r\n            }, {\r\n                \"x\": 0.6100000143051147,\r\n                \"y\": 0.7866666316986084\r\n            }, {\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.800000011920929\r\n            }, {\r\n                \"x\": 0.6666666865348816,\r\n                \"y\": 0.7933333516120911\r\n            }, {\r\n                \"x\": 0.6700000166893005,\r\n                \"y\": 0.7666666507720947\r\n            }, {\r\n                \"x\": 0.6466666460037231,\r\n                \"y\": 0.7266666889190674\r\n            }, {\r\n                \"x\": 0.6966666579246521,\r\n                \"y\": 0.7133333683013916\r\n            }, {\r\n                \"x\": 0.7200000286102295,\r\n                \"y\": 0.6899999976158142\r\n            }, {\r\n                \"x\": 0.7066666483879089,\r\n                \"y\": 0.6666666269302368\r\n            }, {\r\n                \"x\": 0.7366666793823242,\r\n                \"y\": 0.6333333253860474\r\n            }, {\r\n                \"x\": 0.7366666793823242,\r\n                \"y\": 0.6066666841506958\r\n            }, {\r\n                \"x\": 0.699999988079071,\r\n                \"y\": 0.6000000238418579\r\n            }, {\r\n                \"x\": 0.7200000286102295,\r\n                \"y\": 0.5699999928474426\r\n            }, {\r\n                \"x\": 0.7200000286102295,\r\n                \"y\": 0.5399999618530273\r\n            }, {\r\n                \"x\": 0.6966666579246521,\r\n                \"y\": 0.5333333015441895\r\n            }, {\r\n                \"x\": 0.6766666769981384,\r\n                \"y\": 0.5433332920074463\r\n            }, {\r\n                \"x\": 0.6899999976158142,\r\n                \"y\": 0.5133333206176758\r\n            }, {\r\n                \"x\": 0.7233333587646484,\r\n                \"y\": 0.4866666793823242\r\n            }, {\r\n                \"x\": 0.7699999809265137,\r\n                \"y\": 0.4166666865348816\r\n            }, {\r\n                \"x\": 0.7900000214576721,\r\n                \"y\": 0.3566666841506958\r\n            }, {\r\n                \"x\": 0.7933333516120911,\r\n                \"y\": 0.2900000214576721\r\n            }, {\r\n                \"x\": 0.7766666412353516,\r\n                \"y\": 0.19999998807907104\r\n            }, {\r\n                \"x\": 0.75,\r\n                \"y\": 0.13999998569488525\r\n            }, {\r\n                \"x\": 0.70333331823349,\r\n                \"y\": 0.0899999737739563\r\n            }, {\r\n                \"x\": 0.6566666960716248,\r\n                \"y\": 0.06666666269302368\r\n            }, {\r\n                \"x\": 0.5899999737739563,\r\n                \"y\": 0.056666672229766846\r\n            }, {\r\n                \"x\": 0.5133333206176758,\r\n                \"y\": 0.06999999284744263\r\n            }, {\r\n                \"x\": 0.44999998807907104,\r\n                \"y\": 0.11000001430511475\r\n            }, {\r\n                \"x\": 0.39666667580604553,\r\n                \"y\": 0.17000001668930054\r\n            }, {\r\n                \"x\": 0.36666667461395264,\r\n                \"y\": 0.23666667938232422\r\n            }, {\r\n                \"x\": 0.3400000035762787,\r\n                \"y\": 0.4466666579246521\r\n            }, {\r\n                \"x\": 0.3233333230018616,\r\n                \"y\": 0.47333335876464844\r\n            }, {\r\n                \"x\": 0.27000001072883606,\r\n                \"y\": 0.44333332777023315\r\n            }, {\r\n                \"x\": 0.22333332896232605,\r\n                \"y\": 0.4399999976158142\r\n            }, {\r\n                \"x\": 0.20999999344348907,\r\n                \"y\": 0.46666663885116577\r\n            }, {\r\n                \"x\": 0.21666666865348816,\r\n                \"y\": 0.5333333015441895\r\n            }, {\r\n                \"x\": 0.23999999463558197,\r\n                \"y\": 0.5733333230018616\r\n            }, {\r\n                \"x\": 0.20999999344348907,\r\n                \"y\": 0.5800000429153442\r\n            }, {\r\n                \"x\": 0.12666666507720947,\r\n                \"y\": 0.5633333325386047\r\n            }, {\r\n                \"x\": 0.10000000149011612,\r\n                \"y\": 0.5733333230018616\r\n            }, {\r\n                \"x\": 0.09666666388511658,\r\n                \"y\": 0.5900000333786011\r\n            }, {\r\n                \"x\": 0.14000000059604645,\r\n                \"y\": 0.6299999952316284\r\n            }, {\r\n                \"x\": 0.13333334028720856,\r\n                \"y\": 0.6699999570846558\r\n            }, {\r\n                \"x\": 0.10000000149011612,\r\n                \"y\": 0.6766666769981384\r\n            }, {\r\n                \"x\": 0.08666666597127914,\r\n                \"y\": 0.6966666579246521\r\n            }, {\r\n                \"x\": 0.09666666388511658,\r\n                \"y\": 0.7200000286102295\r\n            }, {\r\n                \"x\": 0.18666666746139526,\r\n                \"y\": 0.7400000095367432\r\n            }, {\r\n                \"x\": 0.15000000596046448,\r\n                \"y\": 0.7866666316986084\r\n            }, {\r\n                \"x\": 0.14000000059604645,\r\n                \"y\": 0.8266666531562805\r\n            }, {\r\n                \"x\": 0.17666666209697723,\r\n                \"y\": 0.8333333134651184\r\n            }, {\r\n                \"x\": 0.2933333218097687,\r\n                \"y\": 0.8033333420753479\r\n            }, {\r\n                \"x\": 0.3100000023841858,\r\n                \"y\": 0.8133333325386047\r\n            }, {\r\n                \"x\": 0.3033333420753479,\r\n                \"y\": 0.8766666650772095\r\n            }, {\r\n                \"x\": 0.3166666626930237,\r\n                \"y\": 0.9366666674613953\r\n            }, {\r\n                \"x\": 0.3400000035762787,\r\n                \"y\": 0.9366666674613953\r\n            }, {\r\n                \"x\": 0.3466666638851166,\r\n                \"y\": 0.9599999785423279\r\n            }]\r\n        }]\r\n    }, {\r\n        \"name\": \"plum\",\r\n        \"imagePath\": \"../Low Poly Fruit/Low Poly Fruit/Plum.png\",\r\n        \"origin\": {\r\n            \"x\": 0,\r\n            \"y\": 0\r\n        },\r\n        \"polygons\": [\r\n            [{\r\n                \"x\": 0.3799999952316284,\r\n                \"y\": 0.6699999570846558\r\n            }, {\r\n                \"x\": 0.3933333456516266,\r\n                \"y\": 0.6366666555404663\r\n            }, {\r\n                \"x\": 0.44333332777023315,\r\n                \"y\": 0.6499999761581421\r\n            }, {\r\n                \"x\": 0.4300000071525574,\r\n                \"y\": 0.6933333277702332\r\n            }],\r\n            [{\r\n                \"x\": 0.4300000071525574,\r\n                \"y\": 0.6933333277702332\r\n            }, {\r\n                \"x\": 0.38999998569488525,\r\n                \"y\": 0.7400000095367432\r\n            }, {\r\n                \"x\": 0.3566666543483734,\r\n                \"y\": 0.753333330154419\r\n            }, {\r\n                \"x\": 0.33000001311302185,\r\n                \"y\": 0.746666669845581\r\n            }, {\r\n                \"x\": 0.3166666626930237,\r\n                \"y\": 0.7166666984558105\r\n            }, {\r\n                \"x\": 0.34333333373069763,\r\n                \"y\": 0.6833333373069763\r\n            }, {\r\n                \"x\": 0.3799999952316284,\r\n                \"y\": 0.6699999570846558\r\n            }],\r\n            [{\r\n                \"x\": 0.3866666555404663,\r\n                \"y\": 0.6233333349227905\r\n            }, {\r\n                \"x\": 0.3199999928474426,\r\n                \"y\": 0.6333333253860474\r\n            }, {\r\n                \"x\": 0.2633333206176758,\r\n                \"y\": 0.6233333349227905\r\n            }, {\r\n                \"x\": 0.20666666328907013,\r\n                \"y\": 0.59333336353302\r\n            }, {\r\n                \"x\": 0.13333334028720856,\r\n                \"y\": 0.5233333110809326\r\n            }],\r\n            [{\r\n                \"x\": 0.13333334028720856,\r\n                \"y\": 0.5233333110809326\r\n            }, {\r\n                \"x\": 0.10000000149011612,\r\n                \"y\": 0.4700000286102295\r\n            }, {\r\n                \"x\": 0.07999999821186066,\r\n                \"y\": 0.40333330631256104\r\n            }, {\r\n                \"x\": 0.07999999821186066,\r\n                \"y\": 0.35333335399627686\r\n            }, {\r\n                \"x\": 0.10333333164453506,\r\n                \"y\": 0.29666668176651\r\n            }, {\r\n                \"x\": 0.3866666555404663,\r\n                \"y\": 0.6233333349227905\r\n            }],\r\n            [{\r\n                \"x\": 0.10333333164453506,\r\n                \"y\": 0.29666668176651\r\n            }, {\r\n                \"x\": 0.14666666090488434,\r\n                \"y\": 0.2433333396911621\r\n            }, {\r\n                \"x\": 0.1899999976158142,\r\n                \"y\": 0.21333330869674683\r\n            }, {\r\n                \"x\": 0.25,\r\n                \"y\": 0.1966666579246521\r\n            }, {\r\n                \"x\": 0.3233333230018616,\r\n                \"y\": 0.19333332777023315\r\n            }],\r\n            [{\r\n                \"x\": 0.3233333230018616,\r\n                \"y\": 0.19333332777023315\r\n            }, {\r\n                \"x\": 0.3766666650772095,\r\n                \"y\": 0.20666664838790894\r\n            }, {\r\n                \"x\": 0.4466666579246521,\r\n                \"y\": 0.24666666984558105\r\n            }, {\r\n                \"x\": 0.5,\r\n                \"y\": 0.30000001192092896\r\n            }, {\r\n                \"x\": 0.3866666555404663,\r\n                \"y\": 0.6233333349227905\r\n            }, {\r\n                \"x\": 0.10333333164453506,\r\n                \"y\": 0.29666668176651\r\n            }],\r\n            [{\r\n                \"x\": 0.5,\r\n                \"y\": 0.30000001192092896\r\n            }, {\r\n                \"x\": 0.5299999713897705,\r\n                \"y\": 0.6333333253860474\r\n            }, {\r\n                \"x\": 0.503333330154419,\r\n                \"y\": 0.6466666460037231\r\n            }, {\r\n                \"x\": 0.44333332777023315,\r\n                \"y\": 0.6499999761581421\r\n            }, {\r\n                \"x\": 0.3933333456516266,\r\n                \"y\": 0.6366666555404663\r\n            }, {\r\n                \"x\": 0.3866666555404663,\r\n                \"y\": 0.6233333349227905\r\n            }],\r\n            [{\r\n                \"x\": 0.5,\r\n                \"y\": 0.30000001192092896\r\n            }, {\r\n                \"x\": 0.5633333325386047,\r\n                \"y\": 0.21666663885116577\r\n            }, {\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.17666667699813843\r\n            }, {\r\n                \"x\": 0.6933333277702332,\r\n                \"y\": 0.16333335638046265\r\n            }, {\r\n                \"x\": 0.746666669845581,\r\n                \"y\": 0.1666666865348816\r\n            }, {\r\n                \"x\": 0.800000011920929,\r\n                \"y\": 0.1899999976158142\r\n            }, {\r\n                \"x\": 0.846666693687439,\r\n                \"y\": 0.23000001907348633\r\n            }, {\r\n                \"x\": 0.8700000047683716,\r\n                \"y\": 0.2866666913032532\r\n            }],\r\n            [{\r\n                \"x\": 0.8700000047683716,\r\n                \"y\": 0.2866666913032532\r\n            }, {\r\n                \"x\": 0.8833333253860474,\r\n                \"y\": 0.40666669607162476\r\n            }, {\r\n                \"x\": 0.8633333444595337,\r\n                \"y\": 0.4766666889190674\r\n            }, {\r\n                \"x\": 0.8266666531562805,\r\n                \"y\": 0.5399999618530273\r\n            }, {\r\n                \"x\": 0.7799999713897705,\r\n                \"y\": 0.5833333730697632\r\n            }, {\r\n                \"x\": 0.5666666626930237,\r\n                \"y\": 0.6833333373069763\r\n            }, {\r\n                \"x\": 0.5299999713897705,\r\n                \"y\": 0.6333333253860474\r\n            }, {\r\n                \"x\": 0.5,\r\n                \"y\": 0.30000001192092896\r\n            }],\r\n            [{\r\n                \"x\": 0.7799999713897705,\r\n                \"y\": 0.5833333730697632\r\n            }, {\r\n                \"x\": 0.8700000047683716,\r\n                \"y\": 0.6266666650772095\r\n            }, {\r\n                \"x\": 0.9133333563804626,\r\n                \"y\": 0.6666666269302368\r\n            }, {\r\n                \"x\": 0.9233333468437195,\r\n                \"y\": 0.6966666579246521\r\n            }, {\r\n                \"x\": 0.9100000262260437,\r\n                \"y\": 0.7200000286102295\r\n            }, {\r\n                \"x\": 0.8299999833106995,\r\n                \"y\": 0.7766666412353516\r\n            }, {\r\n                \"x\": 0.7599999904632568,\r\n                \"y\": 0.8066666722297668\r\n            }],\r\n            [{\r\n                \"x\": 0.7599999904632568,\r\n                \"y\": 0.8066666722297668\r\n            }, {\r\n                \"x\": 0.699999988079071,\r\n                \"y\": 0.8100000023841858\r\n            }, {\r\n                \"x\": 0.653333306312561,\r\n                \"y\": 0.800000011920929\r\n            }, {\r\n                \"x\": 0.6066666841506958,\r\n                \"y\": 0.7766666412353516\r\n            }, {\r\n                \"x\": 0.5766666531562805,\r\n                \"y\": 0.7300000190734863\r\n            }, {\r\n                \"x\": 0.5666666626930237,\r\n                \"y\": 0.6833333373069763\r\n            }, {\r\n                \"x\": 0.7799999713897705,\r\n                \"y\": 0.5833333730697632\r\n            }]\r\n        ],\r\n        \"circles\": [],\r\n        \"shapes\": [{\r\n            \"type\": \"POLYGON\",\r\n            \"vertices\": [{\r\n                \"x\": 0.699999988079071,\r\n                \"y\": 0.8100000023841858\r\n            }, {\r\n                \"x\": 0.7599999904632568,\r\n                \"y\": 0.8066666722297668\r\n            }, {\r\n                \"x\": 0.8299999833106995,\r\n                \"y\": 0.7766666412353516\r\n            }, {\r\n                \"x\": 0.9100000262260437,\r\n                \"y\": 0.7200000286102295\r\n            }, {\r\n                \"x\": 0.9233333468437195,\r\n                \"y\": 0.6966666579246521\r\n            }, {\r\n                \"x\": 0.9133333563804626,\r\n                \"y\": 0.6666666269302368\r\n            }, {\r\n                \"x\": 0.8700000047683716,\r\n                \"y\": 0.6266666650772095\r\n            }, {\r\n                \"x\": 0.7799999713897705,\r\n                \"y\": 0.5833333730697632\r\n            }, {\r\n                \"x\": 0.8266666531562805,\r\n                \"y\": 0.5399999618530273\r\n            }, {\r\n                \"x\": 0.8633333444595337,\r\n                \"y\": 0.4766666889190674\r\n            }, {\r\n                \"x\": 0.8833333253860474,\r\n                \"y\": 0.40666669607162476\r\n            }, {\r\n                \"x\": 0.8700000047683716,\r\n                \"y\": 0.2866666913032532\r\n            }, {\r\n                \"x\": 0.846666693687439,\r\n                \"y\": 0.23000001907348633\r\n            }, {\r\n                \"x\": 0.800000011920929,\r\n                \"y\": 0.1899999976158142\r\n            }, {\r\n                \"x\": 0.746666669845581,\r\n                \"y\": 0.1666666865348816\r\n            }, {\r\n                \"x\": 0.6933333277702332,\r\n                \"y\": 0.16333335638046265\r\n            }, {\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.17666667699813843\r\n            }, {\r\n                \"x\": 0.5633333325386047,\r\n                \"y\": 0.21666663885116577\r\n            }, {\r\n                \"x\": 0.5,\r\n                \"y\": 0.30000001192092896\r\n            }, {\r\n                \"x\": 0.4466666579246521,\r\n                \"y\": 0.24666666984558105\r\n            }, {\r\n                \"x\": 0.3766666650772095,\r\n                \"y\": 0.20666664838790894\r\n            }, {\r\n                \"x\": 0.3233333230018616,\r\n                \"y\": 0.19333332777023315\r\n            }, {\r\n                \"x\": 0.25,\r\n                \"y\": 0.1966666579246521\r\n            }, {\r\n                \"x\": 0.1899999976158142,\r\n                \"y\": 0.21333330869674683\r\n            }, {\r\n                \"x\": 0.14666666090488434,\r\n                \"y\": 0.2433333396911621\r\n            }, {\r\n                \"x\": 0.10333333164453506,\r\n                \"y\": 0.29666668176651\r\n            }, {\r\n                \"x\": 0.07999999821186066,\r\n                \"y\": 0.35333335399627686\r\n            }, {\r\n                \"x\": 0.07999999821186066,\r\n                \"y\": 0.40333330631256104\r\n            }, {\r\n                \"x\": 0.10000000149011612,\r\n                \"y\": 0.4700000286102295\r\n            }, {\r\n                \"x\": 0.13333334028720856,\r\n                \"y\": 0.5233333110809326\r\n            }, {\r\n                \"x\": 0.20666666328907013,\r\n                \"y\": 0.59333336353302\r\n            }, {\r\n                \"x\": 0.2633333206176758,\r\n                \"y\": 0.6233333349227905\r\n            }, {\r\n                \"x\": 0.3199999928474426,\r\n                \"y\": 0.6333333253860474\r\n            }, {\r\n                \"x\": 0.3866666555404663,\r\n                \"y\": 0.6233333349227905\r\n            }, {\r\n                \"x\": 0.3933333456516266,\r\n                \"y\": 0.6366666555404663\r\n            }, {\r\n                \"x\": 0.3799999952316284,\r\n                \"y\": 0.6699999570846558\r\n            }, {\r\n                \"x\": 0.34333333373069763,\r\n                \"y\": 0.6833333373069763\r\n            }, {\r\n                \"x\": 0.3166666626930237,\r\n                \"y\": 0.7166666984558105\r\n            }, {\r\n                \"x\": 0.33000001311302185,\r\n                \"y\": 0.746666669845581\r\n            }, {\r\n                \"x\": 0.3566666543483734,\r\n                \"y\": 0.753333330154419\r\n            }, {\r\n                \"x\": 0.38999998569488525,\r\n                \"y\": 0.7400000095367432\r\n            }, {\r\n                \"x\": 0.4300000071525574,\r\n                \"y\": 0.6933333277702332\r\n            }, {\r\n                \"x\": 0.44333332777023315,\r\n                \"y\": 0.6499999761581421\r\n            }, {\r\n                \"x\": 0.503333330154419,\r\n                \"y\": 0.6466666460037231\r\n            }, {\r\n                \"x\": 0.5299999713897705,\r\n                \"y\": 0.6333333253860474\r\n            }, {\r\n                \"x\": 0.5666666626930237,\r\n                \"y\": 0.6833333373069763\r\n            }, {\r\n                \"x\": 0.5766666531562805,\r\n                \"y\": 0.7300000190734863\r\n            }, {\r\n                \"x\": 0.6066666841506958,\r\n                \"y\": 0.7766666412353516\r\n            }, {\r\n                \"x\": 0.653333306312561,\r\n                \"y\": 0.800000011920929\r\n            }]\r\n        }]\r\n    }, {\r\n        \"name\": \"strawberry\",\r\n        \"imagePath\": \"../Low Poly Fruit/Low Poly Fruit/Strawberry.png\",\r\n        \"origin\": {\r\n            \"x\": 0,\r\n            \"y\": 0\r\n        },\r\n        \"polygons\": [\r\n            [{\r\n                \"x\": 0.8733333349227905,\r\n                \"y\": 0.5666666626930237\r\n            }, {\r\n                \"x\": 0.8833333253860474,\r\n                \"y\": 0.6266666650772095\r\n            }, {\r\n                \"x\": 0.8533333539962769,\r\n                \"y\": 0.653333306312561\r\n            }, {\r\n                \"x\": 0.8266666531562805,\r\n                \"y\": 0.65666663646698\r\n            }, {\r\n                \"x\": 0.800000011920929,\r\n                \"y\": 0.6399999856948853\r\n            }, {\r\n                \"x\": 0.847495436668396,\r\n                \"y\": 0.549139142036438\r\n            }],\r\n            [{\r\n                \"x\": 0.8766666650772095,\r\n                \"y\": 0.4933333396911621\r\n            }, {\r\n                \"x\": 0.9166666865348816,\r\n                \"y\": 0.5133333206176758\r\n            }, {\r\n                \"x\": 0.9233333468437195,\r\n                \"y\": 0.5299999713897705\r\n            }, {\r\n                \"x\": 0.9100000262260437,\r\n                \"y\": 0.5533333420753479\r\n            }, {\r\n                \"x\": 0.8733333349227905,\r\n                \"y\": 0.5666666626930237\r\n            }, {\r\n                \"x\": 0.847495436668396,\r\n                \"y\": 0.549139142036438\r\n            }],\r\n            [{\r\n                \"x\": 0.653333306312561,\r\n                \"y\": 0.7033333778381348\r\n            }, {\r\n                \"x\": 0.6299999952316284,\r\n                \"y\": 0.7200000286102295\r\n            }, {\r\n                \"x\": 0.6066666841506958,\r\n                \"y\": 0.7133333683013916\r\n            }, {\r\n                \"x\": 0.6033333539962769,\r\n                \"y\": 0.6899999976158142\r\n            }],\r\n            [{\r\n                \"x\": 0.6033333539962769,\r\n                \"y\": 0.6899999976158142\r\n            }, {\r\n                \"x\": 0.6299999952316284,\r\n                \"y\": 0.6333333253860474\r\n            }, {\r\n                \"x\": 0.6933333277702332,\r\n                \"y\": 0.7033333778381348\r\n            }, {\r\n                \"x\": 0.653333306312561,\r\n                \"y\": 0.7033333778381348\r\n            }],\r\n            [{\r\n                \"x\": 0.6299999952316284,\r\n                \"y\": 0.6333333253860474\r\n            }, {\r\n                \"x\": 0.7599999904632568,\r\n                \"y\": 0.6499999761581421\r\n            }, {\r\n                \"x\": 0.746666669845581,\r\n                \"y\": 0.7100000381469727\r\n            }, {\r\n                \"x\": 0.7166666388511658,\r\n                \"y\": 0.7166666984558105\r\n            }, {\r\n                \"x\": 0.6933333277702332,\r\n                \"y\": 0.7033333778381348\r\n            }],\r\n            [{\r\n                \"x\": 0.6299999952316284,\r\n                \"y\": 0.6333333253860474\r\n            }, {\r\n                \"x\": 0.5666666626930237,\r\n                \"y\": 0.6166666746139526\r\n            }, {\r\n                \"x\": 0.5066666603088379,\r\n                \"y\": 0.5766666531562805\r\n            }, {\r\n                \"x\": 0.4099999964237213,\r\n                \"y\": 0.2733333110809326\r\n            }, {\r\n                \"x\": 0.4166666567325592,\r\n                \"y\": 0.20999997854232788\r\n            }],\r\n            [{\r\n                \"x\": 0.4166666567325592,\r\n                \"y\": 0.20999997854232788\r\n            }, {\r\n                \"x\": 0.4333333373069763,\r\n                \"y\": 0.18000000715255737\r\n            }, {\r\n                \"x\": 0.4633333384990692,\r\n                \"y\": 0.1600000262260437\r\n            }, {\r\n                \"x\": 0.5366666913032532,\r\n                \"y\": 0.15666669607162476\r\n            }, {\r\n                \"x\": 0.6000000238418579,\r\n                \"y\": 0.17000001668930054\r\n            }, {\r\n                \"x\": 0.6299999952316284,\r\n                \"y\": 0.6333333253860474\r\n            }],\r\n            [{\r\n                \"x\": 0.6000000238418579,\r\n                \"y\": 0.17000001668930054\r\n            }, {\r\n                \"x\": 0.7366666793823242,\r\n                \"y\": 0.23000001907348633\r\n            }, {\r\n                \"x\": 0.8066666722297668,\r\n                \"y\": 0.26999998092651367\r\n            }, {\r\n                \"x\": 0.8533333539962769,\r\n                \"y\": 0.3166666626930237\r\n            }, {\r\n                \"x\": 0.8833333253860474,\r\n                \"y\": 0.3799999952316284\r\n            }, {\r\n                \"x\": 0.8899999856948853,\r\n                \"y\": 0.4300000071525574\r\n            }],\r\n            [{\r\n                \"x\": 0.8899999856948853,\r\n                \"y\": 0.4300000071525574\r\n            }, {\r\n                \"x\": 0.8766666650772095,\r\n                \"y\": 0.4933333396911621\r\n            }, {\r\n                \"x\": 0.800000011920929,\r\n                \"y\": 0.6399999856948853\r\n            }, {\r\n                \"x\": 0.7599999904632568,\r\n                \"y\": 0.6499999761581421\r\n            }, {\r\n                \"x\": 0.6299999952316284,\r\n                \"y\": 0.6333333253860474\r\n            }, {\r\n                \"x\": 0.6000000238418579,\r\n                \"y\": 0.17000001668930054\r\n            }],\r\n            [{\r\n                \"x\": 0.3700000047683716,\r\n                \"y\": 0.7333333492279053\r\n            }, {\r\n                \"x\": 0.3633333444595337,\r\n                \"y\": 0.753333330154419\r\n            }, {\r\n                \"x\": 0.3333333432674408,\r\n                \"y\": 0.7599999904632568\r\n            }, {\r\n                \"x\": 0.3199999928474426,\r\n                \"y\": 0.746666669845581\r\n            }],\r\n            [{\r\n                \"x\": 0.3199999928474426,\r\n                \"y\": 0.746666669845581\r\n            }, {\r\n                \"x\": 0.12333333492279053,\r\n                \"y\": 0.5766666531562805\r\n            }, {\r\n                \"x\": 0.11999999731779099,\r\n                \"y\": 0.5233333110809326\r\n            }, {\r\n                \"x\": 0.1433333307504654,\r\n                \"y\": 0.4599999785423279\r\n            }, {\r\n                \"x\": 0.17666666209697723,\r\n                \"y\": 0.4166666865348816\r\n            }, {\r\n                \"x\": 0.2433333396911621,\r\n                \"y\": 0.36666667461395264\r\n            }],\r\n            [{\r\n                \"x\": 0.2433333396911621,\r\n                \"y\": 0.36666667461395264\r\n            }, {\r\n                \"x\": 0.4099999964237213,\r\n                \"y\": 0.2733333110809326\r\n            }, {\r\n                \"x\": 0.5066666603088379,\r\n                \"y\": 0.5766666531562805\r\n            }, {\r\n                \"x\": 0.4699999988079071,\r\n                \"y\": 0.6633332967758179\r\n            }, {\r\n                \"x\": 0.4233333468437195,\r\n                \"y\": 0.7100000381469727\r\n            }, {\r\n                \"x\": 0.3700000047683716,\r\n                \"y\": 0.7333333492279053\r\n            }, {\r\n                \"x\": 0.3199999928474426,\r\n                \"y\": 0.746666669845581\r\n            }],\r\n            [{\r\n                \"x\": 0.3199999928474426,\r\n                \"y\": 0.746666669845581\r\n            }, {\r\n                \"x\": 0.10999999940395355,\r\n                \"y\": 0.596666693687439\r\n            }, {\r\n                \"x\": 0.12333333492279053,\r\n                \"y\": 0.5766666531562805\r\n            }],\r\n            [{\r\n                \"x\": 0.3199999928474426,\r\n                \"y\": 0.746666669845581\r\n            }, {\r\n                \"x\": 0.16333332657814026,\r\n                \"y\": 0.7166666984558105\r\n            }, {\r\n                \"x\": 0.0833333358168602,\r\n                \"y\": 0.6899999976158142\r\n            }, {\r\n                \"x\": 0.0533333346247673,\r\n                \"y\": 0.6633332967758179\r\n            }, {\r\n                \"x\": 0.0533333346247673,\r\n                \"y\": 0.6399999856948853\r\n            }, {\r\n                \"x\": 0.0833333358168602,\r\n                \"y\": 0.6033333539962769\r\n            }, {\r\n                \"x\": 0.10999999940395355,\r\n                \"y\": 0.596666693687439\r\n            }],\r\n            [{\r\n                \"x\": 0.3199999928474426,\r\n                \"y\": 0.746666669845581\r\n            }, {\r\n                \"x\": 0.2199999988079071,\r\n                \"y\": 0.7733333110809326\r\n            }, {\r\n                \"x\": 0.19333332777023315,\r\n                \"y\": 0.7799999713897705\r\n            }, {\r\n                \"x\": 0.17000000178813934,\r\n                \"y\": 0.7566666603088379\r\n            }, {\r\n                \"x\": 0.16333332657814026,\r\n                \"y\": 0.7166666984558105\r\n            }],\r\n            [{\r\n                \"x\": 0.30666667222976685,\r\n                \"y\": 0.7566666603088379\r\n            }, {\r\n                \"x\": 0.30666667222976685,\r\n                \"y\": 0.8266666531562805\r\n            }, {\r\n                \"x\": 0.28999999165534973,\r\n                \"y\": 0.84333336353302\r\n            }, {\r\n                \"x\": 0.25333333015441895,\r\n                \"y\": 0.846666693687439\r\n            }, {\r\n                \"x\": 0.2266666740179062,\r\n                \"y\": 0.8033333420753479\r\n            }, {\r\n                \"x\": 0.2199999988079071,\r\n                \"y\": 0.7733333110809326\r\n            }],\r\n            [{\r\n                \"x\": 0.2199999988079071,\r\n                \"y\": 0.7733333110809326\r\n            }, {\r\n                \"x\": 0.3199999928474426,\r\n                \"y\": 0.746666669845581\r\n            }, {\r\n                \"x\": 0.30666667222976685,\r\n                \"y\": 0.7566666603088379\r\n            }]\r\n        ],\r\n        \"circles\": [],\r\n        \"shapes\": [{\r\n            \"type\": \"POLYGON\",\r\n            \"vertices\": [{\r\n                \"x\": 0.25333333015441895,\r\n                \"y\": 0.846666693687439\r\n            }, {\r\n                \"x\": 0.28999999165534973,\r\n                \"y\": 0.84333336353302\r\n            }, {\r\n                \"x\": 0.30666667222976685,\r\n                \"y\": 0.8266666531562805\r\n            }, {\r\n                \"x\": 0.30666667222976685,\r\n                \"y\": 0.7566666603088379\r\n            }, {\r\n                \"x\": 0.3199999928474426,\r\n                \"y\": 0.746666669845581\r\n            }, {\r\n                \"x\": 0.3333333432674408,\r\n                \"y\": 0.7599999904632568\r\n            }, {\r\n                \"x\": 0.3633333444595337,\r\n                \"y\": 0.753333330154419\r\n            }, {\r\n                \"x\": 0.3700000047683716,\r\n                \"y\": 0.7333333492279053\r\n            }, {\r\n                \"x\": 0.4233333468437195,\r\n                \"y\": 0.7100000381469727\r\n            }, {\r\n                \"x\": 0.4699999988079071,\r\n                \"y\": 0.6633332967758179\r\n            }, {\r\n                \"x\": 0.5066666603088379,\r\n                \"y\": 0.5766666531562805\r\n            }, {\r\n                \"x\": 0.5666666626930237,\r\n                \"y\": 0.6166666746139526\r\n            }, {\r\n                \"x\": 0.6299999952316284,\r\n                \"y\": 0.6333333253860474\r\n            }, {\r\n                \"x\": 0.6033333539962769,\r\n                \"y\": 0.6899999976158142\r\n            }, {\r\n                \"x\": 0.6066666841506958,\r\n                \"y\": 0.7133333683013916\r\n            }, {\r\n                \"x\": 0.6299999952316284,\r\n                \"y\": 0.7200000286102295\r\n            }, {\r\n                \"x\": 0.653333306312561,\r\n                \"y\": 0.7033333778381348\r\n            }, {\r\n                \"x\": 0.6933333277702332,\r\n                \"y\": 0.7033333778381348\r\n            }, {\r\n                \"x\": 0.7166666388511658,\r\n                \"y\": 0.7166666984558105\r\n            }, {\r\n                \"x\": 0.746666669845581,\r\n                \"y\": 0.7100000381469727\r\n            }, {\r\n                \"x\": 0.7599999904632568,\r\n                \"y\": 0.6499999761581421\r\n            }, {\r\n                \"x\": 0.800000011920929,\r\n                \"y\": 0.6399999856948853\r\n            }, {\r\n                \"x\": 0.8266666531562805,\r\n                \"y\": 0.65666663646698\r\n            }, {\r\n                \"x\": 0.8533333539962769,\r\n                \"y\": 0.653333306312561\r\n            }, {\r\n                \"x\": 0.8833333253860474,\r\n                \"y\": 0.6266666650772095\r\n            }, {\r\n                \"x\": 0.8733333349227905,\r\n                \"y\": 0.5666666626930237\r\n            }, {\r\n                \"x\": 0.9100000262260437,\r\n                \"y\": 0.5533333420753479\r\n            }, {\r\n                \"x\": 0.9233333468437195,\r\n                \"y\": 0.5299999713897705\r\n            }, {\r\n                \"x\": 0.9166666865348816,\r\n                \"y\": 0.5133333206176758\r\n            }, {\r\n                \"x\": 0.8766666650772095,\r\n                \"y\": 0.4933333396911621\r\n            }, {\r\n                \"x\": 0.8899999856948853,\r\n                \"y\": 0.4300000071525574\r\n            }, {\r\n                \"x\": 0.8833333253860474,\r\n                \"y\": 0.3799999952316284\r\n            }, {\r\n                \"x\": 0.8533333539962769,\r\n                \"y\": 0.3166666626930237\r\n            }, {\r\n                \"x\": 0.8066666722297668,\r\n                \"y\": 0.26999998092651367\r\n            }, {\r\n                \"x\": 0.7366666793823242,\r\n                \"y\": 0.23000001907348633\r\n            }, {\r\n                \"x\": 0.6000000238418579,\r\n                \"y\": 0.17000001668930054\r\n            }, {\r\n                \"x\": 0.5366666913032532,\r\n                \"y\": 0.15666669607162476\r\n            }, {\r\n                \"x\": 0.4633333384990692,\r\n                \"y\": 0.1600000262260437\r\n            }, {\r\n                \"x\": 0.4333333373069763,\r\n                \"y\": 0.18000000715255737\r\n            }, {\r\n                \"x\": 0.4166666567325592,\r\n                \"y\": 0.20999997854232788\r\n            }, {\r\n                \"x\": 0.4099999964237213,\r\n                \"y\": 0.2733333110809326\r\n            }, {\r\n                \"x\": 0.2433333396911621,\r\n                \"y\": 0.36666667461395264\r\n            }, {\r\n                \"x\": 0.17666666209697723,\r\n                \"y\": 0.4166666865348816\r\n            }, {\r\n                \"x\": 0.1433333307504654,\r\n                \"y\": 0.4599999785423279\r\n            }, {\r\n                \"x\": 0.11999999731779099,\r\n                \"y\": 0.5233333110809326\r\n            }, {\r\n                \"x\": 0.12333333492279053,\r\n                \"y\": 0.5766666531562805\r\n            }, {\r\n                \"x\": 0.10999999940395355,\r\n                \"y\": 0.596666693687439\r\n            }, {\r\n                \"x\": 0.0833333358168602,\r\n                \"y\": 0.6033333539962769\r\n            }, {\r\n                \"x\": 0.0533333346247673,\r\n                \"y\": 0.6399999856948853\r\n            }, {\r\n                \"x\": 0.0533333346247673,\r\n                \"y\": 0.6633332967758179\r\n            }, {\r\n                \"x\": 0.0833333358168602,\r\n                \"y\": 0.6899999976158142\r\n            }, {\r\n                \"x\": 0.16333332657814026,\r\n                \"y\": 0.7166666984558105\r\n            }, {\r\n                \"x\": 0.17000000178813934,\r\n                \"y\": 0.7566666603088379\r\n            }, {\r\n                \"x\": 0.19333332777023315,\r\n                \"y\": 0.7799999713897705\r\n            }, {\r\n                \"x\": 0.2199999988079071,\r\n                \"y\": 0.7733333110809326\r\n            }, {\r\n                \"x\": 0.2266666740179062,\r\n                \"y\": 0.8033333420753479\r\n            }]\r\n        }]\r\n    }, {\r\n        \"name\": \"watermelon\",\r\n        \"imagePath\": \"../Low Poly Fruit/Low Poly Fruit/Watermelon.png\",\r\n        \"origin\": {\r\n            \"x\": 0,\r\n            \"y\": 0\r\n        },\r\n        \"polygons\": [\r\n            [{\r\n                \"x\": 0.20999999344348907,\r\n                \"y\": 0.8733333349227905\r\n            }, {\r\n                \"x\": 0.1599999964237213,\r\n                \"y\": 0.7833333015441895\r\n            }, {\r\n                \"x\": 0.1366666704416275,\r\n                \"y\": 0.7033333778381348\r\n            }, {\r\n                \"x\": 0.12999999523162842,\r\n                \"y\": 0.550000011920929\r\n            }, {\r\n                \"x\": 0.14000000059604645,\r\n                \"y\": 0.49000000953674316\r\n            }, {\r\n                \"x\": 0.17666666209697723,\r\n                \"y\": 0.3999999761581421\r\n            }],\r\n            [{\r\n                \"x\": 0.17666666209697723,\r\n                \"y\": 0.3999999761581421\r\n            }, {\r\n                \"x\": 0.21666666865348816,\r\n                \"y\": 0.3399999737739563\r\n            }, {\r\n                \"x\": 0.2866666615009308,\r\n                \"y\": 0.26999998092651367\r\n            }, {\r\n                \"x\": 0.36666667461395264,\r\n                \"y\": 0.21666663885116577\r\n            }, {\r\n                \"x\": 0.44999998807907104,\r\n                \"y\": 0.18000000715255737\r\n            }, {\r\n                \"x\": 0.5333333611488342,\r\n                \"y\": 0.1600000262260437\r\n            }, {\r\n                \"x\": 0.20999999344348907,\r\n                \"y\": 0.8733333349227905\r\n            }],\r\n            [{\r\n                \"x\": 0.5333333611488342,\r\n                \"y\": 0.1600000262260437\r\n            }, {\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.1600000262260437\r\n            }, {\r\n                \"x\": 0.7300000190734863,\r\n                \"y\": 0.18000000715255737\r\n            }, {\r\n                \"x\": 0.8166666626930237,\r\n                \"y\": 0.2200000286102295\r\n            }, {\r\n                \"x\": 0.9066666960716248,\r\n                \"y\": 0.2799999713897705\r\n            }, {\r\n                \"x\": 0.9466666579246521,\r\n                \"y\": 0.3266666531562805\r\n            }],\r\n            [{\r\n                \"x\": 0.9466666579246521,\r\n                \"y\": 0.3266666531562805\r\n            }, {\r\n                \"x\": 0.9399999976158142,\r\n                \"y\": 0.35333335399627686\r\n            }, {\r\n                \"x\": 0.8799999952316284,\r\n                \"y\": 0.4100000262260437\r\n            }, {\r\n                \"x\": 0.4399999976158142,\r\n                \"y\": 0.7366666793823242\r\n            }, {\r\n                \"x\": 0.2133333384990692,\r\n                \"y\": 0.8766666650772095\r\n            }, {\r\n                \"x\": 0.20999999344348907,\r\n                \"y\": 0.8733333349227905\r\n            }, {\r\n                \"x\": 0.5333333611488342,\r\n                \"y\": 0.1600000262260437\r\n            }]\r\n        ],\r\n        \"circles\": [],\r\n        \"shapes\": [{\r\n            \"type\": \"POLYGON\",\r\n            \"vertices\": [{\r\n                \"x\": 0.2133333384990692,\r\n                \"y\": 0.8766666650772095\r\n            }, {\r\n                \"x\": 0.4399999976158142,\r\n                \"y\": 0.7366666793823242\r\n            }, {\r\n                \"x\": 0.8799999952316284,\r\n                \"y\": 0.4100000262260437\r\n            }, {\r\n                \"x\": 0.9399999976158142,\r\n                \"y\": 0.35333335399627686\r\n            }, {\r\n                \"x\": 0.9466666579246521,\r\n                \"y\": 0.3266666531562805\r\n            }, {\r\n                \"x\": 0.9066666960716248,\r\n                \"y\": 0.2799999713897705\r\n            }, {\r\n                \"x\": 0.8166666626930237,\r\n                \"y\": 0.2200000286102295\r\n            }, {\r\n                \"x\": 0.7300000190734863,\r\n                \"y\": 0.18000000715255737\r\n            }, {\r\n                \"x\": 0.6366666555404663,\r\n                \"y\": 0.1600000262260437\r\n            }, {\r\n                \"x\": 0.5333333611488342,\r\n                \"y\": 0.1600000262260437\r\n            }, {\r\n                \"x\": 0.44999998807907104,\r\n                \"y\": 0.18000000715255737\r\n            }, {\r\n                \"x\": 0.36666667461395264,\r\n                \"y\": 0.21666663885116577\r\n            }, {\r\n                \"x\": 0.2866666615009308,\r\n                \"y\": 0.26999998092651367\r\n            }, {\r\n                \"x\": 0.21666666865348816,\r\n                \"y\": 0.3399999737739563\r\n            }, {\r\n                \"x\": 0.17666666209697723,\r\n                \"y\": 0.3999999761581421\r\n            }, {\r\n                \"x\": 0.14000000059604645,\r\n                \"y\": 0.49000000953674316\r\n            }, {\r\n                \"x\": 0.12999999523162842,\r\n                \"y\": 0.550000011920929\r\n            }, {\r\n                \"x\": 0.1366666704416275,\r\n                \"y\": 0.7033333778381348\r\n            }, {\r\n                \"x\": 0.1599999964237213,\r\n                \"y\": 0.7833333015441895\r\n            }, {\r\n                \"x\": 0.20999999344348907,\r\n                \"y\": 0.8733333349227905\r\n            }]\r\n        }]\r\n    }],\r\n    \"dynamicObjects\": []\r\n};","import * as planck from 'planck-js';\r\nimport * as PIXI from 'pixi.js';\r\nimport Point from './Point';\r\nimport * as util from './util/Util';\r\nimport Input from './Input';\r\nimport * as shaders from './assets/shaders/Shaders';\r\nimport Triangulator from './util/math/Triangulate'\r\nimport Convex from './util/math/Convex';\r\nimport * as PIXIParticles from 'pixi-particles';\r\nimport Resources from './Resources';\r\nimport Sprites from './assets/sprites/Sprites'\r\n\r\nconst darkenShaders = shaders.darken();\r\nconst lightenShaders = shaders.lighten();\r\n\r\nconst bakeScale = 1.5;\r\n\r\nclass World {\r\n    constructor(game) {\r\n        this.definitions = game.level.definitions;\r\n        this.game = game;\r\n        this.level = game.level;\r\n        this.app = this.game.app;\r\n        this.input = new Input(this);\r\n        this.objects = [];\r\n        this.generated = [];\r\n        this.initialPlayerPosition = new Point(400, 100);\r\n        this.window = new PIXI.Container();\r\n    }\r\n\r\n    init() {\r\n        this.physics = planck.World({\r\n            gravity: planck.Vec2(0, 0.01)\r\n        });\r\n        this.physicsStage = this.physics.createBody({\r\n            type: 'static',\r\n            position: planck.Vec2(0, 0),\r\n        });\r\n        this.game.resizeBus.push(() => {\r\n            this.background.clear();\r\n            this.background.beginFill(0x111111);\r\n            this.background.drawRect(0, 0, this.app.renderer.width + 20, this.app.renderer.height + 20);\r\n        });\r\n\r\n        // Generate stage textures\r\n        for (const key in this.definitions) {\r\n            const definition = this.definitions[key];\r\n            const start = new Date();\r\n            Convex.makeCCW(definition.points);\r\n            //definition.points.reverse();\r\n            definition.shapes = [];\r\n            for (const polygon of Convex.fastDecomp(definition.points)) {\r\n                definition.shapes.push({\r\n                    points: polygon.map(array => new Point(array[0], array[1]))\r\n                });\r\n            }\r\n            console.log(\"Definition '\" + key + \"' was split into \" + definition.shapes.length + \" convex polygons (\" + (new Date() - start) + \" ms).\");\r\n            let area = 0;\r\n            for (let shape of definition.shapes) {\r\n                area += util.polygonArea(shape.points);\r\n            }\r\n            for (let index = 0; index < definition.shapes.length; index++) {\r\n                const shape = definition.shapes[index];\r\n                shape.texture = this.bakeStageTexture({\r\n                    name: key,\r\n                    index: index,\r\n                    internal: Math.ceil((util.polygonArea(shape.points) / area) * definition.internal),\r\n                    points: shape.points,\r\n                    colors: definition.colors\r\n                });\r\n            }\r\n        }\r\n        \r\n        // Background\r\n        this.backgroundShader = shaders.sky();\r\n        this.background = new PIXI.Graphics();\r\n        this.background.beginFill(0x111111);\r\n        this.background.drawRect(0, 0, this.app.renderer.width + 20, this.app.renderer.height + 20);\r\n        this.background.filters = [this.backgroundShader.shader]\r\n        this.background.x = -10;\r\n        this.background.y = -10;\r\n        this.app.stage.addChild(this.background);\r\n        \r\n        for (const object of this.level.objects) {\r\n            this.addStageObject(object.x, object.y * -1, this.definitions[object.name]);\r\n        }\r\n        for (const sprite of this.level.sprites) {\r\n            const scale = sprite.scale === undefined ? 1 : sprite.scale;\r\n            this.addSprite(sprite.x, sprite.y * -1, sprite.sheet, sprite.name, scale);\r\n        }\r\n        \r\n        this.createPlayer();\r\n        this.input.init();\r\n\r\n        this.app.stage.addChild(this.window);\r\n    }\r\n\r\n    tick(delta) {\r\n        const center = util.getScreenCenter();\r\n\r\n        this.physics.step(delta);\r\n        const playerPosition = this.player.body.getPosition();\r\n        this.player.sprite.x = util.scaleToWorld(playerPosition.x);\r\n        this.player.sprite.y = util.scaleToWorld(playerPosition.y);\r\n        this.player.sprite.rotation += this.player.body.getAngularVelocity() * delta;\r\n        this.window.position.set(center.x - this.player.sprite.x, center.y - this.player.sprite.y);\r\n\r\n        this.tracer.updateOwnerPos(this.player.sprite.x, this.player.sprite.y);\r\n        this.tracer.update(delta * 0.01);\r\n\r\n        this.input.tick(delta);\r\n    }\r\n\r\n    createPlayer() {\r\n        const playerSize = 10;\r\n\r\n        // Graphics\r\n        const graphics = new PIXI.Graphics();\r\n        graphics.beginFill(0x0000ff);\r\n        graphics.drawCircle(0, 0, playerSize);\r\n        graphics.beginFill(0xff0000);\r\n        graphics.drawCircle(4, 0, playerSize / 3);\r\n        const texture = this.app.renderer.generateTexture(graphics);\r\n        this.generated.push(texture);\r\n        const sprite = new PIXI.Sprite(texture);\r\n        sprite.anchor.x = 0.5;\r\n        sprite.anchor.y = 0.5;\r\n        sprite.x = 200;\r\n        sprite.y = 100;\r\n\r\n        // Physics\r\n        const body = this.physics.createBody({\r\n            type: 'dynamic',\r\n            position: this.initialPlayerPosition.scaleToPhysics().toVec2(),\r\n            bullet: true,\r\n            linearDamping: 0.005,\r\n            allowSleep: false\r\n        });\r\n        body.createFixture({\r\n            shape: planck.Circle(util.scaleToPhysics(playerSize)),\r\n            restitution: 0,\r\n            friction: 0.2,\r\n            density: 0.9\r\n        });\r\n\r\n        // Effects\r\n        const container = new PIXI.Container();\r\n        this.tracer = new PIXIParticles.Emitter(\r\n            container,\r\n            [Resources.getResource(Resources.loaded.tracer).texture],\r\n            {\r\n                \"alpha\": {\r\n                    \"start\": 1,\r\n                    \"end\": 0\r\n                },\r\n                \"scale\": {\r\n                    \"start\": 0.4,\r\n                    \"end\": 0.1,\r\n                    \"minimumScaleMultiplier\": 1\r\n                },\r\n                \"color\": {\r\n                    \"start\": \"#e4f9ff\",\r\n                    \"end\": \"#3fcbff\"\r\n                },\r\n                \"speed\": {\r\n                    \"start\": 0,\r\n                    \"end\": 0,\r\n                    \"minimumSpeedMultiplier\": 1\r\n                },\r\n                \"acceleration\": {\r\n                    \"x\": 0,\r\n                    \"y\": 0\r\n                },\r\n                \"maxSpeed\": 0,\r\n                \"startRotation\": {\r\n                    \"min\": 0,\r\n                    \"max\": 360\r\n                },\r\n                \"noRotation\": false,\r\n                \"rotationSpeed\": {\r\n                    \"min\": 0,\r\n                    \"max\": 0\r\n                },\r\n                \"lifetime\": {\r\n                    \"min\": 0.8,\r\n                    \"max\": 0.8\r\n                },\r\n                \"blendMode\": \"normal\",\r\n                \"frequency\": 0.001,\r\n                \"emitterLifetime\": -1,\r\n                \"maxParticles\": 1000,\r\n                \"pos\": {\r\n                    \"x\": 0,\r\n                    \"y\": 0\r\n                },\r\n                \"addAtBack\": true,\r\n                \"spawnType\": \"point\"\r\n            }\r\n        );\r\n        this.tracer.emit = true;\r\n        this.window.addChild(container);\r\n        this.window.addChild(sprite);\r\n\r\n        this.player = {\r\n            sprite: sprite,\r\n            body: body\r\n        }\r\n    }\r\n\r\n    bakeStageTexture(definition) {\r\n        definition = {\r\n            ...definition,\r\n            points: definition.points.map(point => point.multiply(bakeScale, bakeScale)),\r\n            colors: definition.colors.map(color => { return { color: color.color, position: color.position * bakeScale } })\r\n        }\r\n        const start = new Date();\r\n        const graphics = new PIXI.Graphics();\r\n        graphics.beginFill(0x000000);\r\n        graphics.drawPolygon(definition.points.map(point => point.multiply(1, 1).toPixiPoint()));\r\n        graphics.endFill();\r\n        const bounds = graphics.getBounds();\r\n        const container = new PIXI.Container();\r\n        const textures = [];\r\n        const pointsets = [];\r\n        const internal = [];\r\n\r\n        for (let i = 0; i < definition.internal; i++) {\r\n            let point = null;\r\n            do {\r\n                point = new Point(bounds.x + Math.floor(Math.random() * bounds.width), bounds.y + Math.floor(Math.random() * bounds.height));\r\n            } while (!util.inside(point.toArray(), definition.points.map(point => point.toArray())));\r\n            internal.push(point);\r\n        }\r\n\r\n        const points = [...definition.points, ...internal];\r\n        const triangles = Triangulator.from(points.map(point => point.toArray())).triangles;\r\n        for (let i = 0; i < triangles.length; i += 3) {\r\n            pointsets.push([\r\n                points[triangles[i]],\r\n                points[triangles[i + 1]],\r\n                points[triangles[i + 2]]\r\n            ]);\r\n        }\r\n\r\n        for (let index = 0; index < pointsets.length; index++) {\r\n            const points = pointsets[index];\r\n            const texture = new PIXI.Graphics();\r\n            texture.beginFill(0xffffff);\r\n            texture.drawPolygon(points.map(point => point.toPixiPoint()));\r\n            texture.endFill();\r\n            const shape = texture.getBounds();\r\n            texture.clear();\r\n\r\n            // Interpolate colors\r\n            const x = shape.x;\r\n            let primary = 0x000000;\r\n            let primaryDistance = -1;\r\n            let accent = 0xffffff;\r\n            let accentDistance = -1;\r\n            for (const color of definition.colors) {\r\n                const disance = Math.abs(x - color.position);\r\n                if (primaryDistance === -1) {\r\n                    primaryDistance = disance;\r\n                    primary = color.color;\r\n                    accent = primary;\r\n                    accentDistance = primaryDistance;\r\n                    continue;\r\n                }\r\n                if (disance < primaryDistance) {\r\n                    accent = primary;\r\n                    accentDistance = primaryDistance;\r\n                    primaryDistance = disance;\r\n                    primary = color.color;\r\n                }\r\n            }\r\n            const ratio = accentDistance === 0 ? 1 : primaryDistance / accentDistance;\r\n            const r = (((primary >> 16) & 255) * (1 - ratio)) + (((accent >> 16) & 255) * (ratio));\r\n            const g = (((primary >> 8) & 255) * (1 - ratio)) + (((accent >> 8) & 255) * (ratio));\r\n            const b = ((primary & 255) * (1 - ratio)) + ((accent & 255) * (ratio));\r\n            const color = 0x1000000 + (r << 16) + (g << 8) + b;\r\n\r\n            texture.beginFill(color);\r\n            texture.drawPolygon(points.map(point => point.toPixiPoint()));\r\n            texture.endFill();\r\n            const tex = this.app.renderer.generateTexture(texture);\r\n            textures.push(tex);\r\n            const sprite = new PIXI.Sprite(tex);\r\n            sprite.filters = [lightenShaders[index % lightenShaders.length]];\r\n            sprite.blendMode = PIXI.BLEND_MODES.ADD;\r\n            sprite.x = shape.x;\r\n            sprite.y = shape.y;\r\n            container.addChild(sprite);\r\n        }\r\n        //container.filters = [darkenShaders[1], darkenShaders[1]];\r\n        const render = new PIXI.RenderTexture(new PIXI.BaseRenderTexture(bounds.width + bounds.x, bounds.height + bounds.y, PIXI.SCALE_MODES.LINEAR, 1));\r\n        this.app.renderer.render(container, render);\r\n        for (const texture of textures) {\r\n            texture.destroy(true);\r\n        }\r\n\r\n        const end = new Date();\r\n        console.log(\"Texture '\" + definition.name + \"' polygon \" + definition.index + \" (Internal: \" + definition.internal + \") bake took \" + (end - start) + \"ms\");\r\n\r\n        this.generated.push(render);\r\n        return render;\r\n    }\r\n\r\n    addStageObject(x, y, definition) {\r\n        console.log(definition)\r\n        for (const shape of definition.shapes) {\r\n            // Graphics\r\n            const sprite = new PIXI.Sprite(shape.texture);\r\n            sprite.x = x;\r\n            sprite.y = y;\r\n            sprite.scale.x = 1 / bakeScale;\r\n            sprite.scale.y = 1 / bakeScale;\r\n            this.window.addChild(sprite);\r\n\r\n            // Physics\r\n            const fixture = this.physicsStage.createFixture({\r\n                shape: planck.Polygon(shape.points.map(point => point.add(x, y).scaleToPhysics().toVec2())),\r\n                friction: 0.9,\r\n                restitution: 0.8\r\n            });\r\n\r\n            // Add\r\n            const object = {\r\n                fixture: fixture,\r\n                sprite: sprite\r\n            };\r\n            this.objects.push(object);\r\n        }\r\n    }\r\n\r\n    addSprite(x, y, sheet, name, scale = 1) {\r\n        const result = Sprites.create(sheet, name, this.physicsStage, x, y, scale);\r\n        this.window.addChild(result.sprite);\r\n\r\n        if (result.debug.length > 0) {\r\n            let graphics = new PIXI.Graphics();\r\n            graphics.beginFill(0xffffff);\r\n            for (let polygon of result.debug) {\r\n                graphics.drawPolygon(polygon.map(point => point.toPixiPoint()));\r\n            }\r\n            graphics.endFill();\r\n            this.window.addChild(graphics);\r\n        }\r\n\r\n        this.objects.push(result);\r\n    }\r\n\r\n    getGeneratedTextures() {\r\n        return this.generated;\r\n    }\r\n}\r\n\r\nexport default World;\r\n","export default {\r\n    name: \"test\",\r\n    definitions: {\r\n        ground: {\r\n            points: [[0, 500], [100, 490], [200, 470], [300, 420], [400, 340], [500, 320], [600, 330], [700, 360], [800, 340], [850, 310],\r\n            [1000, 300], [1500, 100], [2000, 50], [2500, 0], [3000, 50], [4000, 100], [5000, 250], [6000, 100], [7000, 0],\r\n            [7000, 310], [7000, 900], [200, 900], [100, 900], [60, 700]],\r\n            internal: 100,\r\n            colors: [{ color: 0xefea9e, position: 0 }, { color: 0xf7ef99, position: 1000 }, { color: 0xefea9e, position: 2000 }]\r\n        },\r\n        wall: {\r\n            points: [[0, 0], [10, 0], [10, 2000], [0, 2000]],\r\n            internal: 1,\r\n            colors: [{ color: 0x0f0038, position: 0 }, { color: 0x0d0428, position: 50 }]\r\n        }\r\n    },\r\n    objects: [\r\n        {\r\n            name: \"ground\",\r\n            x: 0,\r\n            y: 0\r\n        },\r\n        {\r\n            name: \"wall\",\r\n            x: -3000,\r\n            y: 8000\r\n        },\r\n        {\r\n            name: \"wall\",\r\n            x: -3000,\r\n            y: 6000\r\n        },\r\n        {\r\n            name: \"wall\",\r\n            x: -3000,\r\n            y: 4000\r\n        },\r\n        {\r\n            name: \"wall\",\r\n            x: -3000,\r\n            y: 2000\r\n        },\r\n        {\r\n            name: \"wall\",\r\n            x: -3000,\r\n            y: 0\r\n        }\r\n    ],\r\n    sprites: [\r\n        {\r\n            sheet: \"fruit\",\r\n            name: \"apple\",\r\n            x: 50,\r\n            y: 50,\r\n            scale: 0.5\r\n        }\r\n    ]\r\n}","import * as PIXI from 'pixi.js';\r\nimport Point from './Point';\r\nimport * as util from './util/Util';\r\nimport * as shaders from './assets/shaders/Shaders';\r\nimport Sprites from './assets/sprites/Sprites'\r\nimport Levels from './assets/levels/Levels'\r\n\r\nclass Editor {\r\n    constructor(game) {\r\n        this.definitions = game.level.definitions;\r\n        this.game = game;\r\n        this.level = game.level;\r\n        this.app = this.game.app;\r\n        this.objects = [];\r\n        this.generated = [];\r\n        this.window = new PIXI.Container();\r\n\r\n        const center = util.getScreenCenter();\r\n        this.x = center.x;\r\n        this.y = center.y;\r\n    }\r\n\r\n    init() {\r\n        this.game.resizeBus.push(() => {\r\n            this.background.clear();\r\n            this.background.beginFill(0x111111);\r\n            this.background.drawRect(0, 0, this.app.renderer.width + 20, this.app.renderer.height + 20);\r\n        });\r\n\r\n        // Generate stage textures\r\n        for (const key in this.definitions) {\r\n            const definition = this.definitions[key];\r\n            definition.texture = this.bakeStageTexture({\r\n                name: key,\r\n                points: definition.points.map(point => new Point(point[0], point[1])),\r\n                colors: definition.colors\r\n            });\r\n        }\r\n\r\n        // Background\r\n        this.backgroundShader = shaders.sky();\r\n        this.background = new PIXI.Graphics();\r\n        this.background.beginFill(0x111111);\r\n        this.background.drawRect(0, 0, this.app.renderer.width + 20, this.app.renderer.height + 20);\r\n        this.background.filters = [this.backgroundShader.shader]\r\n        this.window.addChild(this.background);\r\n        this.window.interactive = true;\r\n        this.window.mousedown = (event) => {\r\n            this.window.dragging = true;\r\n            this.window.startx = event.data.global.x + this.x;\r\n            this.window.starty = event.data.global.y + this.y;\r\n        }\r\n        this.window.mousemove = (event) => {\r\n            if (this.window.dragging) {\r\n                this.x = this.window.startx - event.data.global.x;\r\n                this.y = this.window.starty - event.data.global.y;\r\n            }\r\n        }\r\n        this.window.mouseup = (event) => {\r\n            this.window.dragging = false;\r\n        }\r\n        this.window.mouseupoutside = (event) => {\r\n            this.window.dragging = false;\r\n        }\r\n\r\n        for (const object of this.level.objects) {\r\n            this.addStageObject(object.x, object.y * -1, this.definitions[object.name]).component = object;\r\n        }\r\n        for (const sprite of this.level.sprites) {\r\n            const scale = sprite.scale === undefined ? 1 : sprite.scale;\r\n            this.addSprite(sprite.x, sprite.y * -1, sprite.sheet, sprite.name, scale).component = sprite;\r\n        }\r\n\r\n        this.createPlayer();\r\n        this.app.stage.addChild(this.window);\r\n    }\r\n\r\n    tick(delta) {\r\n        const center = util.getScreenCenter();\r\n        this.window.position.set(center.x - this.x, center.y - this.y);\r\n        this.background.x = this.x - center.x - 10;\r\n        this.background.y = this.y - center.y - 10;\r\n\r\n        this.player.sprite.x = this.x;\r\n        this.player.sprite.y = this.y;\r\n    }\r\n\r\n    createPlayer() {\r\n        const playerSize = 10;\r\n        const graphics = new PIXI.Graphics();\r\n        graphics.beginFill(0xff0000);\r\n        graphics.drawCircle(0, 0, playerSize);\r\n        const texture = this.app.renderer.generateTexture(graphics);\r\n        this.generated.push(texture);\r\n        const sprite = new PIXI.Sprite(texture);\r\n        sprite.anchor.x = 0.5;\r\n        sprite.anchor.y = 0.5;\r\n        sprite.x = this.x;\r\n        sprite.y = this.y;\r\n        this.window.addChild(sprite);\r\n\r\n        this.player = {\r\n            sprite: sprite\r\n        }\r\n    }\r\n\r\n    bakeStageTexture(def) {\r\n        const points = def.points;\r\n        const graphics = new PIXI.Graphics();\r\n        graphics.beginFill(0x000000);\r\n        graphics.drawPolygon(points.map(point => point.multiply(1, 1).toPixiPoint()));\r\n        graphics.endFill();\r\n        const bounds = graphics.getBounds();\r\n        const container = new PIXI.Container();\r\n        const textures = [];\r\n\r\n        const texture = new PIXI.Graphics();\r\n        texture.beginFill(0xffffff);\r\n        texture.drawPolygon(points.map(point => point.toPixiPoint()));\r\n        texture.endFill();\r\n        const shape = texture.getBounds();\r\n        const tex = this.app.renderer.generateTexture(texture);\r\n        textures.push(tex);\r\n        const sprite = new PIXI.Sprite(tex);\r\n        sprite.blendMode = PIXI.BLEND_MODES.ADD;\r\n        sprite.x = shape.x;\r\n        sprite.y = shape.y;\r\n        container.addChild(sprite);\r\n        const render = new PIXI.RenderTexture(new PIXI.BaseRenderTexture(bounds.width + bounds.x, bounds.height + bounds.y, PIXI.SCALE_MODES.LINEAR, 1));\r\n        this.app.renderer.render(container, render);\r\n        for (const texture of textures) {\r\n            texture.destroy(true);\r\n        }\r\n        this.generated.push(render);\r\n\r\n        return render;\r\n    }\r\n\r\n    addStageObject(x, y, definition) {\r\n        const sprite = new PIXI.Sprite(definition.texture);\r\n        sprite.x = x;\r\n        sprite.y = y;\r\n        sprite.scale.x = 1;\r\n        sprite.scale.y = 1;\r\n        this.window.addChild(sprite);\r\n\r\n        const object = {\r\n            sprite: sprite\r\n        };\r\n        this.makeInteractive(sprite, () => {\r\n            object.component.x = sprite.x;\r\n            object.component.y = -sprite.y;\r\n        });\r\n\r\n        this.objects.push(object);\r\n        return object;\r\n    }\r\n\r\n    addSprite(x, y, sheet, name, scale = 1) {\r\n        const result = Sprites.createSprite(sheet, name, x, y, scale);\r\n        this.window.addChild(result.sprite);\r\n        this.makeInteractive(result.sprite, () => {\r\n            result.component.x = result.sprite.x;\r\n            result.component.y = -result.sprite.y;\r\n        });\r\n        this.objects.push(result);\r\n        return result;\r\n    }\r\n\r\n    makeInteractive(thing, callback) {\r\n        thing.interactive = true;\r\n        thing.rightdown = (event) => {\r\n            thing.dragging = true;\r\n            thing.startx = event.data.global.x - thing.x;\r\n            thing.starty = event.data.global.y - thing.y;\r\n        }\r\n        thing.pointermove = (event) => {\r\n            if (thing.dragging) {\r\n                thing.x = event.data.global.x - thing.startx;\r\n                thing.y = event.data.global.y - thing.starty;\r\n            }\r\n        }\r\n        thing.rightup = (event) => {\r\n            thing.dragging = false;\r\n            callback();\r\n        }\r\n    }\r\n\r\n    getGeneratedTextures() {\r\n        return this.generated;\r\n    }\r\n}\r\n\r\nexport default Editor;","import * as PIXI from 'pixi.js';\r\nimport * as PIXIFilters from 'pixi-filters';\r\nimport World from './World';\r\nimport * as planck from 'planck-js';\r\nimport Resources from './Resources'\r\nimport Sprites from './assets/sprites/Sprites'\r\nimport testlevel from './assets/levels/Test'\r\nimport Editor from './Editor';\r\nimport * as util from './util/Util';\r\nimport Point from './Point';\r\nimport Levels from './assets/levels/Levels';\r\n\r\nclass Game {\r\n    constructor() {\r\n        PIXI.settings.PRECISION_FRAGMENT = PIXI.PRECISION.HIGH; // Big hack for fxaa\r\n        planck.internal.Settings.velocityThreshold = 0.1; // Bounce\r\n        this.app = new PIXI.Application({ width: window.innerWidth, height: window.innerHeight, transparent: false });\r\n        this.editor = false;\r\n        this.ready = false;\r\n        this.app.renderer.autoResize = true;\r\n        this.resizeBus = [\r\n            () => this.app.renderer.resize(window.innerWidth, window.innerHeight)\r\n        ]\r\n        window.onresize = () => this.resize();\r\n        this.level = Levels.getLevel(\"test\");\r\n        util.keyboard(\"e\").press = () => {\r\n            let position = null;\r\n            if (this.editor) {\r\n                position = new Point(this.content.x, this.content.y);\r\n            } else {\r\n                position = new Point(this.content.player.sprite.x, this.content.player.sprite.y);\r\n            }\r\n            this.editor = !this.editor;\r\n            const loadingPosition = util.getScreenCenter().subtract(this.loading.width / 2, this.loading.height / 2);\r\n            this.loading.x = loadingPosition.x;\r\n            this.loading.y = loadingPosition.y;\r\n            this.app.stage.addChild(this.loading);\r\n            this.app.render();\r\n            setTimeout(() => {\r\n                for (let texture of this.content.getGeneratedTextures()) {\r\n                    texture.destroy(true);\r\n                }\r\n                while (this.app.stage.children.length > 0) {\r\n                    this.app.stage.removeChild(this.app.stage.getChildAt(0));\r\n                }\r\n                this.createContent();\r\n                if (this.editor) {\r\n                    this.content.x = position.x;\r\n                    this.content.y = position.y;\r\n                } else {\r\n                    this.content.initialPlayerPosition = position;\r\n                }\r\n                this.initializeRender();\r\n            }, 10);\r\n\r\n        }\r\n        util.keyboard(\"p\").press = () => {\r\n            console.log(Levels.levelToString(this.level));\r\n        }\r\n        this.createContent();\r\n        this.app.ticker.add(delta => this.tick(delta));\r\n    }\r\n\r\n    createContent() {\r\n        this.ready = false;\r\n        if (this.editor) {\r\n            this.content = new Editor(this);\r\n        } else {\r\n            this.content = new World(this);\r\n        }\r\n    }\r\n\r\n    init(callback) {\r\n        this.callback = callback;\r\n        const loader = PIXI.loader;\r\n        for (const resource of Resources.getResources()) {\r\n            loader.add(resource.name, resource.path);\r\n        }\r\n        this.callback(false, \"Loading resources...\");\r\n        loader.on('progress', (loader, res) => {\r\n            this.callback(false, \"Loading resources... (\" + Math.round(loader.progress) + \"%)\");\r\n        });\r\n        loader.load(() => this.loadSprites());\r\n    }\r\n\r\n    injectPixiContext(element) {\r\n        if (element && element.children.length <= 0) {\r\n            element.appendChild(this.app.view);\r\n        }\r\n    }\r\n\r\n    loadSprites() {\r\n        this.callback(false, \"Generating textures...\");\r\n        this.loading = new PIXI.Sprite(Resources.getResource(Resources.loaded.loading).texture);\r\n        Sprites.init(() => this.buildWorld());\r\n    }\r\n\r\n    buildWorld() {\r\n        this.callback(false, \"Building world...\");\r\n        setTimeout(() => {\r\n            this.initializeRender();\r\n        }, 100);\r\n    }\r\n\r\n    initializeRender() {\r\n        this.content.init();\r\n        this.app.stage.filters = [new PIXI.filters.FXAAFilter()];\r\n        this.ready = true;\r\n        this.callback(true, \"Done!\");\r\n    }\r\n\r\n    tick(delta) {\r\n        if (this.ready) {\r\n            this.content.tick(delta);\r\n        }\r\n    }\r\n\r\n    resize() {\r\n        for (let handler of this.resizeBus) {\r\n            handler();\r\n        }\r\n    }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\nimport Game from './game/Game';\nimport { Box, Image, Grommet, Text, TextInput } from \"grommet\";\nimport { grommet } from \"grommet/themes\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.game = new Game();\n    this.state = {\n      ready: false,\n      status: \"Initializing\",\n      search: \"\",\n      selecting: false\n    }\n  }\n\n  componentDidMount() {\n    this.game.init((ready, status) => {\n      this.setState({\n        ready: ready,\n        status: status\n      });\n    });\n  }\n\n  updateSearch(event) {\n    this.setState({\n      search: event.target.value\n    })\n  }\n\n  render() {\n    const search = (\n      <div style={{ position: \"absolute\", left: \"32%\", right: \"32%\", top: \"22%\"}}>\n        <Grommet theme={grommet}>\n            <Box>\n              <TextInput ref={this.ref} value={this.state.search} onChange={(event) => this.updateSearch(event)} placeholder=\"Search...\" />\n            </Box>\n        </Grommet>\n      </div>\n    );\n\n    let result = (<h1>{this.state.status}</h1>);\n    if (this.state.ready) {\n      result = (\n        <div>\n          {this.state.selecting && search}\n          <div ref={element => this.game.injectPixiContext(element)} />\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {result}\n      </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\ndocument.oncontextmenu = document.body.oncontextmenu = (event) => event.preventDefault();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}